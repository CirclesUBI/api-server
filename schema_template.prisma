datasource db {
    provider = "postgresql"
    url = "REPLACE_ME_WITH_THE_CONNECTION_STRING"
}

generator client {
    provider = "prisma-client-js"
}

model Session {
  //id Int @id @default(autoincrement())
  sessionId String @unique
  // Who is identified by the session?
  emailAddress String
  profile Profile? @relation(name: "Session_Profile", fields: [profileId], references: [id])
  profileId Int?
  // Which Authoritity issued the JWT that lead to this session?
  issuedBy String
  // The id of the jwt that was exchanged for this session
  jti String?
  // When the session was created.
  createdAt DateTime
  endedAt DateTime?
  endReason String?
  // This fields specifies the max. session lifetime in seconds.
  maxLifetime Int
}

model Profile {
    id Int @id @default(autoincrement())
    emailAddress String
    @@unique([emailAddress], name:"UX_Profile_EmailAddress")

    circlesAddress String?
    circlesSafeOwner String?
    circlesTokenAddress String?
    firstName String
    lastName String?
    avatarUrl String?
    avatarCid String?
    avatarMimeType String?
    dream String?
    country String?
    newsletter Boolean?
    cityGeonameid Int?

    verifySafeChallenge String?
    newSafeAddress String?

    sessions Session[]  @relation(name: "Session_Profile")

    inbox Message[]  @relation(name: "Message_To")
    outbox Message[]  @relation(name: "Message_CreatedBy")

    offers Offer[]  @relation(name: "Offer_CreatedBy")
    tags Tag[]  @relation(name: "Tag_CreatedBy")
    purchases Purchase[]  @relation(name: "Purchase_CreatedBy")
    indexedTransactions IndexedTransaction[]  @relation(name: "IndexedTransaction_CreatedBy")
    indexedTransactionRequests IndexTransactionRequest[]  @relation(name: "IndexTransactionRequest_CreatedBy")
}

model MessageType {
    id String @id

    messages Message[] @relation(name: "Message_MessageType")
}

model Message {
    id Int @id @default(autoincrement())

    type MessageType @relation(name: "Message_MessageType", fields: [typeId], references: [id])
    typeId String

    from Profile @relation(name: "Message_CreatedBy", fields: [fromProfileId], references: [id])
    fromProfileId Int

    to Profile @relation(name: "Message_To", fields: [toProfileId], references: [id])
    toProfileId Int

    createdAt DateTime
    deliveredAt DateTime?
    notifiedAt DateTime?
    readAt DateTime?

    tags Tag[] @relation(name:"Message_Tags")

    content String
}

model IndexedTransactionLog {
    id Int @id @default(autoincrement())
    indexedTransaction IndexedTransaction  @relation(name:"IndexedTransaction_Logs", fields: [indexedTransactionId], references: [id])
    indexedTransactionId Int
    blockNumber Int
    blockHash String
    transactionIndex Int
    removed Boolean?
    address String
    data String?
    topics String[]
    transactionHash String
    logIndex Int
}

model IndexTransactionRequest {
    id Int @id @default(autoincrement())

    createdAt DateTime
    createdBy Profile @relation(name: "IndexTransactionRequest_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int

    blockNumber Int
    transactionIndex Int
    transactionHash String

    indexedTransaction IndexedTransaction? @relation(name: "IndexTransaction_FromRequest")
    tags Tag[] @relation(name:"IndexTransactionRequest_Tags")
}

model IndexedTransaction {
    id Int @id @default(autoincrement())

    fromRequest IndexTransactionRequest @relation(name: "IndexTransaction_FromRequest", fields: [fromRequestId], references: [id])
    fromRequestId Int

    createdAt DateTime
    createdBy Profile @relation(name: "IndexedTransaction_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int

    to String
    from String
    contractAddress String?
    transactionIndex Int
    root String?
    gasUsed String
    logsBloom String
    blockHash String
    transactionHash String
    blockNumber Int
    confirmations Int?
    cumulativeGasUsed String
    status String?

    logs IndexedTransactionLog[] @relation(name:"IndexedTransaction_Logs")
    tags Tag[] @relation(name:"IndexedTransaction_Tags")
}

model DelegatedChallenges {
    id Int @id @default(autoincrement())
    createdAt DateTime
    appId String
    sessionId String
    requestValidTo DateTime
    delegateAuthCode String
    @@unique([delegateAuthCode], name:"UX_DelegatedChallenges_delegateAuthCode")
    challenge String?
    challengeDepositedAt DateTime?
    challengeValidTo DateTime?
    challengedReadAt DateTime?
}

model Offer {
    id Int @id @default(autoincrement())

    createdBy Profile @relation(name: "Offer_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int

    publishedAt DateTime
    unlistedAt DateTime?
    purchasedAt DateTime?

    purchase Purchase? @relation(name: "Purchase_PurchasedItem")

    title String
    pictureUrl String?
    pictureMimeType String?
    description String?

    categoryTag Tag @relation(name: "Offer_CategoryTag", fields: [categoryTagId], references: [id])
    categoryTagId Int

    geonameid Int // city

    pricePerUnit String

    unitTag Tag @relation(name: "Offer_UnitTag", fields: [unitTagId], references: [id])
    unitTagId Int

    maxUnits Int?

    deliveryTermsTag Tag @relation(name: "Offer_DeliveryTermsTag", fields: [deliveryTermsTagId], references: [id])
    deliveryTermsTagId Int
}

model TagType {
    id String @id

    tags Tag[] @relation(name: "Tag_TagType")
}

model Tag {
    id Int @id @default(autoincrement())

    createdAt DateTime
    createdBy Profile @relation(name: "Tag_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int

    isPrivate Boolean

    type TagType @relation(name: "Tag_TagType", fields: [typeId], references: [id])
    typeId String

    value String?

    offerCategory Offer[] @relation(name: "Offer_CategoryTag")
    offerUnit Offer[] @relation(name: "Offer_UnitTag")
    offerDeliveryTerms Offer[] @relation(name: "Offer_DeliveryTermsTag")

    indexTransactionRequest IndexTransactionRequest? @relation(name: "IndexTransactionRequest_Tags", fields: [indexTransactionRequestId], references: [id])
    indexTransactionRequestId Int?
    indexedTransaction IndexedTransaction? @relation(name: "IndexedTransaction_Tags", fields: [indexedTransactionId], references: [id])
    indexedTransactionId Int?

    message Message? @relation(name: "Message_Tags", fields: [messageId], references: [id])
    messageId Int?
}

enum PurchaseStatus {
      INVALID
      ITEM_LOCKED
      PAYMENT_PROVEN
}

model Purchase {
    id Int @id @default(autoincrement())
    purchasedBy Profile @relation(name: "Purchase_CreatedBy", fields: [purchasedByProfileId], references: [id])
    purchasedByProfileId Int
    purchasedAt DateTime
    purchasedProvenAt DateTime?
    purchasedItem Offer @relation(name: "Purchase_PurchasedItem", fields: [purchasedItemId], references: [id])
    purchasedItemId Int
    status PurchaseStatus
}