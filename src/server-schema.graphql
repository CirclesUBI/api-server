scalar Date
directive @cost(value: Int) on FIELD_DEFINITION
directive @costFactor(value: Int) on FIELD_DEFINITION

type Server {
  version: String!
}

enum ProfileOrigin {
  CirclesGarden
  CirclesLand
  Unknown
}

enum ProfileType {
  PERSON
  ORGANISATION
  REGION
}

enum Gender {
  MALE
  FEMALE
  DIVERS
}

type Profile {
  id: Int!
  type: ProfileType
  origin: ProfileOrigin
  status: String
  circlesAddress: String
  successorOfCirclesAddress: String
  circlesSafeOwner: String
  circlesTokenAddress: String
  displayName: String
  firstName: String!
  lastName: String
  confirmedLegalAge: Int
  emailAddress: String
  askedForEmailAddress: Boolean!
  dream: String
  country: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  avatarCid: String
  avatarMimeType: String
  newsletter: Boolean
  displayTimeCircles: Boolean
  claimedInvitation: ClaimedInvitation
  invitationTransaction: ProfileEvent
  invitationLink: String
  memberships: [Membership!]
  members: [Profile!]
  displayCurrency: DisplayCurrency
  verifications: [Verification!]
  balances: ProfileBalances
  contacts: [Contact!] @cost(value: 1)
  provenUniqueness: Boolean
  age: Int
  gender: Gender
  location: String
  locationName: String
  lat: Float
  lon: Float
  category: BusinessCategory
  favorites: [Favorite!]
}

type Favorite {
  createdAt: String!
  createdBy: Profile!
  favorite: Profile!
  comment: String
}

type BusinessCategory {
  id: Int!
  category: BusinessCategory
}

type ProfileBalances {
  crcBalances: CrcBalances
  erc20Balances: Erc20Balances
}

enum DisplayCurrency {
  CRC
  TIME_CRC
  EURS
}

type Membership {
  createdAt: String!
  createdBy: Profile
  createdByProfileId: Int!

  acceptedAt: String
  rejectedAt: String

  validTo: String
  isAdmin: Boolean!

  organisation: Organisation!
}

type Organisation {
  id: Int!
  createdAt: String!
  circlesAddress: String
  circlesSafeOwner: String
  displayName: String
  name: String!
  description: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  avatarMimeType: String
  displayCurrency: DisplayCurrency
  members: [ProfileOrOrganisation!]
  trustsYou: Int # The trust relative to the safeAddress
  location: String
  locationName: String
  lat: Float
  lon: Float
}

union ProfileOrOrganisation = Profile | Organisation

input QueryUniqueProfileInput {
  id: Int!
}

input QueryProfileInput {
  id: [Int!]
  firstName: String
  lastName: String
  country: String
  circlesAddress: [String!]
}
input SearchInput {
  searchString: String!
}

input UpsertProfileInput {
  id: Int
  status: String!
  firstName: String!
  lastName: String
  dream: String
  country: String
  emailAddress: String
  askedForEmailAddress: Boolean
  successorOfCirclesAddress: String
  circlesAddress: String
  circlesSafeOwner: String
  circlesTokenAddress: String
  avatarUrl: String
  avatarCid: String
  avatarMimeType: String
  newsletter: Boolean
  displayTimeCircles: Boolean
  displayCurrency: DisplayCurrency
  age: Int
  gender: Gender
  location: String
  locationName: String
  lat: Float
  lon: Float
}

type Tag {
  id: Int!
  typeId: String!
  value: String
  order: Int
}

input CreateTagInput {
  typeId: String!
  value: String
}

input UpsertTagInput {
  id: Int
  typeId: String!
  value: String
}

type ExchangeTokenResponse {
  success: Boolean!
  errorMessage: String
}

type LogoutResponse {
  success: Boolean!
  errorMessage: String
}

type SessionInfo {
  isLoggedOn: Boolean!
  hasProfile: Boolean
  profileId: Int
  profile: Profile
  capabilities: [Capability!]!

  useShortSignup: Boolean
}

enum CapabilityType {
  Verify
  Invite
  Translate
  PreviewFeatures
  Tickets
  VerifiedByHumanode
}

type Capability {
  type: CapabilityType
}

type Version {
  major: Int!
  minor: Int!
  revision: Int!
}

input RequestUpdateSafeInput {
  newSafeAddress: String!
}

type RequestUpdateSafeResponse {
  success: Boolean!
  errorMessage: String
  challenge: String
}

input UpdateSafeInput {
  signature: String!
}

type UpdateSafeResponse {
  success: Boolean!
  errorMessage: String
  newSafeAddress: String
}

input QueryTagsInput {
  typeId_in: [String!]!
  value_like: String
}

interface IEventPayload {
  transaction_hash: String
}

interface IAggregatePayload {
  lastUpdatedAt: String
}

# ${user} just signed up with token ${token}
type CrcSignup implements IEventPayload {
  transaction_hash: String!
  user: String!
  user_profile: Profile @cost(value: 1)
  token: String!
}

# ${can_send_to} trusts ${address} with limit ${limit}
type CrcTrust implements IEventPayload {
  transaction_hash: String!
  address: String!
  address_profile: Profile @cost(value: 1)
  can_send_to: String!
  can_send_to_profile: Profile @cost(value: 1)
  limit: Int!
}

type Erc20Transfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  token: String!
  value: String!
}

# ${from} sent ${value} CRC to ${to}
type CrcTokenTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  token: String!
  value: String!
}

# ${from} sent ${value} CRC to ${to}
type CrcHubTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  flow: String!
  transfers: [CrcTokenTransfer!]!
  tags: [Tag!]!
}

# ${to} received a ubi payout of ${value} CRC
type CrcMinting implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  value: String!
  token: String!
}

# ${from} sent ${value} xdai to ${to}
type EthTransfer implements IEventPayload {
  transaction_hash: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  value: String!
  tags: [Tag!]!
}

# ${from} sent ${value} xdai to ${to}
type GnosisSafeEthTransfer implements IEventPayload {
  transaction_hash: String!
  initiator: String!
  from: String!
  from_profile: Profile @cost(value: 1)
  to: String!
  to_profile: Profile @cost(value: 1)
  value: String!
  tags: [Tag!]!
}

# ${createdBy} invited you to join ${organisation}. Do you want to accept the invitation?
type MembershipOffer implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile @cost(value: 1)
  isAdmin: Boolean!
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
}

# !isAdmin: You|${createdBy} added ${member} as a member to ${organisation}
# isAdmin: You|${createdBy} added ${member} as an admin to ${organisation}
type MemberAdded implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile @cost(value: 1)
  member: String!
  member_profile: Profile @cost(value: 1)
  isAdmin: Boolean!
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
}

# ${member} accepted your|${createdBy}'s invitation to ${organisation}
type NewUser implements IEventPayload {
  transaction_hash: String
  profile: Profile!
}

# ${member} accepted your|${createdBy}'s invitation to ${organisation}
type MembershipAccepted implements IEventPayload {
  transaction_hash: String
  createdBy: String!
  createdBy_profile: Profile @cost(value: 1)
  member: String!
  member_profile: Profile @cost(value: 1)
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
}

# ${member} rejected your invitation to ${organisation}
type MembershipRejected implements IEventPayload {
  transaction_hash: String
  member: String!
  member_profile: Profile @cost(value: 1)
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
}

# You created a new invitation with the name ${name}
type InvitationCreated implements IEventPayload {
  transaction_hash: String
  name: String!
  code: String!
}

# ${redeemedBy} redeemed your invitation ${name} with code ${code}
type InvitationRedeemed implements IEventPayload {
  transaction_hash: String
  name: String!
  code: String!
  redeemedBy: String
  redeemedBy_profile: Profile @cost(value: 1)
}

# Welcome!
# ${member} invited you to circles.
# Do you want to trust ${member}?
type WelcomeMessage implements IEventPayload {
  transaction_hash: String
  invitedBy: String!
  invitedBy_profile: Profile @cost(value: 1)
}

# You created the ${name} organisation
type OrganisationCreated implements IEventPayload {
  transaction_hash: String
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
}

# ${organisation} verified your safe ${safe_address}
type SafeVerified implements IEventPayload {
  transaction_hash: String
  organisation: String!
  organisation_profile: Organisation @cost(value: 1)
  safe_address: String!
}

union EventPayload =
    CrcSignup
  | CrcTrust
  | CrcTokenTransfer
  | CrcHubTransfer
  | CrcMinting
  | EthTransfer
  | Erc20Transfer
  | GnosisSafeEthTransfer
  | MembershipOffer
  | MembershipAccepted
  | MembershipRejected
  | WelcomeMessage
  | InvitationCreated
  | InvitationRedeemed
  | OrganisationCreated
  | MemberAdded
  | SafeVerified
  | NewUser

enum EventType {
  CrcSignup
  CrcTrust
  CrcTokenTransfer
  CrcHubTransfer
  Erc20Transfer
  CrcMinting
  EthTransfer
  GnosisSafeEthTransfer
  MembershipOffer
  MembershipAccepted
  MembershipRejected
  WelcomeMessage
  InvitationCreated
  InvitationRedeemed
  OrganisationCreated
  MemberAdded
  SafeVerified
  NewUser
}

enum AggregateType {
  CrcBalances
  Erc20Balances
  Contacts
  Memberships
  Members
  Sales
}

# All crc holdings of the user
type CrcBalances implements IAggregatePayload {
  lastUpdatedAt: String!
  total: String
  balances: [AssetBalance!]! @cost(value: 1)
}

# All crc holdings of the user
type Erc20Balances implements IAggregatePayload {
  lastUpdatedAt: String!
  balances: [AssetBalance!]! @cost(value: 1)
}

type Contacts implements IAggregatePayload {
  lastUpdatedAt: String!
  contacts: [Contact!]! @cost(value: 1)
}

type Memberships implements IAggregatePayload {
  lastUpdatedAt: String!
  organisations: [Organisation!]! @cost(value: 1)
}

type Members implements IAggregatePayload {
  lastUpdatedAt: String!
  members: [ProfileOrOrganisation!]! @cost(value: 1)
}

enum ContactDirection {
  In
  Out
}

type ContactPoint {
  name: String!
  directions: [ContactDirection!]!
  values: [String!]!
  timestamps: [String!]!
}

type Contact {
  metadata: [ContactPoint!]!
  lastContactAt: String!
  contactAddress: String!
  contactAddress_Profile: Profile @cost(value: 1)
}

union AggregatePayload = CrcBalances | Erc20Balances | Contacts | Memberships | Members

type ProfileAggregate {
  type: String!
  safe_address: String!
  safe_address_profile: Profile @cost(value: 1)
  payload: AggregatePayload! @cost(value: 1)
}

type ProfileEvent {
  timestamp: String!
  block_number: Int
  transaction_index: Int
  transaction_hash: String
  type: String!
  safe_address: String!
  safe_address_profile: Profile @cost(value: 1)
  contact_address: String
  contact_address_profile: Profile @cost(value: 1)
  direction: String!
  value: String
  payload: EventPayload
  tags: [Tag!]
}

type PublicEvent {
  timestamp: String!
  block_number: Int
  transaction_index: Int
  transaction_hash: String
  type: String!
  contact_address: String
  contact_address_profile: Profile @cost(value: 1)
  payload: EventPayload
}

type NotificationEvent {
  type: String!
  from: String!
  to: String!
  itemId: Int
  transaction_hash: String
}

type CreatedInvitation {
  createdBy: Profile
  createdByProfileId: Int!
  createdAt: String!

  claimedBy: Profile
  claimedByProfileId: Int
  claimedAt: String

  name: String!
  address: String!
  balance: String!
  code: String!
}

type ClaimedInvitation {
  createdBy: Profile
  createdByProfileId: Int!
  createdAt: String!

  claimedBy: Profile
  claimedByProfileId: Int!
  claimedAt: String!
}

type ClaimInvitationResult {
  success: Boolean!
  claimedInvitation: ClaimedInvitation
}

type RedeemClaimedInvitationResult {
  success: Boolean!
  error: String
  transactionHash: String
}

type CreatedInviteEoa {
  for: String!
  address: String!
  fee: String!
}

type CreateInvitationResult {
  success: Boolean!
  error: String
  createdInviteEoas: [CreatedInvitation!]!
}

type SendMessageResult {
  success: Boolean!
  error: String
  event: ProfileEvent
}

enum TrustDirection {
  IN
  OUT
  MUTUAL
}

type TrustRelation {
  safeAddress: String!
  safeAddressProfile: Profile
  otherSafeAddress: String!
  otherSafeAddressProfile: Profile
  direction: TrustDirection!
}

type CommonTrust {
  type: String!
  safeAddress1: String!
  safeAddress2: String!
  profile: Profile
}

type AssetBalance {
  token_symbol: String
  token_address: String!
  token_owner_address: String!
  token_owner_profile: Profile
  token_balance: String!
}

type TagTransactionResult {
  success: Boolean!
  error: String
  tag: Tag
}

type CreateOrganisationResult {
  success: Boolean!
  error: String
  organisation: Organisation
}

input UpsertOrganisationInput {
  id: Int
  name: String!
  description: String
  circlesAddress: String
  avatarUrl: String
  largeBannerUrl: String
  smallBannerUrl: String
  avatarMimeType: String
  displayCurrency: DisplayCurrency
  location: String
  locationName: String
  lat: Float
  lon: Float
}

type AddMemberResult {
  success: Boolean!
  error: String
}

type AcceptMembershipResult {
  success: Boolean!
  error: String
}

type RejectMembershipResult {
  success: Boolean!
  error: String
}

type RemoveMemberResult {
  success: Boolean!
  error: String
}

type VerifySafeResult {
  success: Boolean!
}

type Verification {
  createdAt: String!

  verifierSafeAddress: String!
  verifierProfile: Organisation

  verifiedSafeAddress: String!
  verifiedProfile: Profile

  revokedAt: String
  revokedProfile: Profile

  verificationRewardTransactionHash: String!
  verificationRewardTransaction: ProfileEvent
}

type i18n {
  lang: String
  key: String
  createdBy: String
  version: Int
  value: String
  pagination_key: String
  needsUpdate: Boolean
}

type Businesses {
  id: Int!
  circlesAddress: String!
  name: String
  description: String
  picture: String
  businessHoursMonday: String
  businessHoursTuesday: String
  businessHoursWednesday: String
  businessHoursThursday: String
  businessHoursFriday: String
  businessHoursSaturday: String
  businessHoursSunday: String
  phoneNumber: String
  location: String
  locationName: String
  lat: Float
  lon: Float
  businessCategory: String
  businessCategoryId: Int
}

enum SortOrder {
  ASC
  DESC
}

input PaginationArgs {
  continueAt: String
  continueAtId: Int
  order: SortOrder!
  limit: Int!
}

enum Direction {
  in
  out
}

input ProfileEventFilter {
  direction: Direction
  from: String
  to: String
  with: String
  transactionHash: String
}

input ContactAggregateFilter {
  addresses: [String!]!
}
input CrcBalanceAggregateFilter {
  tokenAddresses: [String!]!
}

input ProfileAggregateFilter {
  contacts: ContactAggregateFilter
  crcBalance: CrcBalanceAggregateFilter
}

enum AccountType {
  Person
  Organisation
}

type SafeInfo {
  type: AccountType!
  safeAddress: String!
  lastUbiAt: String
  tokenAddress: String
  randomValue: String
  safeProfile: Profile
}

type SafeAddressByOwnerResult {
  type: String!
  safeAddress: String!
}

input VerifiedSafesFilter {
  addresses: [String!]
}

type LeaderboardEntry {
  createdByCirclesAddress: String!
  createdByProfile: Profile
  inviteCount: Int!
}

type FibonacciGoals {
  lastGoal: Int!
  currentValue: Int!
  nextGoal: Int!
}

type MyInviteRank {
  rank: Int!
  redeemedInvitationsCount: Int!
}

type Stats {
  profilesCount: Int!
  verificationsCount: Int!
  leaderboard: [LeaderboardEntry!]!
  goals: FibonacciGoals!
  myRank: MyInviteRank!
}

type TransitiveTransfer {
  isHubTransfer: Boolean
  from: String!
  to: String!
  token: String
  tokenOwner: String!
  value: String!
}

type TransitivePath {
  requestedAmount: String!
  flow: String!
  success: Boolean!
  transfers: [TransitiveTransfer!]!
}

type ProofUniquenessResult {
  existingSafe: String
}

type Mutation {
  logout: LogoutResponse!
  upsertProfile(data: UpsertProfileInput!): Profile!
  requestUpdateSafe(data: RequestUpdateSafeInput!): RequestUpdateSafeResponse!
  updateSafe(data: UpdateSafeInput!): UpdateSafeResponse!
  upsertTag(data: UpsertTagInput!): Tag!

  upsertOrganisation(organisation: UpsertOrganisationInput!): CreateOrganisationResult!
  upsertRegion(organisation: UpsertOrganisationInput!): CreateOrganisationResult!

  addMember(groupId: String!, memberAddress: String!): AddMemberResult
  acceptMembership(membershipId: Int!): AcceptMembershipResult
  removeMember(groupId: String!, memberAddress: String!): RemoveMemberResult
  rejectMembership(membershipId: Int!): RejectMembershipResult

  acknowledge(until: Date!, safeAddress: String): Boolean!

  # Creates as many new EOAs as there are strings in the array.
  # createInvitations(for: [String!]!): CreateInvitationResult!
  createTestInvitation: CreateInvitationResult!

  claimInvitation(code: String!): ClaimInvitationResult!
  redeemClaimedInvitation: RedeemClaimedInvitationResult!

  tagTransaction(transactionHash: String!, tag: CreateTagInput!): TagTransactionResult!
  sendMessage(fromSafeAddress: String, toSafeAddress: String!, content: String!): SendMessageResult!

  requestSessionChallenge(address: String!): String!
  verifySessionChallenge(challenge: String!, signature: String!): ExchangeTokenResponse

  importOrganisationsOfAccount: [Organisation!]!

  verifySafe(safeAddress: String!): VerifySafeResult!

  revokeSafeVerification(safeAddress: String!): VerifySafeResult!
  proofUniqueness(humanodeToken: String!): ProofUniquenessResult!
  updateValue(lang: String, key: String, createdBy: String, value: String): i18n
  addNewLang(langToCreate: String, langToCopyFrom: String): Int
  createNewStringAndKey(lang: String, key: String, createdBy: String, value: String, version: Int): i18n
  setStringUpdateState(key: String): i18n

  setIsFavorite(circlesAddress: String!, isFavorite: Boolean!): Boolean!
  shareLink(targetType: LinkTargetType!, targetKey: String!): String!
}

enum LinkTargetType {
  Business
  Person
}

type ExportProfile {
  lastChange: Date!
  circlesAddress: String!
  displayName: String!
  avatarUrl: String
}

type ExportTrustRelation {
  lastChange: Date!
  trusterAddress: String!
  trusteeAddress: String!
  trustLimit: Int!
}

type RandomAccount {
  privateKey: String
  address: String
}

type Query {
  version: Version!
  sessionInfo: SessionInfo!
  init: SessionInfo!

  # Tries to find a claimed invitation for the logged-on user.
  # A user can claim and redeem only one invitation ever.
  claimedInvitation: ClaimedInvitation
  invitationTransaction: ProfileEvent
  hubSignupTransaction: ProfileEvent
  safeInfo(safeAddress: String): SafeInfo
  lastAcknowledgedAt(safeAddress: String!): Date

  verifications(pagination: PaginationArgs, filter: VerifiedSafesFilter): [Verification!]!

  events(
    types: [EventType!]!
    safeAddress: String!
    pagination: PaginationArgs!
    filter: ProfileEventFilter
  ): [ProfileEvent!]!

  aggregates(types: [AggregateType!]!, safeAddress: String!, filter: ProfileAggregateFilter): [ProfileAggregate!]!

  organisations(pagination: PaginationArgs): [Organisation!]!
  regions(pagination: PaginationArgs): [Organisation!]!
  organisationsByAddress(addresses: [String!]!): [Organisation!]!

  # Gets the created (noty invitations of the currently logged on user
  myInvitations: [CreatedInvitation!]!
  commonTrust(safeAddress1: String!, safeAddress2: String!): [CommonTrust!]!
  trustRelations(safeAddress: String!): [TrustRelation!]!
  myProfile: Profile
  profilesById(ids: [Int!]!): [Profile!]!
  recentProfiles(pagination: PaginationArgs): [Profile!]!
  profilesBySafeAddress(safeAddresses: [String!]!): [Profile!]!

  findSafesByOwner(owner: String!): [SafeInfo!]!

  search(query: SearchInput!): [Profile!]!
  stats: Stats!

  tags(query: QueryTagsInput!): [Tag!]!
  tagById(id: Int!): Tag

  findInvitationCreator(code: String!): Profile

  clientAssertionJwt: String!

  getStringByMaxVersion(lang: String, key: String): i18n
  getAvailableLanguages: [i18n]
  getAllStringsByMaxVersion: [i18n]
  getAllStringsByMaxVersionAndLang(lang: String): [i18n]
  getOlderVersionsByKeyAndLang(key: String, lang: String): [i18n]
  getPaginatedStrings(pagination_key: String, key: String, lang: String, value: String): [i18n]
  getPaginatedStringsToUpdate(
    pagination_key: String
    key: String
    lang: String
    value: String
    needsUpdate: Boolean
  ): [i18n]
  getStringsToBeUpdatedAmount(lang: String, key: String): Int

  allProfiles(sinceLastChange: Date): [ExportProfile]!
  allTrusts(sinceLastChange: Date): [ExportTrustRelation!]!

  getRandomAccount: RandomAccount
  signMessage(message: String!, key: String!): String!

  directPath(from: String!, to: String!, amount: String!): TransitivePath!
  paymentPath(from: String!, to: String!, amount: String!): TransitivePath!

  allBusinessCategories: [BusinessCategory!]!
  allBusinesses(queryParams: QueryAllBusinessesParameters): [Businesses!]!
}

input QueryAllBusinessesParameters {
  where: QueryAllBusinessesConditions
  order: QueryAllBusinessesOrder
  ownCoordinates: Geolocation
}

input Geolocation {
  lat: Float!
  lon: Float!
}

input QueryAllBusinessesConditions {
  inCategories: [Int!]
  inCirclesAddress: [String!]
}

enum QueryAllBusinessesOrderOptions {
  Favorites
  Newest
  Oldest
  MostPopular
  Nearest
  Alphabetical
}

input QueryAllBusinessesOrder {
  orderBy: QueryAllBusinessesOrderOptions!
}

type Subscription {
  events: NotificationEvent!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
