type Server {
    version:String!
}

type Profile {
    id: Int!
    circlesAddress:String
    circlesSafeOwner:String
    circlesTokenAddress:String
    firstName:String!
    lastName:String
    dream:String
    country:String
    avatarUrl:String
    avatarCid:String
    avatarMimeType:String
    newsletter:Boolean
}

input QueryUniqueProfileInput
{
    id: Int!
}

input QueryProfileInput
{
    id: Int
    firstName:String
    lastName:String
    country:String
    circlesAddress:[String!]
}
input SearchInput
{
    searchString:String!
}

input UpsertProfileInput
{
    id: Int
    firstName:String!
    lastName:String
    dream: String
    country: String
    emailAddress:String
    circlesAddress:String
    circlesSafeOwner:String
    circlesTokenAddress:String
    avatarUrl:String
    avatarCid:String
    avatarMimeType:String
    newsletter:Boolean
}

input IndexTransferInput {
    blockNo: Int!
    from: String!
    to: String!
    amount: String!
    message: String!
}

type IndexTransferResponse {
    success: Boolean!
    errorMessage: String
}

type ExchangeTokenResponse {
    success: Boolean!
    errorMessage: String
}

type DepositChallengeResponse {
    success: Boolean!
    errorMessage: String
}
input DepositChallenge {
    jwt: String!
}

type LogoutResponse {
    success: Boolean!
    errorMessage: String
}

type SessionInfo {
    isLoggedOn: Boolean!
    hasProfile: Boolean
    profileId: Int
}

type DelegateAuthInit {
    appId: String!
    success: Boolean!
    errorMessage: String
    challengeType: String
    delegateAuthCode: String
    validTo: String
}

type ConsumeDepositedChallengeResponse {
    success: Boolean!
    challenge: String
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}

type Query
{
    whoami: String
    version : Version!
    sessionInfo: SessionInfo!
    profiles(query:QueryProfileInput!) : [Profile!]!
    search(query:SearchInput!) : [Profile!]!
}

input RequestUpdateSafeInput {
    newSafeAddress: String!
}

type RequestUpdateSafeResponse {
    success: Boolean!
    errorMessage: String
    challenge: String
}

input UpdateSafeInput {
    signature: String!
}

type UpdateSafeResponse {
    success: Boolean!
    errorMessage: String
    newSafeAddress: String
}

type Mutation
{
    exchangeToken : ExchangeTokenResponse!
    authenticateAt(appId:String!) : DelegateAuthInit!
    depositChallenge(jwt:String!) : DepositChallengeResponse!
    consumeDepositedChallenge(delegateAuthCode:String!):ConsumeDepositedChallengeResponse!
    logout: LogoutResponse!
    upsertProfile(data:UpsertProfileInput!):Profile!
    requestUpdateSafe(data:RequestUpdateSafeInput!) : RequestUpdateSafeResponse!
    updateSafe(data:UpdateSafeInput!) : UpdateSafeResponse!
    indexTransfer(data:IndexTransferInput!) : IndexTransferResponse!
}