type Server {
    version:String!
}

type Profile {
    id: Int!
    circlesAddress:String
    circlesSafeOwner:String
    circlesTokenAddress:String
    firstName:String!
    lastName:String
    dream:String
    country:String
    avatarUrl:String
    avatarCid:String
    avatarMimeType:String
    newsletter:Boolean
    cityGeonameid:Int
}

input QueryUniqueProfileInput
{
    id: Int!
}

input QueryProfileInput
{
    id:[Int!]
    firstName:String
    lastName:String
    country:String
    circlesAddress:[String!]
}
input SearchInput
{
    searchString:String!
}

input UpsertProfileInput
{
    id: Int
    firstName:String!
    lastName:String
    dream: String
    country: String
    emailAddress:String
    circlesAddress:String
    circlesSafeOwner:String
    circlesTokenAddress:String
    avatarUrl:String
    avatarCid:String
    avatarMimeType:String
    newsletter:Boolean
    cityGeonameid:Int
}

input IndexTransferInput {
    blockNo: Int!
    from: String!
    to: String!
    amount: String!
    message: String!
}

type IndexTransferResponse {
    success: Boolean!
    errorMessage: String
}

type ExchangeTokenResponse {
    success: Boolean!
    errorMessage: String
}

type DepositChallengeResponse {
    success: Boolean!
    errorMessage: String
}
input DepositChallenge {
    jwt: String!
}

type LogoutResponse {
    success: Boolean!
    errorMessage: String
}

type SessionInfo {
    isLoggedOn: Boolean!
    hasProfile: Boolean
    profileId: Int
}

type DelegateAuthInit {
    appId: String!
    success: Boolean!
    errorMessage: String
    challengeType: String
    delegateAuthCode: String
    validTo: String
}

type ConsumeDepositedChallengeResponse {
    success: Boolean!
    challenge: String
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}

input RequestUpdateSafeInput {
    newSafeAddress: String!
}

type RequestUpdateSafeResponse {
    success: Boolean!
    errorMessage: String
    challenge: String
}

input UpdateSafeInput {
    signature: String!
}

type UpdateSafeResponse {
    success: Boolean!
    errorMessage: String
    newSafeAddress: String
}

input QueryCitiesInput {
    name: String!
    languageCode: String
}

type City {
    geonameid: Int!
    name: String!
    country: String!
    population: Int!
    latitude: Float!
    longitude: Float!
    feature_code: String!
    source: String!
}

type Offer {
    id: Int!

    createdBy: Profile!
    createdByProfileId: Int!

    publishedAt: String!
    unlistedAt: String
    purchasedAt: String

    title: String!
    pictureUrl: String!
    price: String!
    description: String
    category: String
    city: City!
    geonameid: Int!

    deliveryTerms: String!
}

input CreateOfferInput
{
    id: Int
    title:String!
    price:String!
    deliveryTerms:String!
    description:String
    category:String
    geonameid: Int!
    pictureUrl: String!
}

input QueryOfferInput {
    id:Int
    createdByProfileId:Int

    title_like:String

    deliveryTerms_in:[String!]

    category_in:[String!]
    category_like:String

    city_like:String
    city_in:[Int!]

    price_lt:String
    price_gt:String

    publishedAt_lt:String
    publishedAt_gt:String

    unlistedAt_lt:String
    unlistedAt_gt:String
}

input LockOfferInput
{
    offerId:Int!
}

type LockOfferResult
{
    success:Boolean!
    lockedUntil:String
}

input PaymentProof
{
    forOfferId:Int!
    tokenOwners:[String!]!
    sources:[String!]!
    destinations:[String!]!
    values:[String!]!
}

type ProvePaymentResult
{
    success:Boolean!
}

enum PurchaseStatus {
    INVALID
    ITEM_LOCKED
    PAYMENT_PROVEN
}

type Purchase {
    id: Int!

    purchasedAt: String!
    status: PurchaseStatus!

    purchasedFrom: Profile!
    purchasedFromProfileId: Int!

    purchasedBy: Profile!
    purchasedByProfileId: Int!

    purchasedItem: Offer!
    purchasedOfferId: Int!
}
input QueryPurchaseInput {
    purchasedByProfileId: String!
}

type Mutation
{
    exchangeToken : ExchangeTokenResponse!
    authenticateAt(appId:String!) : DelegateAuthInit!
    depositChallenge(jwt:String!) : DepositChallengeResponse!
    consumeDepositedChallenge(delegateAuthCode:String!):ConsumeDepositedChallengeResponse!
    logout: LogoutResponse!
    upsertProfile(data:UpsertProfileInput!):Profile!
    requestUpdateSafe(data:RequestUpdateSafeInput!) : RequestUpdateSafeResponse!
    updateSafe(data:UpdateSafeInput!) : UpdateSafeResponse!
    indexTransfer(data:IndexTransferInput!) : IndexTransferResponse!
    createOffer(data:CreateOfferInput!):Offer!
    unlistOffer(offerId:Int!):Boolean!
    lockOffer(data:LockOfferInput!):LockOfferResult!
    provePayment(data:PaymentProof!):ProvePaymentResult!
}

type Query
{
    whoami: String
    version : Version!
    sessionInfo: SessionInfo!
    profiles(query:QueryProfileInput!) : [Profile!]!
    search(query:SearchInput!) : [Profile!]!
    cities(query:QueryCitiesInput!) : [City!]!
}