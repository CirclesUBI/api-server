datasource db {
  provider = "postgresql"
  url      = "REPLACE_ME_WITH_THE_CONNECTION_STRING"
}

generator client {
    provider = "prisma-client-js"
    output   = "./client"
}

model block {
  number                    BigInt        @id @default(autoincrement())
  hash                      String        @unique
  timestamp                 DateTime      @db.Timestamp(6)
  total_transaction_count   Int
  indexed_transaction_count Int
  transaction               transaction[]

  @@unique([timestamp, number], name: "idx_block_timestamp")
}

model crc_hub_transfer {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  from           String
  to             String
  value          String
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@index([from, transaction_id], name: "idx_crc_hub_transfer_from")
  @@index([to, transaction_id], name: "idx_crc_hub_transfer_to")
}

model crc_organisation_signup {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  organisation   String
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@unique([organisation, transaction_id], name: "idx_crc_organisation_signup_organisation")
}

model crc_signup {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  user           String      @unique
  token          String      @unique
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@unique([token, transaction_id, user], name: "idx_crc_signup_token")
  @@unique([user, transaction_id, token], name: "idx_crc_signup_user")
}

model crc_trust {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  address        String
  can_send_to    String
  limit          BigInt
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@index([address, transaction_id], name: "idx_crc_trust_address")
  @@index([can_send_to, transaction_id], name: "idx_crc_trust_can_send_to")
}

model erc20_transfer {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  from           String
  to             String
  token          String
  value          String
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@index([from, transaction_id], name: "idx_erc20_transfer_from")
  @@index([to, transaction_id], name: "idx_erc20_transfer_to")
}

model eth_transfer {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  from           String
  to             String
  value          String
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@index([from, transaction_id], name: "idx_eth_transfer_from")
  @@index([to, transaction_id], name: "idx_eth_transfer_to")
}

model gnosis_safe_eth_transfer {
  id             BigInt      @id @default(autoincrement())
  transaction_id BigInt
  initiator      String
  from           String
  to             String
  value          String
  transaction    transaction @relation(fields: [transaction_id], references: [id])

  @@index([from, transaction_id], name: "idx_gnosis_safe_eth_transfer_from")
  @@index([initiator, transaction_id], name: "idx_gnosis_safe_eth_transfer_initiator")
  @@index([to, transaction_id], name: "idx_gnosis_safe_eth_transfer_to")
}

model transaction {
  id                       BigInt                     @id @default(autoincrement())
  block_number             BigInt
  from                     String
  to                       String?
  index                    Int
  gas                      String
  hash                     String                     @unique
  value                    String
  input                    String?
  nonce                    String?
  type                     String?
  gas_price                String?
  classification           String[]
  block                    block                      @relation(fields: [block_number], references: [number])
  crc_hub_transfer         crc_hub_transfer[]
  crc_organisation_signup  crc_organisation_signup[]
  crc_signup               crc_signup[]
  crc_trust                crc_trust[]
  erc20_transfer           erc20_transfer[]
  eth_transfer             eth_transfer[]
  gnosis_safe_eth_transfer gnosis_safe_eth_transfer[]
}
