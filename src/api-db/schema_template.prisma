datasource db {
    provider = "postgresql"
    url = "REPLACE_ME_WITH_THE_CONNECTION_STRING"
}

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
    output   = "./client"
}

model SurveyData {
    id Int @id @default(autoincrement())
    sesssionId String @unique
    allConsentsGiven Boolean
    villageId Int
    gender String
    dateOfBirth DateTime
    profilesWithSurveyData Profile[] @relation("Profile_SurveyDataSessionId")   
}

model Session {
  id String @id
  sessionToken String @unique
  // Who is identified by the session?
  emailAddress String?
  // Who is identified by the session?
  ethAddress String?
  challengeHash String?
  signature String?

  profile Profile? @relation(name: "Session_Profile", fields: [profileId], references: [id])
  profileId Int?
  @@index([profileId])
  // Which Authoritity issued the JWT that lead to this session?
  issuedBy String
  // The id of the jwt that was exchanged for this session
  jti String?
  // When the session was created.
  createdAt DateTime
  @@index([createdAt])
  validFrom DateTime?
  endedAt DateTime?
  endReason String?
  // This fields specifies the max. session lifetime in seconds.
  maxLifetime Int
}

model Invitation {
    id Int @id @default(autoincrement())

    createdBy Profile @relation(name: "Invitation_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int
    @@index([createdByProfileId])
    createdAt DateTime
    @@index([createdAt])
    fundedAt DateTime?

    name String
    code String
    @@index([code])

    claimedBy Profile? @relation(name: "Invitation_ClaimedBy", fields: [claimedByProfileId], references: [id])
    claimedByProfileId Int?
    claimedAt DateTime?
    @@index([claimedByProfileId, claimedAt])

    redeemedBy Profile? @relation(name: "Invitation_RedeemedBy", fields: [redeemedByProfileId], references: [id])
    redeemedByProfileId Int?
    redeemedAt DateTime?
    redeemTxHash String?
    @@index([redeemedByProfileId, redeemedAt, redeemTxHash])

    forSafeAddress String?

    address String
    key String
}

enum ProfileType {
      PERSON
      ORGANISATION
      REGION
}

enum Gender {
    MALE
    FEMALE
    DIVERS
}

model InvitationFundsEOA {
    id Int @id @default(autoincrement())
    address String
    privateKey String

    profileId Int
    profile Profile @relation(name: "Profile_InvitationFundsEOA", fields: [profileId], references:[id])

    @@index([address])
}

model VerifiedSafe {
    safeAddress String @id

    createdAt DateTime @default(now())
    @@index([createdAt])
    createdBy Profile @relation(name: "VerifiedSafe_CreatedByPerson", fields: [createdByProfileId], references: [id])
    createdByProfileId Int
    @@index([createdByProfileId])

    createdByOrganisation Profile @relation(name: "VerifiedSafe_CreatedByOrganisation", fields: [createdByOrganisationId], references: [id])
    createdByOrganisationId Int
    @@index([createdByOrganisationId])

    revokedAt DateTime?
    revokedByProfileId Int?
    revokedBy Profile? @relation(name: "VerifiedSafe_RevokedByPerson", fields: [revokedByProfileId], references: [id])

    swapEoaAddress String
    swapEoaKey String

    rewardProcessingStartedAt DateTime?
    rewardProcessingWorker String?

    inviteeRewardTransaction Transaction? @relation(name: "VerifiedSafe_InviteeRewardTransaction", fields: [inviteeRewardTransactionHash], references: [transactionHash])
    inviteeRewardTransactionHash String?

    inviterRewardTransaction Transaction? @relation(name: "VerifiedSafe_InviterRewardTransaction", fields: [inviterRewardTransactionHash], references: [transactionHash])
    inviterRewardTransactionHash String?

    swapFundingTransaction Transaction? @relation(name: "VerifiedSafe_SwapFundingTransaction", fields: [swapFundingTransactionHash], references: [transactionHash])
    swapFundingTransactionHash String?

    inviteCount Int @default(0) // Number of created invitations
}

model HumanodeVerifications {
    circlesAddress String @id

    createdAt DateTime @default(now())
    @@index([createdAt])

    sub String @unique
    token String
}

model Jwks {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    kid String
    @@index([kid])

    kty String
    use String
    alg String
    e String
    n String
    d String
    p String
    q String
    dp String
    dq String
    qi String
}

model Profile {
    id Int @id @default(autoincrement())
    lastUpdateAt DateTime @default(now())
    emailAddress String?
    askedForEmailAddress Boolean @default(false)
    emailAddressVerified Boolean?
    verifyEmailChallenge String?
    // @@unique([emailAddress], name:"UX_Profile_EmailAddress")

    createdAt DateTime  @default(now())
    @@index([createdAt])

    status String?
    type ProfileType? @default(PERSON)

    successorOfCirclesAddress String?

    circlesAddress String?
    @@index([circlesAddress])
    circlesSafeOwner String?
    circlesTokenAddress String?
    firstName String
    lastName String?
    avatarUrl String?
    largeBannerUrl String?
    smallBannerUrl String?
    avatarCid String?
    avatarMimeType String?
    dream String?
    country String?
    newsletter Boolean?
    displayTimeCircles Boolean? @default(true)
    cityGeonameid Int?
    confirmedLegalAge Int? // 'confirmedLegalAge' and just 'age' differ in that the 'confirmedLegalAge' must be confirmed by the user on the purchase of items which have a minimum age (e.g. alc.)
    age Int?
    gender Gender?

    lastAcknowledged DateTime?

    verifySafeChallenge String?
    newSafeAddress String?

    shopEnabled Boolean? @default(true)

    sessions Session[]  @relation(name: "Session_Profile")

    tags Tag[]  @relation(name: "Tag_CreatedBy")

    canInvite Boolean? @default(false)

    invitations Invitation[]  @relation(name: "Invitation_CreatedBy")
    invitationFunds InvitationFundsEOA? @relation(name: "Profile_InvitationFundsEOA")

    redeemedInvitations Invitation[]  @relation(name: "Invitation_RedeemedBy")
    claimedInvitations Invitation[]  @relation(name: "Invitation_ClaimedBy")

    members Membership[] @relation(name: "Membership_MemberAt")
    createdMemberships Membership[]  @relation(name: "Membership_CreatedBy")


    inviteTrigger Job? @relation(name: "Profile_InviteTrigger", fields: [inviteTriggerId], references: [id])
    inviteTriggerId Int? @unique

    invoiceNoPrefix String? @default("I-")
    lastInvoiceNo Int? // Is used in organisations only and represents the current value of the invoice number series.
    refundNoPrefix String?
    lastRefundNo Int? // Is used in organisations only and represents the current value of the refund number series.

    currentSimplePickupCodeRound Int?
    lastSimplePickupCode Int? // A value in the range from 1 to 99. Every new purchase will
                              // get the next number assigned. When 99 is reached the number
                              // will wrap around and 'currentSimplePickupCodeRound' will be incremented by 1.

    displayCurrency String @default(value: "EURS")
    safesVerifiedByPerson VerifiedSafe[]  @relation(name: "VerifiedSafe_CreatedByPerson")
    safesVerifiedByOrganisation VerifiedSafe[]  @relation(name: "VerifiedSafe_CreatedByOrganisation")

    safesRevokedByPerson VerifiedSafe[]  @relation(name: "VerifiedSafe_RevokedByPerson")

    location String?
    locationName String?
    lat Float?
    lon Float?
    businessCategoryId Int?
    businessCategory BusinessCategory? @relation(name: "Profile_BusinessCategory", fields: [businessCategoryId], references: [id])
    businessHoursMonday String?
    businessHoursTuesday String?
    businessHoursWednesday String?
    businessHoursThursday String?
    businessHoursFriday String?
    businessHoursSaturday String?
    businessHoursSunday String?
    phoneNumber String?
    surveyDataSession SurveyData? @relation(name: "Profile_SurveyDataSessionId", fields: [surveyDataSessionId], references: [sesssionId]) 
    surveyDataSessionId String? @unique
      
}

model BaliVillage {
    id Int @id @default(autoincrement())
    desa String
    kecamatan String
    kabupaten String
}

model Favorites {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    @@index([createdAt])
    createdByCirclesAddress String
    @@index([createdByCirclesAddress])
    favoriteCirclesAddress String
    @@index([favoriteCirclesAddress])
    comment String?
}

model UnreadEvent {
    id Int @id @default(autoincrement())
    readAt DateTime?
    timestamp DateTime
    transaction_hash String?
    type String
    safe_address String
    contact_address String
    direction String
}

model Link {
    id String @id
    createdAt String
    createdByCirclesAddress String
    linkTargetType String
    linkTargetKeyField String
    linkTargetKey String
}

model BusinessCategory {
    id Int @id @default(autoincrement())
    name String
    profilesWithCategory Profile[] @relation("Profile_BusinessCategory")
}
model ExternalProfiles {
    circlesAddress String @unique
    name String
    avatarUrl String?
}

model Membership {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    @@index([createdAt])

    createdBy Profile @relation(name: "Membership_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int
    @@index([createdByProfileId])

    acceptedAt DateTime? // The point in time when the invitee accepted the membership
    @@index([acceptedAt])
    rejectedAt DateTime? // The point in time when the invitee rejected the membership
    @@index([rejectedAt])

    validTo DateTime?    // Memberships are only valid if this property is null or lies in the future
    isAdmin Boolean?

    memberAddress String
    @@index([memberAddress])

    memberAtId Int
    memberAt Profile @relation(name: "Membership_MemberAt", fields: [memberAtId], references:[id])
    @@index([memberAtId])
}

model TagType {
    id String @id
    tags Tag[] @relation(name: "Tag_TagType")
}

model Transaction {
    transactionHash String @unique @id
    tags Tag[] @relation(name: "Transaction_Tag")

    InviteeReward_VerifiedSafe VerifiedSafe? @relation(name: "VerifiedSafe_InviteeRewardTransaction")
    InviterReward_VerifiedSafe VerifiedSafe? @relation(name: "VerifiedSafe_InviterRewardTransaction")
    SwapFunding_VerifiedSafe VerifiedSafe? @relation(name: "VerifiedSafe_SwapFundingTransaction")
}

model Tag {
    id Int @id @default(autoincrement())

    createdAt DateTime
    @@index([createdAt])
    createdBy Profile @relation(name: "Tag_CreatedBy", fields: [createdByProfileId], references: [id])
    createdByProfileId Int
    @@index([createdByProfileId])

    isPrivate Boolean

    transaction Transaction? @relation(name: "Transaction_Tag", fields: [transactionHash], references: [transactionHash])
    transactionHash String?
    @@index([transactionHash])

    type TagType @relation(name: "Tag_TagType", fields: [typeId], references: [id])
    typeId String
    @@index([typeId])

    value String?
    order Int?
}

model Job {
    id Int @id @default(autoincrement())
    kind String? @default("atMostOnce")
    hash String @unique
    createdAt DateTime @default(now())
    @@index([createdAt])
    timeoutAt DateTime?
    finishedAt DateTime?
    error String?
    warning String?
    info String?
    topic String
    payload String

    inviteTriggerOfProfile Profile? @relation("Profile_InviteTrigger")
}

model i18nReleases {
    releaseVersion Int
    lang String
    @@unique([releaseVersion, lang])
    entries i18n[] @relation("i18nReleases_i18n")
}

model i18n {
    createdAt DateTime @default(now())
    createdBy String
    lang String
    key String
    version Int
    releaseVersion Int?
    value String
    needsUpdate Boolean
    @@unique([lang, key, version])

    release i18nReleases? @relation(name: "i18nReleases_i18n", fields: [releaseVersion, lang], references: [releaseVersion, lang])
}

model Agent {
    id Int @id @default(autoincrement())

    topic String

    ownerSafeAddress String
    agentSafeAddress String?
    privateKey String

    contractAddress String?
    contractAbi String?
    contractMethod String?

    enabled Boolean @default(false)
}

model Businesses {
    id Int @id @default(autoincrement())
    name String
    description String
    picture String
}

model ApiServers {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    instanceId String // A random value created at startup of an api-server instance
}