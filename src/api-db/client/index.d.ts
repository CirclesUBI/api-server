
/**
 * Client
**/

import * as runtime from './runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  emailAddress: string | null
  ethAddress: string | null
  challengeHash: string | null
  signature: string | null
  profileId: number | null
  issuedBy: string
  jti: string | null
  createdAt: Date
  validFrom: Date | null
  endedAt: Date | null
  endReason: string | null
  maxLifetime: number
}

/**
 * Model Invitation
 * 
 */
export type Invitation = {
  id: number
  createdByProfileId: number
  createdAt: Date
  fundedAt: Date | null
  name: string
  code: string
  claimedByProfileId: number | null
  claimedAt: Date | null
  redeemedByProfileId: number | null
  redeemedAt: Date | null
  redeemTxHash: string | null
  forSafeAddress: string | null
  address: string
  key: string
}

/**
 * Model InvitationFundsEOA
 * 
 */
export type InvitationFundsEOA = {
  id: number
  address: string
  privateKey: string
  profileId: number
}

/**
 * Model VerifiedSafe
 * 
 */
export type VerifiedSafe = {
  safeAddress: string
  createdAt: Date
  createdByProfileId: number
  createdByOrganisationId: number
  revokedAt: Date | null
  revokedByProfileId: number | null
  swapEoaAddress: string
  swapEoaKey: string
  rewardProcessingStartedAt: Date | null
  rewardProcessingWorker: string | null
  inviteeRewardTransactionHash: string | null
  inviterRewardTransactionHash: string | null
  swapFundingTransactionHash: string | null
  inviteCount: number
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: number
  lastUpdateAt: Date
  emailAddress: string | null
  askedForEmailAddress: boolean
  emailAddressVerified: boolean | null
  verifyEmailChallenge: string | null
  createdAt: Date
  status: string | null
  type: ProfileType | null
  successorOfCirclesAddress: string | null
  circlesAddress: string | null
  circlesSafeOwner: string | null
  circlesTokenAddress: string | null
  firstName: string
  lastName: string | null
  avatarUrl: string | null
  avatarCid: string | null
  avatarMimeType: string | null
  dream: string | null
  country: string | null
  newsletter: boolean | null
  displayTimeCircles: boolean | null
  cityGeonameid: number | null
  lastAcknowledged: Date | null
  verifySafeChallenge: string | null
  newSafeAddress: string | null
  invoiceNoPrefix: string | null
  lastInvoiceNo: number | null
  refundNoPrefix: string | null
  lastRefundNo: number | null
  displayCurrency: string
}

/**
 * Model ExternalProfiles
 * 
 */
export type ExternalProfiles = {
  circlesAddress: string
  name: string
  avatarUrl: string | null
}

/**
 * Model Membership
 * 
 */
export type Membership = {
  id: number
  createdAt: Date
  createdByProfileId: number
  acceptedAt: Date | null
  rejectedAt: Date | null
  validTo: Date | null
  isAdmin: boolean | null
  memberAddress: string
  memberAtId: number
}

/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = {
  id: number
  createdAt: Date
  openedAt: Date | null
  from: string
  to: string
  text: string
}

/**
 * Model DelegatedChallenges
 * 
 */
export type DelegatedChallenges = {
  id: number
  createdAt: Date
  appId: string
  sessionId: string
  requestValidTo: Date
  delegateAuthCode: string
  challenge: string | null
  challengeDepositedAt: Date | null
  challengeValidTo: Date | null
  challengedReadAt: Date | null
}

/**
 * Model Offer
 * 
 */
export type Offer = {
  id: number
  version: number
  createdByProfileId: number
  createdAt: Date
  title: string
  pictureUrl: string | null
  pictureMimeType: string | null
  description: string | null
  pricePerUnit: string
  timeCirclesPriceShare: number
}

/**
 * Model Purchase
 * 
 */
export type Purchase = {
  id: number
  createdByProfileId: number
  createdAt: Date
}

/**
 * Model PurchaseLine
 * 
 */
export type PurchaseLine = {
  id: number
  purchaseId: number
  amount: number
  productId: number
  productVersion: number
}

/**
 * Model Invoice
 * 
 */
export type Invoice = {
  id: number
  createdAt: Date
  invoiceNo: string
  customerProfileId: number
  sellerProfileId: number
  purchaseId: number
  pendingPaymentTransactionHash: string | null
  paymentTransactionHash: string | null
  pickupCode: string | null
  buyerSignature: boolean | null
  buyerSignedDate: Date | null
  sellerSignature: boolean | null
  sellerSignedDate: Date | null
  cancelledAt: Date | null
  cancelledByProfileId: number | null
  cancelReason: string | null
}

/**
 * Model InvoiceLine
 * 
 */
export type InvoiceLine = {
  id: number
  invoiceId: number
  amount: number
  productId: number
  productVersion: number
}

/**
 * Model TagType
 * 
 */
export type TagType = {
  id: string
}

/**
 * Model Transaction
 * 
 */
export type Transaction = {
  transactionHash: string
}

/**
 * Model Tag
 * 
 */
export type Tag = {
  id: number
  createdAt: Date
  createdByProfileId: number
  isPrivate: boolean
  transactionHash: string | null
  typeId: string
  chatMessageId: number | null
  offerId: number | null
  offerVersion: number | null
  value: string | null
}

/**
 * Model Job
 * 
 */
export type Job = {
  id: number
  kind: string | null
  hash: string
  createdAt: Date
  timeoutAt: Date | null
  finishedAt: Date | null
  error: string | null
  warning: string | null
  info: string | null
  topic: string
  payload: string
}

/**
 * Model i18n
 * 
 */
export type i18n = {
  createdAt: Date
  createdBy: string
  lang: string
  key: string
  version: number
  value: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ProfileType: {
  PERSON: 'PERSON',
  ORGANISATION: 'ORGANISATION',
  REGION: 'REGION'
};

export type ProfileType = (typeof ProfileType)[keyof typeof ProfileType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<GlobalReject>;

  /**
   * `prisma.invitationFundsEOA`: Exposes CRUD operations for the **InvitationFundsEOA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvitationFundsEOAS
    * const invitationFundsEOAS = await prisma.invitationFundsEOA.findMany()
    * ```
    */
  get invitationFundsEOA(): Prisma.InvitationFundsEOADelegate<GlobalReject>;

  /**
   * `prisma.verifiedSafe`: Exposes CRUD operations for the **VerifiedSafe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerifiedSafes
    * const verifiedSafes = await prisma.verifiedSafe.findMany()
    * ```
    */
  get verifiedSafe(): Prisma.VerifiedSafeDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.externalProfiles`: Exposes CRUD operations for the **ExternalProfiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExternalProfiles
    * const externalProfiles = await prisma.externalProfiles.findMany()
    * ```
    */
  get externalProfiles(): Prisma.ExternalProfilesDelegate<GlobalReject>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **Membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.MembershipDelegate<GlobalReject>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<GlobalReject>;

  /**
   * `prisma.delegatedChallenges`: Exposes CRUD operations for the **DelegatedChallenges** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DelegatedChallenges
    * const delegatedChallenges = await prisma.delegatedChallenges.findMany()
    * ```
    */
  get delegatedChallenges(): Prisma.DelegatedChallengesDelegate<GlobalReject>;

  /**
   * `prisma.offer`: Exposes CRUD operations for the **Offer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offers
    * const offers = await prisma.offer.findMany()
    * ```
    */
  get offer(): Prisma.OfferDelegate<GlobalReject>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<GlobalReject>;

  /**
   * `prisma.purchaseLine`: Exposes CRUD operations for the **PurchaseLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseLines
    * const purchaseLines = await prisma.purchaseLine.findMany()
    * ```
    */
  get purchaseLine(): Prisma.PurchaseLineDelegate<GlobalReject>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<GlobalReject>;

  /**
   * `prisma.invoiceLine`: Exposes CRUD operations for the **InvoiceLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceLines
    * const invoiceLines = await prisma.invoiceLine.findMany()
    * ```
    */
  get invoiceLine(): Prisma.InvoiceLineDelegate<GlobalReject>;

  /**
   * `prisma.tagType`: Exposes CRUD operations for the **TagType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TagTypes
    * const tagTypes = await prisma.tagType.findMany()
    * ```
    */
  get tagType(): Prisma.TagTypeDelegate<GlobalReject>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<GlobalReject>;

  /**
   * `prisma.i18n`: Exposes CRUD operations for the **i18n** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more I18ns
    * const i18ns = await prisma.i18n.findMany()
    * ```
    */
  get i18n(): Prisma.i18nDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Session: 'Session',
    Invitation: 'Invitation',
    InvitationFundsEOA: 'InvitationFundsEOA',
    VerifiedSafe: 'VerifiedSafe',
    Profile: 'Profile',
    ExternalProfiles: 'ExternalProfiles',
    Membership: 'Membership',
    ChatMessage: 'ChatMessage',
    DelegatedChallenges: 'DelegatedChallenges',
    Offer: 'Offer',
    Purchase: 'Purchase',
    PurchaseLine: 'PurchaseLine',
    Invoice: 'Invoice',
    InvoiceLine: 'InvoiceLine',
    TagType: 'TagType',
    Transaction: 'Transaction',
    Tag: 'Tag',
    Job: 'Job',
    i18n: 'i18n'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */


  export type ProfileCountOutputType = {
    sessions: number
    tags: number
    offers: number
    purchases: number
    invitations: number
    redeemedInvitations: number
    claimedInvitations: number
    members: number
    createdMemberships: number
    payableInvoices: number
    receivableInvoices: number
    cancelledInvoices: number
    safesVerifiedByPerson: number
    safesVerifiedByOrganisation: number
    safesRevokedByPerson: number
  }

  export type ProfileCountOutputTypeSelect = {
    sessions?: boolean
    tags?: boolean
    offers?: boolean
    purchases?: boolean
    invitations?: boolean
    redeemedInvitations?: boolean
    claimedInvitations?: boolean
    members?: boolean
    createdMemberships?: boolean
    payableInvoices?: boolean
    receivableInvoices?: boolean
    cancelledInvoices?: boolean
    safesVerifiedByPerson?: boolean
    safesVerifiedByOrganisation?: boolean
    safesRevokedByPerson?: boolean
  }

  export type ProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfileCountOutputType
    : S extends undefined
    ? never
    : S extends ProfileCountOutputTypeArgs
    ?'include' extends U
    ? ProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfileCountOutputType ? ProfileCountOutputType[P] : never
  } 
    : ProfileCountOutputType
  : ProfileCountOutputType




  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     * 
    **/
    select?: ProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type ChatMessageCountOutputType
   */


  export type ChatMessageCountOutputType = {
    tags: number
  }

  export type ChatMessageCountOutputTypeSelect = {
    tags?: boolean
  }

  export type ChatMessageCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ChatMessageCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ChatMessageCountOutputType
    : S extends undefined
    ? never
    : S extends ChatMessageCountOutputTypeArgs
    ?'include' extends U
    ? ChatMessageCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ChatMessageCountOutputType ? ChatMessageCountOutputType[P] : never
  } 
    : ChatMessageCountOutputType
  : ChatMessageCountOutputType




  // Custom InputTypes

  /**
   * ChatMessageCountOutputType without action
   */
  export type ChatMessageCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChatMessageCountOutputType
     * 
    **/
    select?: ChatMessageCountOutputTypeSelect | null
  }



  /**
   * Count Type OfferCountOutputType
   */


  export type OfferCountOutputType = {
    purchaseLines: number
    invoiceLines: number
    tags: number
  }

  export type OfferCountOutputTypeSelect = {
    purchaseLines?: boolean
    invoiceLines?: boolean
    tags?: boolean
  }

  export type OfferCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OfferCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OfferCountOutputType
    : S extends undefined
    ? never
    : S extends OfferCountOutputTypeArgs
    ?'include' extends U
    ? OfferCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OfferCountOutputType ? OfferCountOutputType[P] : never
  } 
    : OfferCountOutputType
  : OfferCountOutputType




  // Custom InputTypes

  /**
   * OfferCountOutputType without action
   */
  export type OfferCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OfferCountOutputType
     * 
    **/
    select?: OfferCountOutputTypeSelect | null
  }



  /**
   * Count Type PurchaseCountOutputType
   */


  export type PurchaseCountOutputType = {
    lines: number
    invoices: number
  }

  export type PurchaseCountOutputTypeSelect = {
    lines?: boolean
    invoices?: boolean
  }

  export type PurchaseCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PurchaseCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PurchaseCountOutputType
    : S extends undefined
    ? never
    : S extends PurchaseCountOutputTypeArgs
    ?'include' extends U
    ? PurchaseCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PurchaseCountOutputType ? PurchaseCountOutputType[P] : never
  } 
    : PurchaseCountOutputType
  : PurchaseCountOutputType




  // Custom InputTypes

  /**
   * PurchaseCountOutputType without action
   */
  export type PurchaseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PurchaseCountOutputType
     * 
    **/
    select?: PurchaseCountOutputTypeSelect | null
  }



  /**
   * Count Type InvoiceCountOutputType
   */


  export type InvoiceCountOutputType = {
    lines: number
  }

  export type InvoiceCountOutputTypeSelect = {
    lines?: boolean
  }

  export type InvoiceCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InvoiceCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InvoiceCountOutputType
    : S extends undefined
    ? never
    : S extends InvoiceCountOutputTypeArgs
    ?'include' extends U
    ? InvoiceCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof InvoiceCountOutputType ? InvoiceCountOutputType[P] : never
  } 
    : InvoiceCountOutputType
  : InvoiceCountOutputType




  // Custom InputTypes

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     * 
    **/
    select?: InvoiceCountOutputTypeSelect | null
  }



  /**
   * Count Type TagTypeCountOutputType
   */


  export type TagTypeCountOutputType = {
    tags: number
  }

  export type TagTypeCountOutputTypeSelect = {
    tags?: boolean
  }

  export type TagTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TagTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TagTypeCountOutputType
    : S extends undefined
    ? never
    : S extends TagTypeCountOutputTypeArgs
    ?'include' extends U
    ? TagTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TagTypeCountOutputType ? TagTypeCountOutputType[P] : never
  } 
    : TagTypeCountOutputType
  : TagTypeCountOutputType




  // Custom InputTypes

  /**
   * TagTypeCountOutputType without action
   */
  export type TagTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TagTypeCountOutputType
     * 
    **/
    select?: TagTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type TransactionCountOutputType
   */


  export type TransactionCountOutputType = {
    tags: number
  }

  export type TransactionCountOutputTypeSelect = {
    tags?: boolean
  }

  export type TransactionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TransactionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TransactionCountOutputType
    : S extends undefined
    ? never
    : S extends TransactionCountOutputTypeArgs
    ?'include' extends U
    ? TransactionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TransactionCountOutputType ? TransactionCountOutputType[P] : never
  } 
    : TransactionCountOutputType
  : TransactionCountOutputType




  // Custom InputTypes

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TransactionCountOutputType
     * 
    **/
    select?: TransactionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    profileId: number | null
    maxLifetime: number | null
  }

  export type SessionSumAggregateOutputType = {
    profileId: number | null
    maxLifetime: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    emailAddress: string | null
    ethAddress: string | null
    challengeHash: string | null
    signature: string | null
    profileId: number | null
    issuedBy: string | null
    jti: string | null
    createdAt: Date | null
    validFrom: Date | null
    endedAt: Date | null
    endReason: string | null
    maxLifetime: number | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    emailAddress: string | null
    ethAddress: string | null
    challengeHash: string | null
    signature: string | null
    profileId: number | null
    issuedBy: string | null
    jti: string | null
    createdAt: Date | null
    validFrom: Date | null
    endedAt: Date | null
    endReason: string | null
    maxLifetime: number | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    emailAddress: number
    ethAddress: number
    challengeHash: number
    signature: number
    profileId: number
    issuedBy: number
    jti: number
    createdAt: number
    validFrom: number
    endedAt: number
    endReason: number
    maxLifetime: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    profileId?: true
    maxLifetime?: true
  }

  export type SessionSumAggregateInputType = {
    profileId?: true
    maxLifetime?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    emailAddress?: true
    ethAddress?: true
    challengeHash?: true
    signature?: true
    profileId?: true
    issuedBy?: true
    jti?: true
    createdAt?: true
    validFrom?: true
    endedAt?: true
    endReason?: true
    maxLifetime?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    emailAddress?: true
    ethAddress?: true
    challengeHash?: true
    signature?: true
    profileId?: true
    issuedBy?: true
    jti?: true
    createdAt?: true
    validFrom?: true
    endedAt?: true
    endReason?: true
    maxLifetime?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    emailAddress?: true
    ethAddress?: true
    challengeHash?: true
    signature?: true
    profileId?: true
    issuedBy?: true
    jti?: true
    createdAt?: true
    validFrom?: true
    endedAt?: true
    endReason?: true
    maxLifetime?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    emailAddress: string | null
    ethAddress: string | null
    challengeHash: string | null
    signature: string | null
    profileId: number | null
    issuedBy: string
    jti: string | null
    createdAt: Date
    validFrom: Date | null
    endedAt: Date | null
    endReason: string | null
    maxLifetime: number
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    emailAddress?: boolean
    ethAddress?: boolean
    challengeHash?: boolean
    signature?: boolean
    profile?: boolean | ProfileArgs
    profileId?: boolean
    issuedBy?: boolean
    jti?: boolean
    createdAt?: boolean
    validFrom?: boolean
    endedAt?: boolean
    endReason?: boolean
    maxLifetime?: boolean
  }

  export type SessionInclude = {
    profile?: boolean | ProfileArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> | null :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model Invitation
   */


  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _avg: InvitationAvgAggregateOutputType | null
    _sum: InvitationSumAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationAvgAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    claimedByProfileId: number | null
    redeemedByProfileId: number | null
  }

  export type InvitationSumAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    claimedByProfileId: number | null
    redeemedByProfileId: number | null
  }

  export type InvitationMinAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    createdAt: Date | null
    fundedAt: Date | null
    name: string | null
    code: string | null
    claimedByProfileId: number | null
    claimedAt: Date | null
    redeemedByProfileId: number | null
    redeemedAt: Date | null
    redeemTxHash: string | null
    forSafeAddress: string | null
    address: string | null
    key: string | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    createdAt: Date | null
    fundedAt: Date | null
    name: string | null
    code: string | null
    claimedByProfileId: number | null
    claimedAt: Date | null
    redeemedByProfileId: number | null
    redeemedAt: Date | null
    redeemTxHash: string | null
    forSafeAddress: string | null
    address: string | null
    key: string | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    createdByProfileId: number
    createdAt: number
    fundedAt: number
    name: number
    code: number
    claimedByProfileId: number
    claimedAt: number
    redeemedByProfileId: number
    redeemedAt: number
    redeemTxHash: number
    forSafeAddress: number
    address: number
    key: number
    _all: number
  }


  export type InvitationAvgAggregateInputType = {
    id?: true
    createdByProfileId?: true
    claimedByProfileId?: true
    redeemedByProfileId?: true
  }

  export type InvitationSumAggregateInputType = {
    id?: true
    createdByProfileId?: true
    claimedByProfileId?: true
    redeemedByProfileId?: true
  }

  export type InvitationMinAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
    fundedAt?: true
    name?: true
    code?: true
    claimedByProfileId?: true
    claimedAt?: true
    redeemedByProfileId?: true
    redeemedAt?: true
    redeemTxHash?: true
    forSafeAddress?: true
    address?: true
    key?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
    fundedAt?: true
    name?: true
    code?: true
    claimedByProfileId?: true
    claimedAt?: true
    redeemedByProfileId?: true
    redeemedAt?: true
    redeemTxHash?: true
    forSafeAddress?: true
    address?: true
    key?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
    fundedAt?: true
    name?: true
    code?: true
    claimedByProfileId?: true
    claimedAt?: true
    redeemedByProfileId?: true
    redeemedAt?: true
    redeemTxHash?: true
    forSafeAddress?: true
    address?: true
    key?: true
    _all?: true
  }

  export type InvitationAggregateArgs = {
    /**
     * Filter which Invitation to aggregate.
     * 
    **/
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvitationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvitationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs = {
    where?: InvitationWhereInput
    orderBy?: Enumerable<InvitationOrderByWithAggregationInput>
    by: Array<InvitationScalarFieldEnum>
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _avg?: InvitationAvgAggregateInputType
    _sum?: InvitationSumAggregateInputType
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }


  export type InvitationGroupByOutputType = {
    id: number
    createdByProfileId: number
    createdAt: Date
    fundedAt: Date | null
    name: string
    code: string
    claimedByProfileId: number | null
    claimedAt: Date | null
    redeemedByProfileId: number | null
    redeemedAt: Date | null
    redeemTxHash: string | null
    forSafeAddress: string | null
    address: string
    key: string
    _count: InvitationCountAggregateOutputType | null
    _avg: InvitationAvgAggregateOutputType | null
    _sum: InvitationSumAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect = {
    id?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    createdAt?: boolean
    fundedAt?: boolean
    name?: boolean
    code?: boolean
    claimedBy?: boolean | ProfileArgs
    claimedByProfileId?: boolean
    claimedAt?: boolean
    redeemedBy?: boolean | ProfileArgs
    redeemedByProfileId?: boolean
    redeemedAt?: boolean
    redeemTxHash?: boolean
    forSafeAddress?: boolean
    address?: boolean
    key?: boolean
  }

  export type InvitationInclude = {
    createdBy?: boolean | ProfileArgs
    claimedBy?: boolean | ProfileArgs
    redeemedBy?: boolean | ProfileArgs
  }

  export type InvitationGetPayload<
    S extends boolean | null | undefined | InvitationArgs,
    U = keyof S
      > = S extends true
        ? Invitation
    : S extends undefined
    ? never
    : S extends InvitationArgs | InvitationFindManyArgs
    ?'include' extends U
    ? Invitation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'claimedBy' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'redeemedBy' ? ProfileGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'claimedBy' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'redeemedBy' ? ProfileGetPayload<S['select'][P]> | null :  P extends keyof Invitation ? Invitation[P] : never
  } 
    : Invitation
  : Invitation


  type InvitationCountArgs = Merge<
    Omit<InvitationFindManyArgs, 'select' | 'include'> & {
      select?: InvitationCountAggregateInputType | true
    }
  >

  export interface InvitationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvitationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvitationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invitation'> extends True ? CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>> : CheckSelect<T, Prisma__InvitationClient<Invitation | null >, Prisma__InvitationClient<InvitationGetPayload<T> | null >>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvitationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvitationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invitation'> extends True ? CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>> : CheckSelect<T, Prisma__InvitationClient<Invitation | null >, Prisma__InvitationClient<InvitationGetPayload<T> | null >>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvitationFindManyArgs>(
      args?: SelectSubset<T, InvitationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invitation>>, PrismaPromise<Array<InvitationGetPayload<T>>>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
    **/
    create<T extends InvitationCreateArgs>(
      args: SelectSubset<T, InvitationCreateArgs>
    ): CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>>

    /**
     * Create many Invitations.
     *     @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     *     @example
     *     // Create many Invitations
     *     const invitation = await prisma.invitation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvitationCreateManyArgs>(
      args?: SelectSubset<T, InvitationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
    **/
    delete<T extends InvitationDeleteArgs>(
      args: SelectSubset<T, InvitationDeleteArgs>
    ): CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvitationUpdateArgs>(
      args: SelectSubset<T, InvitationUpdateArgs>
    ): CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvitationDeleteManyArgs>(
      args?: SelectSubset<T, InvitationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvitationUpdateManyArgs>(
      args: SelectSubset<T, InvitationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
    **/
    upsert<T extends InvitationUpsertArgs>(
      args: SelectSubset<T, InvitationUpsertArgs>
    ): CheckSelect<T, Prisma__InvitationClient<Invitation>, Prisma__InvitationClient<InvitationGetPayload<T>>>

    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvitationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    claimedBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    redeemedBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * Throw an Error if a Invitation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invitation to fetch.
     * 
    **/
    where: InvitationWhereUniqueInput
  }


  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * Throw an Error if a Invitation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invitation to fetch.
     * 
    **/
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     * 
    **/
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     * 
    **/
    distinct?: Enumerable<InvitationScalarFieldEnum>
  }


  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * Filter, which Invitations to fetch.
     * 
    **/
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     * 
    **/
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvitationScalarFieldEnum>
  }


  /**
   * Invitation create
   */
  export type InvitationCreateArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * The data needed to create a Invitation.
     * 
    **/
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }


  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs = {
    /**
     * The data used to create many Invitations.
     * 
    **/
    data: Enumerable<InvitationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invitation update
   */
  export type InvitationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * The data needed to update a Invitation.
     * 
    **/
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     * 
    **/
    where: InvitationWhereUniqueInput
  }


  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs = {
    /**
     * The data used to update Invitations.
     * 
    **/
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     * 
    **/
    where?: InvitationWhereInput
  }


  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     * 
    **/
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     * 
    **/
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }


  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
    /**
     * Filter which Invitation to delete.
     * 
    **/
    where: InvitationWhereUniqueInput
  }


  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs = {
    /**
     * Filter which Invitations to delete
     * 
    **/
    where?: InvitationWhereInput
  }


  /**
   * Invitation without action
   */
  export type InvitationArgs = {
    /**
     * Select specific fields to fetch from the Invitation
     * 
    **/
    select?: InvitationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationInclude | null
  }



  /**
   * Model InvitationFundsEOA
   */


  export type AggregateInvitationFundsEOA = {
    _count: InvitationFundsEOACountAggregateOutputType | null
    _avg: InvitationFundsEOAAvgAggregateOutputType | null
    _sum: InvitationFundsEOASumAggregateOutputType | null
    _min: InvitationFundsEOAMinAggregateOutputType | null
    _max: InvitationFundsEOAMaxAggregateOutputType | null
  }

  export type InvitationFundsEOAAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type InvitationFundsEOASumAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type InvitationFundsEOAMinAggregateOutputType = {
    id: number | null
    address: string | null
    privateKey: string | null
    profileId: number | null
  }

  export type InvitationFundsEOAMaxAggregateOutputType = {
    id: number | null
    address: string | null
    privateKey: string | null
    profileId: number | null
  }

  export type InvitationFundsEOACountAggregateOutputType = {
    id: number
    address: number
    privateKey: number
    profileId: number
    _all: number
  }


  export type InvitationFundsEOAAvgAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type InvitationFundsEOASumAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type InvitationFundsEOAMinAggregateInputType = {
    id?: true
    address?: true
    privateKey?: true
    profileId?: true
  }

  export type InvitationFundsEOAMaxAggregateInputType = {
    id?: true
    address?: true
    privateKey?: true
    profileId?: true
  }

  export type InvitationFundsEOACountAggregateInputType = {
    id?: true
    address?: true
    privateKey?: true
    profileId?: true
    _all?: true
  }

  export type InvitationFundsEOAAggregateArgs = {
    /**
     * Filter which InvitationFundsEOA to aggregate.
     * 
    **/
    where?: InvitationFundsEOAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationFundsEOAS to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationFundsEOAOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvitationFundsEOAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationFundsEOAS from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationFundsEOAS.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvitationFundsEOAS
    **/
    _count?: true | InvitationFundsEOACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvitationFundsEOAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvitationFundsEOASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationFundsEOAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationFundsEOAMaxAggregateInputType
  }

  export type GetInvitationFundsEOAAggregateType<T extends InvitationFundsEOAAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitationFundsEOA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitationFundsEOA[P]>
      : GetScalarType<T[P], AggregateInvitationFundsEOA[P]>
  }




  export type InvitationFundsEOAGroupByArgs = {
    where?: InvitationFundsEOAWhereInput
    orderBy?: Enumerable<InvitationFundsEOAOrderByWithAggregationInput>
    by: Array<InvitationFundsEOAScalarFieldEnum>
    having?: InvitationFundsEOAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationFundsEOACountAggregateInputType | true
    _avg?: InvitationFundsEOAAvgAggregateInputType
    _sum?: InvitationFundsEOASumAggregateInputType
    _min?: InvitationFundsEOAMinAggregateInputType
    _max?: InvitationFundsEOAMaxAggregateInputType
  }


  export type InvitationFundsEOAGroupByOutputType = {
    id: number
    address: string
    privateKey: string
    profileId: number
    _count: InvitationFundsEOACountAggregateOutputType | null
    _avg: InvitationFundsEOAAvgAggregateOutputType | null
    _sum: InvitationFundsEOASumAggregateOutputType | null
    _min: InvitationFundsEOAMinAggregateOutputType | null
    _max: InvitationFundsEOAMaxAggregateOutputType | null
  }

  type GetInvitationFundsEOAGroupByPayload<T extends InvitationFundsEOAGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvitationFundsEOAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationFundsEOAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationFundsEOAGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationFundsEOAGroupByOutputType[P]>
        }
      >
    >


  export type InvitationFundsEOASelect = {
    id?: boolean
    address?: boolean
    privateKey?: boolean
    profileId?: boolean
    profile?: boolean | ProfileArgs
  }

  export type InvitationFundsEOAInclude = {
    profile?: boolean | ProfileArgs
  }

  export type InvitationFundsEOAGetPayload<
    S extends boolean | null | undefined | InvitationFundsEOAArgs,
    U = keyof S
      > = S extends true
        ? InvitationFundsEOA
    : S extends undefined
    ? never
    : S extends InvitationFundsEOAArgs | InvitationFundsEOAFindManyArgs
    ?'include' extends U
    ? InvitationFundsEOA  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :  P extends keyof InvitationFundsEOA ? InvitationFundsEOA[P] : never
  } 
    : InvitationFundsEOA
  : InvitationFundsEOA


  type InvitationFundsEOACountArgs = Merge<
    Omit<InvitationFundsEOAFindManyArgs, 'select' | 'include'> & {
      select?: InvitationFundsEOACountAggregateInputType | true
    }
  >

  export interface InvitationFundsEOADelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InvitationFundsEOA that matches the filter.
     * @param {InvitationFundsEOAFindUniqueArgs} args - Arguments to find a InvitationFundsEOA
     * @example
     * // Get one InvitationFundsEOA
     * const invitationFundsEOA = await prisma.invitationFundsEOA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvitationFundsEOAFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvitationFundsEOAFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InvitationFundsEOA'> extends True ? CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>> : CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA | null >, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T> | null >>

    /**
     * Find the first InvitationFundsEOA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOAFindFirstArgs} args - Arguments to find a InvitationFundsEOA
     * @example
     * // Get one InvitationFundsEOA
     * const invitationFundsEOA = await prisma.invitationFundsEOA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvitationFundsEOAFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvitationFundsEOAFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InvitationFundsEOA'> extends True ? CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>> : CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA | null >, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T> | null >>

    /**
     * Find zero or more InvitationFundsEOAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOAFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvitationFundsEOAS
     * const invitationFundsEOAS = await prisma.invitationFundsEOA.findMany()
     * 
     * // Get first 10 InvitationFundsEOAS
     * const invitationFundsEOAS = await prisma.invitationFundsEOA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationFundsEOAWithIdOnly = await prisma.invitationFundsEOA.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvitationFundsEOAFindManyArgs>(
      args?: SelectSubset<T, InvitationFundsEOAFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InvitationFundsEOA>>, PrismaPromise<Array<InvitationFundsEOAGetPayload<T>>>>

    /**
     * Create a InvitationFundsEOA.
     * @param {InvitationFundsEOACreateArgs} args - Arguments to create a InvitationFundsEOA.
     * @example
     * // Create one InvitationFundsEOA
     * const InvitationFundsEOA = await prisma.invitationFundsEOA.create({
     *   data: {
     *     // ... data to create a InvitationFundsEOA
     *   }
     * })
     * 
    **/
    create<T extends InvitationFundsEOACreateArgs>(
      args: SelectSubset<T, InvitationFundsEOACreateArgs>
    ): CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>>

    /**
     * Create many InvitationFundsEOAS.
     *     @param {InvitationFundsEOACreateManyArgs} args - Arguments to create many InvitationFundsEOAS.
     *     @example
     *     // Create many InvitationFundsEOAS
     *     const invitationFundsEOA = await prisma.invitationFundsEOA.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvitationFundsEOACreateManyArgs>(
      args?: SelectSubset<T, InvitationFundsEOACreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InvitationFundsEOA.
     * @param {InvitationFundsEOADeleteArgs} args - Arguments to delete one InvitationFundsEOA.
     * @example
     * // Delete one InvitationFundsEOA
     * const InvitationFundsEOA = await prisma.invitationFundsEOA.delete({
     *   where: {
     *     // ... filter to delete one InvitationFundsEOA
     *   }
     * })
     * 
    **/
    delete<T extends InvitationFundsEOADeleteArgs>(
      args: SelectSubset<T, InvitationFundsEOADeleteArgs>
    ): CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>>

    /**
     * Update one InvitationFundsEOA.
     * @param {InvitationFundsEOAUpdateArgs} args - Arguments to update one InvitationFundsEOA.
     * @example
     * // Update one InvitationFundsEOA
     * const invitationFundsEOA = await prisma.invitationFundsEOA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvitationFundsEOAUpdateArgs>(
      args: SelectSubset<T, InvitationFundsEOAUpdateArgs>
    ): CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>>

    /**
     * Delete zero or more InvitationFundsEOAS.
     * @param {InvitationFundsEOADeleteManyArgs} args - Arguments to filter InvitationFundsEOAS to delete.
     * @example
     * // Delete a few InvitationFundsEOAS
     * const { count } = await prisma.invitationFundsEOA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvitationFundsEOADeleteManyArgs>(
      args?: SelectSubset<T, InvitationFundsEOADeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvitationFundsEOAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvitationFundsEOAS
     * const invitationFundsEOA = await prisma.invitationFundsEOA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvitationFundsEOAUpdateManyArgs>(
      args: SelectSubset<T, InvitationFundsEOAUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InvitationFundsEOA.
     * @param {InvitationFundsEOAUpsertArgs} args - Arguments to update or create a InvitationFundsEOA.
     * @example
     * // Update or create a InvitationFundsEOA
     * const invitationFundsEOA = await prisma.invitationFundsEOA.upsert({
     *   create: {
     *     // ... data to create a InvitationFundsEOA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvitationFundsEOA we want to update
     *   }
     * })
    **/
    upsert<T extends InvitationFundsEOAUpsertArgs>(
      args: SelectSubset<T, InvitationFundsEOAUpsertArgs>
    ): CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA>, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T>>>

    /**
     * Count the number of InvitationFundsEOAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOACountArgs} args - Arguments to filter InvitationFundsEOAS to count.
     * @example
     * // Count the number of InvitationFundsEOAS
     * const count = await prisma.invitationFundsEOA.count({
     *   where: {
     *     // ... the filter for the InvitationFundsEOAS we want to count
     *   }
     * })
    **/
    count<T extends InvitationFundsEOACountArgs>(
      args?: Subset<T, InvitationFundsEOACountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationFundsEOACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvitationFundsEOA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationFundsEOAAggregateArgs>(args: Subset<T, InvitationFundsEOAAggregateArgs>): PrismaPromise<GetInvitationFundsEOAAggregateType<T>>

    /**
     * Group by InvitationFundsEOA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFundsEOAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationFundsEOAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationFundsEOAGroupByArgs['orderBy'] }
        : { orderBy?: InvitationFundsEOAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationFundsEOAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationFundsEOAGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvitationFundsEOA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvitationFundsEOAClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InvitationFundsEOA findUnique
   */
  export type InvitationFundsEOAFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * Throw an Error if a InvitationFundsEOA can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvitationFundsEOA to fetch.
     * 
    **/
    where: InvitationFundsEOAWhereUniqueInput
  }


  /**
   * InvitationFundsEOA findFirst
   */
  export type InvitationFundsEOAFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * Throw an Error if a InvitationFundsEOA can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvitationFundsEOA to fetch.
     * 
    **/
    where?: InvitationFundsEOAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationFundsEOAS to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationFundsEOAOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvitationFundsEOAS.
     * 
    **/
    cursor?: InvitationFundsEOAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationFundsEOAS from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationFundsEOAS.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvitationFundsEOAS.
     * 
    **/
    distinct?: Enumerable<InvitationFundsEOAScalarFieldEnum>
  }


  /**
   * InvitationFundsEOA findMany
   */
  export type InvitationFundsEOAFindManyArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * Filter, which InvitationFundsEOAS to fetch.
     * 
    **/
    where?: InvitationFundsEOAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvitationFundsEOAS to fetch.
     * 
    **/
    orderBy?: Enumerable<InvitationFundsEOAOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvitationFundsEOAS.
     * 
    **/
    cursor?: InvitationFundsEOAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvitationFundsEOAS from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvitationFundsEOAS.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvitationFundsEOAScalarFieldEnum>
  }


  /**
   * InvitationFundsEOA create
   */
  export type InvitationFundsEOACreateArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * The data needed to create a InvitationFundsEOA.
     * 
    **/
    data: XOR<InvitationFundsEOACreateInput, InvitationFundsEOAUncheckedCreateInput>
  }


  /**
   * InvitationFundsEOA createMany
   */
  export type InvitationFundsEOACreateManyArgs = {
    /**
     * The data used to create many InvitationFundsEOAS.
     * 
    **/
    data: Enumerable<InvitationFundsEOACreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InvitationFundsEOA update
   */
  export type InvitationFundsEOAUpdateArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * The data needed to update a InvitationFundsEOA.
     * 
    **/
    data: XOR<InvitationFundsEOAUpdateInput, InvitationFundsEOAUncheckedUpdateInput>
    /**
     * Choose, which InvitationFundsEOA to update.
     * 
    **/
    where: InvitationFundsEOAWhereUniqueInput
  }


  /**
   * InvitationFundsEOA updateMany
   */
  export type InvitationFundsEOAUpdateManyArgs = {
    /**
     * The data used to update InvitationFundsEOAS.
     * 
    **/
    data: XOR<InvitationFundsEOAUpdateManyMutationInput, InvitationFundsEOAUncheckedUpdateManyInput>
    /**
     * Filter which InvitationFundsEOAS to update
     * 
    **/
    where?: InvitationFundsEOAWhereInput
  }


  /**
   * InvitationFundsEOA upsert
   */
  export type InvitationFundsEOAUpsertArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * The filter to search for the InvitationFundsEOA to update in case it exists.
     * 
    **/
    where: InvitationFundsEOAWhereUniqueInput
    /**
     * In case the InvitationFundsEOA found by the `where` argument doesn't exist, create a new InvitationFundsEOA with this data.
     * 
    **/
    create: XOR<InvitationFundsEOACreateInput, InvitationFundsEOAUncheckedCreateInput>
    /**
     * In case the InvitationFundsEOA was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvitationFundsEOAUpdateInput, InvitationFundsEOAUncheckedUpdateInput>
  }


  /**
   * InvitationFundsEOA delete
   */
  export type InvitationFundsEOADeleteArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
    /**
     * Filter which InvitationFundsEOA to delete.
     * 
    **/
    where: InvitationFundsEOAWhereUniqueInput
  }


  /**
   * InvitationFundsEOA deleteMany
   */
  export type InvitationFundsEOADeleteManyArgs = {
    /**
     * Filter which InvitationFundsEOAS to delete
     * 
    **/
    where?: InvitationFundsEOAWhereInput
  }


  /**
   * InvitationFundsEOA without action
   */
  export type InvitationFundsEOAArgs = {
    /**
     * Select specific fields to fetch from the InvitationFundsEOA
     * 
    **/
    select?: InvitationFundsEOASelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvitationFundsEOAInclude | null
  }



  /**
   * Model VerifiedSafe
   */


  export type AggregateVerifiedSafe = {
    _count: VerifiedSafeCountAggregateOutputType | null
    _avg: VerifiedSafeAvgAggregateOutputType | null
    _sum: VerifiedSafeSumAggregateOutputType | null
    _min: VerifiedSafeMinAggregateOutputType | null
    _max: VerifiedSafeMaxAggregateOutputType | null
  }

  export type VerifiedSafeAvgAggregateOutputType = {
    createdByProfileId: number | null
    createdByOrganisationId: number | null
    revokedByProfileId: number | null
    inviteCount: number | null
  }

  export type VerifiedSafeSumAggregateOutputType = {
    createdByProfileId: number | null
    createdByOrganisationId: number | null
    revokedByProfileId: number | null
    inviteCount: number | null
  }

  export type VerifiedSafeMinAggregateOutputType = {
    safeAddress: string | null
    createdAt: Date | null
    createdByProfileId: number | null
    createdByOrganisationId: number | null
    revokedAt: Date | null
    revokedByProfileId: number | null
    swapEoaAddress: string | null
    swapEoaKey: string | null
    rewardProcessingStartedAt: Date | null
    rewardProcessingWorker: string | null
    inviteeRewardTransactionHash: string | null
    inviterRewardTransactionHash: string | null
    swapFundingTransactionHash: string | null
    inviteCount: number | null
  }

  export type VerifiedSafeMaxAggregateOutputType = {
    safeAddress: string | null
    createdAt: Date | null
    createdByProfileId: number | null
    createdByOrganisationId: number | null
    revokedAt: Date | null
    revokedByProfileId: number | null
    swapEoaAddress: string | null
    swapEoaKey: string | null
    rewardProcessingStartedAt: Date | null
    rewardProcessingWorker: string | null
    inviteeRewardTransactionHash: string | null
    inviterRewardTransactionHash: string | null
    swapFundingTransactionHash: string | null
    inviteCount: number | null
  }

  export type VerifiedSafeCountAggregateOutputType = {
    safeAddress: number
    createdAt: number
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt: number
    revokedByProfileId: number
    swapEoaAddress: number
    swapEoaKey: number
    rewardProcessingStartedAt: number
    rewardProcessingWorker: number
    inviteeRewardTransactionHash: number
    inviterRewardTransactionHash: number
    swapFundingTransactionHash: number
    inviteCount: number
    _all: number
  }


  export type VerifiedSafeAvgAggregateInputType = {
    createdByProfileId?: true
    createdByOrganisationId?: true
    revokedByProfileId?: true
    inviteCount?: true
  }

  export type VerifiedSafeSumAggregateInputType = {
    createdByProfileId?: true
    createdByOrganisationId?: true
    revokedByProfileId?: true
    inviteCount?: true
  }

  export type VerifiedSafeMinAggregateInputType = {
    safeAddress?: true
    createdAt?: true
    createdByProfileId?: true
    createdByOrganisationId?: true
    revokedAt?: true
    revokedByProfileId?: true
    swapEoaAddress?: true
    swapEoaKey?: true
    rewardProcessingStartedAt?: true
    rewardProcessingWorker?: true
    inviteeRewardTransactionHash?: true
    inviterRewardTransactionHash?: true
    swapFundingTransactionHash?: true
    inviteCount?: true
  }

  export type VerifiedSafeMaxAggregateInputType = {
    safeAddress?: true
    createdAt?: true
    createdByProfileId?: true
    createdByOrganisationId?: true
    revokedAt?: true
    revokedByProfileId?: true
    swapEoaAddress?: true
    swapEoaKey?: true
    rewardProcessingStartedAt?: true
    rewardProcessingWorker?: true
    inviteeRewardTransactionHash?: true
    inviterRewardTransactionHash?: true
    swapFundingTransactionHash?: true
    inviteCount?: true
  }

  export type VerifiedSafeCountAggregateInputType = {
    safeAddress?: true
    createdAt?: true
    createdByProfileId?: true
    createdByOrganisationId?: true
    revokedAt?: true
    revokedByProfileId?: true
    swapEoaAddress?: true
    swapEoaKey?: true
    rewardProcessingStartedAt?: true
    rewardProcessingWorker?: true
    inviteeRewardTransactionHash?: true
    inviterRewardTransactionHash?: true
    swapFundingTransactionHash?: true
    inviteCount?: true
    _all?: true
  }

  export type VerifiedSafeAggregateArgs = {
    /**
     * Filter which VerifiedSafe to aggregate.
     * 
    **/
    where?: VerifiedSafeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerifiedSafes to fetch.
     * 
    **/
    orderBy?: Enumerable<VerifiedSafeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VerifiedSafeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerifiedSafes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerifiedSafes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerifiedSafes
    **/
    _count?: true | VerifiedSafeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerifiedSafeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerifiedSafeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerifiedSafeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerifiedSafeMaxAggregateInputType
  }

  export type GetVerifiedSafeAggregateType<T extends VerifiedSafeAggregateArgs> = {
        [P in keyof T & keyof AggregateVerifiedSafe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerifiedSafe[P]>
      : GetScalarType<T[P], AggregateVerifiedSafe[P]>
  }




  export type VerifiedSafeGroupByArgs = {
    where?: VerifiedSafeWhereInput
    orderBy?: Enumerable<VerifiedSafeOrderByWithAggregationInput>
    by: Array<VerifiedSafeScalarFieldEnum>
    having?: VerifiedSafeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerifiedSafeCountAggregateInputType | true
    _avg?: VerifiedSafeAvgAggregateInputType
    _sum?: VerifiedSafeSumAggregateInputType
    _min?: VerifiedSafeMinAggregateInputType
    _max?: VerifiedSafeMaxAggregateInputType
  }


  export type VerifiedSafeGroupByOutputType = {
    safeAddress: string
    createdAt: Date
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt: Date | null
    revokedByProfileId: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt: Date | null
    rewardProcessingWorker: string | null
    inviteeRewardTransactionHash: string | null
    inviterRewardTransactionHash: string | null
    swapFundingTransactionHash: string | null
    inviteCount: number
    _count: VerifiedSafeCountAggregateOutputType | null
    _avg: VerifiedSafeAvgAggregateOutputType | null
    _sum: VerifiedSafeSumAggregateOutputType | null
    _min: VerifiedSafeMinAggregateOutputType | null
    _max: VerifiedSafeMaxAggregateOutputType | null
  }

  type GetVerifiedSafeGroupByPayload<T extends VerifiedSafeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VerifiedSafeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerifiedSafeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerifiedSafeGroupByOutputType[P]>
            : GetScalarType<T[P], VerifiedSafeGroupByOutputType[P]>
        }
      >
    >


  export type VerifiedSafeSelect = {
    safeAddress?: boolean
    createdAt?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    createdByOrganisation?: boolean | ProfileArgs
    createdByOrganisationId?: boolean
    revokedAt?: boolean
    revokedByProfileId?: boolean
    revokedBy?: boolean | ProfileArgs
    swapEoaAddress?: boolean
    swapEoaKey?: boolean
    rewardProcessingStartedAt?: boolean
    rewardProcessingWorker?: boolean
    inviteeRewardTransaction?: boolean | TransactionArgs
    inviteeRewardTransactionHash?: boolean
    inviterRewardTransaction?: boolean | TransactionArgs
    inviterRewardTransactionHash?: boolean
    swapFundingTransaction?: boolean | TransactionArgs
    swapFundingTransactionHash?: boolean
    inviteCount?: boolean
  }

  export type VerifiedSafeInclude = {
    createdBy?: boolean | ProfileArgs
    createdByOrganisation?: boolean | ProfileArgs
    revokedBy?: boolean | ProfileArgs
    inviteeRewardTransaction?: boolean | TransactionArgs
    inviterRewardTransaction?: boolean | TransactionArgs
    swapFundingTransaction?: boolean | TransactionArgs
  }

  export type VerifiedSafeGetPayload<
    S extends boolean | null | undefined | VerifiedSafeArgs,
    U = keyof S
      > = S extends true
        ? VerifiedSafe
    : S extends undefined
    ? never
    : S extends VerifiedSafeArgs | VerifiedSafeFindManyArgs
    ?'include' extends U
    ? VerifiedSafe  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'createdByOrganisation' ? ProfileGetPayload<S['include'][P]> :
        P extends 'revokedBy' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'inviteeRewardTransaction' ? TransactionGetPayload<S['include'][P]> | null :
        P extends 'inviterRewardTransaction' ? TransactionGetPayload<S['include'][P]> | null :
        P extends 'swapFundingTransaction' ? TransactionGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'createdByOrganisation' ? ProfileGetPayload<S['select'][P]> :
        P extends 'revokedBy' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'inviteeRewardTransaction' ? TransactionGetPayload<S['select'][P]> | null :
        P extends 'inviterRewardTransaction' ? TransactionGetPayload<S['select'][P]> | null :
        P extends 'swapFundingTransaction' ? TransactionGetPayload<S['select'][P]> | null :  P extends keyof VerifiedSafe ? VerifiedSafe[P] : never
  } 
    : VerifiedSafe
  : VerifiedSafe


  type VerifiedSafeCountArgs = Merge<
    Omit<VerifiedSafeFindManyArgs, 'select' | 'include'> & {
      select?: VerifiedSafeCountAggregateInputType | true
    }
  >

  export interface VerifiedSafeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VerifiedSafe that matches the filter.
     * @param {VerifiedSafeFindUniqueArgs} args - Arguments to find a VerifiedSafe
     * @example
     * // Get one VerifiedSafe
     * const verifiedSafe = await prisma.verifiedSafe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerifiedSafeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerifiedSafeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerifiedSafe'> extends True ? CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>> : CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe | null >, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T> | null >>

    /**
     * Find the first VerifiedSafe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeFindFirstArgs} args - Arguments to find a VerifiedSafe
     * @example
     * // Get one VerifiedSafe
     * const verifiedSafe = await prisma.verifiedSafe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerifiedSafeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerifiedSafeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerifiedSafe'> extends True ? CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>> : CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe | null >, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T> | null >>

    /**
     * Find zero or more VerifiedSafes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerifiedSafes
     * const verifiedSafes = await prisma.verifiedSafe.findMany()
     * 
     * // Get first 10 VerifiedSafes
     * const verifiedSafes = await prisma.verifiedSafe.findMany({ take: 10 })
     * 
     * // Only select the `safeAddress`
     * const verifiedSafeWithSafeAddressOnly = await prisma.verifiedSafe.findMany({ select: { safeAddress: true } })
     * 
    **/
    findMany<T extends VerifiedSafeFindManyArgs>(
      args?: SelectSubset<T, VerifiedSafeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<VerifiedSafe>>, PrismaPromise<Array<VerifiedSafeGetPayload<T>>>>

    /**
     * Create a VerifiedSafe.
     * @param {VerifiedSafeCreateArgs} args - Arguments to create a VerifiedSafe.
     * @example
     * // Create one VerifiedSafe
     * const VerifiedSafe = await prisma.verifiedSafe.create({
     *   data: {
     *     // ... data to create a VerifiedSafe
     *   }
     * })
     * 
    **/
    create<T extends VerifiedSafeCreateArgs>(
      args: SelectSubset<T, VerifiedSafeCreateArgs>
    ): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>>

    /**
     * Create many VerifiedSafes.
     *     @param {VerifiedSafeCreateManyArgs} args - Arguments to create many VerifiedSafes.
     *     @example
     *     // Create many VerifiedSafes
     *     const verifiedSafe = await prisma.verifiedSafe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerifiedSafeCreateManyArgs>(
      args?: SelectSubset<T, VerifiedSafeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VerifiedSafe.
     * @param {VerifiedSafeDeleteArgs} args - Arguments to delete one VerifiedSafe.
     * @example
     * // Delete one VerifiedSafe
     * const VerifiedSafe = await prisma.verifiedSafe.delete({
     *   where: {
     *     // ... filter to delete one VerifiedSafe
     *   }
     * })
     * 
    **/
    delete<T extends VerifiedSafeDeleteArgs>(
      args: SelectSubset<T, VerifiedSafeDeleteArgs>
    ): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>>

    /**
     * Update one VerifiedSafe.
     * @param {VerifiedSafeUpdateArgs} args - Arguments to update one VerifiedSafe.
     * @example
     * // Update one VerifiedSafe
     * const verifiedSafe = await prisma.verifiedSafe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerifiedSafeUpdateArgs>(
      args: SelectSubset<T, VerifiedSafeUpdateArgs>
    ): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>>

    /**
     * Delete zero or more VerifiedSafes.
     * @param {VerifiedSafeDeleteManyArgs} args - Arguments to filter VerifiedSafes to delete.
     * @example
     * // Delete a few VerifiedSafes
     * const { count } = await prisma.verifiedSafe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerifiedSafeDeleteManyArgs>(
      args?: SelectSubset<T, VerifiedSafeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerifiedSafes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerifiedSafes
     * const verifiedSafe = await prisma.verifiedSafe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerifiedSafeUpdateManyArgs>(
      args: SelectSubset<T, VerifiedSafeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VerifiedSafe.
     * @param {VerifiedSafeUpsertArgs} args - Arguments to update or create a VerifiedSafe.
     * @example
     * // Update or create a VerifiedSafe
     * const verifiedSafe = await prisma.verifiedSafe.upsert({
     *   create: {
     *     // ... data to create a VerifiedSafe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerifiedSafe we want to update
     *   }
     * })
    **/
    upsert<T extends VerifiedSafeUpsertArgs>(
      args: SelectSubset<T, VerifiedSafeUpsertArgs>
    ): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe>, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T>>>

    /**
     * Count the number of VerifiedSafes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeCountArgs} args - Arguments to filter VerifiedSafes to count.
     * @example
     * // Count the number of VerifiedSafes
     * const count = await prisma.verifiedSafe.count({
     *   where: {
     *     // ... the filter for the VerifiedSafes we want to count
     *   }
     * })
    **/
    count<T extends VerifiedSafeCountArgs>(
      args?: Subset<T, VerifiedSafeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerifiedSafeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerifiedSafe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerifiedSafeAggregateArgs>(args: Subset<T, VerifiedSafeAggregateArgs>): PrismaPromise<GetVerifiedSafeAggregateType<T>>

    /**
     * Group by VerifiedSafe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerifiedSafeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerifiedSafeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerifiedSafeGroupByArgs['orderBy'] }
        : { orderBy?: VerifiedSafeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerifiedSafeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerifiedSafeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerifiedSafe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerifiedSafeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    createdByOrganisation<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    revokedBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    inviteeRewardTransaction<T extends TransactionArgs = {}>(args?: Subset<T, TransactionArgs>): CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>;

    inviterRewardTransaction<T extends TransactionArgs = {}>(args?: Subset<T, TransactionArgs>): CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>;

    swapFundingTransaction<T extends TransactionArgs = {}>(args?: Subset<T, TransactionArgs>): CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * VerifiedSafe findUnique
   */
  export type VerifiedSafeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * Throw an Error if a VerifiedSafe can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerifiedSafe to fetch.
     * 
    **/
    where: VerifiedSafeWhereUniqueInput
  }


  /**
   * VerifiedSafe findFirst
   */
  export type VerifiedSafeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * Throw an Error if a VerifiedSafe can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerifiedSafe to fetch.
     * 
    **/
    where?: VerifiedSafeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerifiedSafes to fetch.
     * 
    **/
    orderBy?: Enumerable<VerifiedSafeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerifiedSafes.
     * 
    **/
    cursor?: VerifiedSafeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerifiedSafes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerifiedSafes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerifiedSafes.
     * 
    **/
    distinct?: Enumerable<VerifiedSafeScalarFieldEnum>
  }


  /**
   * VerifiedSafe findMany
   */
  export type VerifiedSafeFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * Filter, which VerifiedSafes to fetch.
     * 
    **/
    where?: VerifiedSafeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerifiedSafes to fetch.
     * 
    **/
    orderBy?: Enumerable<VerifiedSafeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerifiedSafes.
     * 
    **/
    cursor?: VerifiedSafeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerifiedSafes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerifiedSafes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerifiedSafeScalarFieldEnum>
  }


  /**
   * VerifiedSafe create
   */
  export type VerifiedSafeCreateArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * The data needed to create a VerifiedSafe.
     * 
    **/
    data: XOR<VerifiedSafeCreateInput, VerifiedSafeUncheckedCreateInput>
  }


  /**
   * VerifiedSafe createMany
   */
  export type VerifiedSafeCreateManyArgs = {
    /**
     * The data used to create many VerifiedSafes.
     * 
    **/
    data: Enumerable<VerifiedSafeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerifiedSafe update
   */
  export type VerifiedSafeUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * The data needed to update a VerifiedSafe.
     * 
    **/
    data: XOR<VerifiedSafeUpdateInput, VerifiedSafeUncheckedUpdateInput>
    /**
     * Choose, which VerifiedSafe to update.
     * 
    **/
    where: VerifiedSafeWhereUniqueInput
  }


  /**
   * VerifiedSafe updateMany
   */
  export type VerifiedSafeUpdateManyArgs = {
    /**
     * The data used to update VerifiedSafes.
     * 
    **/
    data: XOR<VerifiedSafeUpdateManyMutationInput, VerifiedSafeUncheckedUpdateManyInput>
    /**
     * Filter which VerifiedSafes to update
     * 
    **/
    where?: VerifiedSafeWhereInput
  }


  /**
   * VerifiedSafe upsert
   */
  export type VerifiedSafeUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * The filter to search for the VerifiedSafe to update in case it exists.
     * 
    **/
    where: VerifiedSafeWhereUniqueInput
    /**
     * In case the VerifiedSafe found by the `where` argument doesn't exist, create a new VerifiedSafe with this data.
     * 
    **/
    create: XOR<VerifiedSafeCreateInput, VerifiedSafeUncheckedCreateInput>
    /**
     * In case the VerifiedSafe was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VerifiedSafeUpdateInput, VerifiedSafeUncheckedUpdateInput>
  }


  /**
   * VerifiedSafe delete
   */
  export type VerifiedSafeDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
    /**
     * Filter which VerifiedSafe to delete.
     * 
    **/
    where: VerifiedSafeWhereUniqueInput
  }


  /**
   * VerifiedSafe deleteMany
   */
  export type VerifiedSafeDeleteManyArgs = {
    /**
     * Filter which VerifiedSafes to delete
     * 
    **/
    where?: VerifiedSafeWhereInput
  }


  /**
   * VerifiedSafe without action
   */
  export type VerifiedSafeArgs = {
    /**
     * Select specific fields to fetch from the VerifiedSafe
     * 
    **/
    select?: VerifiedSafeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VerifiedSafeInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    cityGeonameid: number | null
    lastInvoiceNo: number | null
    lastRefundNo: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    cityGeonameid: number | null
    lastInvoiceNo: number | null
    lastRefundNo: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    lastUpdateAt: Date | null
    emailAddress: string | null
    askedForEmailAddress: boolean | null
    emailAddressVerified: boolean | null
    verifyEmailChallenge: string | null
    createdAt: Date | null
    status: string | null
    type: ProfileType | null
    successorOfCirclesAddress: string | null
    circlesAddress: string | null
    circlesSafeOwner: string | null
    circlesTokenAddress: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    avatarCid: string | null
    avatarMimeType: string | null
    dream: string | null
    country: string | null
    newsletter: boolean | null
    displayTimeCircles: boolean | null
    cityGeonameid: number | null
    lastAcknowledged: Date | null
    verifySafeChallenge: string | null
    newSafeAddress: string | null
    invoiceNoPrefix: string | null
    lastInvoiceNo: number | null
    refundNoPrefix: string | null
    lastRefundNo: number | null
    displayCurrency: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    lastUpdateAt: Date | null
    emailAddress: string | null
    askedForEmailAddress: boolean | null
    emailAddressVerified: boolean | null
    verifyEmailChallenge: string | null
    createdAt: Date | null
    status: string | null
    type: ProfileType | null
    successorOfCirclesAddress: string | null
    circlesAddress: string | null
    circlesSafeOwner: string | null
    circlesTokenAddress: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    avatarCid: string | null
    avatarMimeType: string | null
    dream: string | null
    country: string | null
    newsletter: boolean | null
    displayTimeCircles: boolean | null
    cityGeonameid: number | null
    lastAcknowledged: Date | null
    verifySafeChallenge: string | null
    newSafeAddress: string | null
    invoiceNoPrefix: string | null
    lastInvoiceNo: number | null
    refundNoPrefix: string | null
    lastRefundNo: number | null
    displayCurrency: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    lastUpdateAt: number
    emailAddress: number
    askedForEmailAddress: number
    emailAddressVerified: number
    verifyEmailChallenge: number
    createdAt: number
    status: number
    type: number
    successorOfCirclesAddress: number
    circlesAddress: number
    circlesSafeOwner: number
    circlesTokenAddress: number
    firstName: number
    lastName: number
    avatarUrl: number
    avatarCid: number
    avatarMimeType: number
    dream: number
    country: number
    newsletter: number
    displayTimeCircles: number
    cityGeonameid: number
    lastAcknowledged: number
    verifySafeChallenge: number
    newSafeAddress: number
    invoiceNoPrefix: number
    lastInvoiceNo: number
    refundNoPrefix: number
    lastRefundNo: number
    displayCurrency: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    cityGeonameid?: true
    lastInvoiceNo?: true
    lastRefundNo?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    cityGeonameid?: true
    lastInvoiceNo?: true
    lastRefundNo?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    lastUpdateAt?: true
    emailAddress?: true
    askedForEmailAddress?: true
    emailAddressVerified?: true
    verifyEmailChallenge?: true
    createdAt?: true
    status?: true
    type?: true
    successorOfCirclesAddress?: true
    circlesAddress?: true
    circlesSafeOwner?: true
    circlesTokenAddress?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    avatarCid?: true
    avatarMimeType?: true
    dream?: true
    country?: true
    newsletter?: true
    displayTimeCircles?: true
    cityGeonameid?: true
    lastAcknowledged?: true
    verifySafeChallenge?: true
    newSafeAddress?: true
    invoiceNoPrefix?: true
    lastInvoiceNo?: true
    refundNoPrefix?: true
    lastRefundNo?: true
    displayCurrency?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    lastUpdateAt?: true
    emailAddress?: true
    askedForEmailAddress?: true
    emailAddressVerified?: true
    verifyEmailChallenge?: true
    createdAt?: true
    status?: true
    type?: true
    successorOfCirclesAddress?: true
    circlesAddress?: true
    circlesSafeOwner?: true
    circlesTokenAddress?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    avatarCid?: true
    avatarMimeType?: true
    dream?: true
    country?: true
    newsletter?: true
    displayTimeCircles?: true
    cityGeonameid?: true
    lastAcknowledged?: true
    verifySafeChallenge?: true
    newSafeAddress?: true
    invoiceNoPrefix?: true
    lastInvoiceNo?: true
    refundNoPrefix?: true
    lastRefundNo?: true
    displayCurrency?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    lastUpdateAt?: true
    emailAddress?: true
    askedForEmailAddress?: true
    emailAddressVerified?: true
    verifyEmailChallenge?: true
    createdAt?: true
    status?: true
    type?: true
    successorOfCirclesAddress?: true
    circlesAddress?: true
    circlesSafeOwner?: true
    circlesTokenAddress?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    avatarCid?: true
    avatarMimeType?: true
    dream?: true
    country?: true
    newsletter?: true
    displayTimeCircles?: true
    cityGeonameid?: true
    lastAcknowledged?: true
    verifySafeChallenge?: true
    newSafeAddress?: true
    invoiceNoPrefix?: true
    lastInvoiceNo?: true
    refundNoPrefix?: true
    lastRefundNo?: true
    displayCurrency?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: number
    lastUpdateAt: Date
    emailAddress: string | null
    askedForEmailAddress: boolean
    emailAddressVerified: boolean | null
    verifyEmailChallenge: string | null
    createdAt: Date
    status: string | null
    type: ProfileType | null
    successorOfCirclesAddress: string | null
    circlesAddress: string | null
    circlesSafeOwner: string | null
    circlesTokenAddress: string | null
    firstName: string
    lastName: string | null
    avatarUrl: string | null
    avatarCid: string | null
    avatarMimeType: string | null
    dream: string | null
    country: string | null
    newsletter: boolean | null
    displayTimeCircles: boolean | null
    cityGeonameid: number | null
    lastAcknowledged: Date | null
    verifySafeChallenge: string | null
    newSafeAddress: string | null
    invoiceNoPrefix: string | null
    lastInvoiceNo: number | null
    refundNoPrefix: string | null
    lastRefundNo: number | null
    displayCurrency: string
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    lastUpdateAt?: boolean
    emailAddress?: boolean
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean
    verifyEmailChallenge?: boolean
    createdAt?: boolean
    status?: boolean
    type?: boolean
    successorOfCirclesAddress?: boolean
    circlesAddress?: boolean
    circlesSafeOwner?: boolean
    circlesTokenAddress?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    avatarCid?: boolean
    avatarMimeType?: boolean
    dream?: boolean
    country?: boolean
    newsletter?: boolean
    displayTimeCircles?: boolean
    cityGeonameid?: boolean
    lastAcknowledged?: boolean
    verifySafeChallenge?: boolean
    newSafeAddress?: boolean
    sessions?: boolean | SessionFindManyArgs
    tags?: boolean | TagFindManyArgs
    offers?: boolean | OfferFindManyArgs
    purchases?: boolean | PurchaseFindManyArgs
    invitations?: boolean | InvitationFindManyArgs
    invitationFunds?: boolean | InvitationFundsEOAArgs
    redeemedInvitations?: boolean | InvitationFindManyArgs
    claimedInvitations?: boolean | InvitationFindManyArgs
    members?: boolean | MembershipFindManyArgs
    createdMemberships?: boolean | MembershipFindManyArgs
    payableInvoices?: boolean | InvoiceFindManyArgs
    receivableInvoices?: boolean | InvoiceFindManyArgs
    cancelledInvoices?: boolean | InvoiceFindManyArgs
    invoiceNoPrefix?: boolean
    lastInvoiceNo?: boolean
    refundNoPrefix?: boolean
    lastRefundNo?: boolean
    displayCurrency?: boolean
    safesVerifiedByPerson?: boolean | VerifiedSafeFindManyArgs
    safesVerifiedByOrganisation?: boolean | VerifiedSafeFindManyArgs
    safesRevokedByPerson?: boolean | VerifiedSafeFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileInclude = {
    sessions?: boolean | SessionFindManyArgs
    tags?: boolean | TagFindManyArgs
    offers?: boolean | OfferFindManyArgs
    purchases?: boolean | PurchaseFindManyArgs
    invitations?: boolean | InvitationFindManyArgs
    invitationFunds?: boolean | InvitationFundsEOAArgs
    redeemedInvitations?: boolean | InvitationFindManyArgs
    claimedInvitations?: boolean | InvitationFindManyArgs
    members?: boolean | MembershipFindManyArgs
    createdMemberships?: boolean | MembershipFindManyArgs
    payableInvoices?: boolean | InvoiceFindManyArgs
    receivableInvoices?: boolean | InvoiceFindManyArgs
    cancelledInvoices?: boolean | InvoiceFindManyArgs
    safesVerifiedByPerson?: boolean | VerifiedSafeFindManyArgs
    safesVerifiedByOrganisation?: boolean | VerifiedSafeFindManyArgs
    safesRevokedByPerson?: boolean | VerifiedSafeFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'tags' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends 'offers' ? Array < OfferGetPayload<S['include'][P]>>  :
        P extends 'purchases' ? Array < PurchaseGetPayload<S['include'][P]>>  :
        P extends 'invitations' ? Array < InvitationGetPayload<S['include'][P]>>  :
        P extends 'invitationFunds' ? InvitationFundsEOAGetPayload<S['include'][P]> | null :
        P extends 'redeemedInvitations' ? Array < InvitationGetPayload<S['include'][P]>>  :
        P extends 'claimedInvitations' ? Array < InvitationGetPayload<S['include'][P]>>  :
        P extends 'members' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends 'createdMemberships' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends 'payableInvoices' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'receivableInvoices' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'cancelledInvoices' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends 'safesVerifiedByPerson' ? Array < VerifiedSafeGetPayload<S['include'][P]>>  :
        P extends 'safesVerifiedByOrganisation' ? Array < VerifiedSafeGetPayload<S['include'][P]>>  :
        P extends 'safesRevokedByPerson' ? Array < VerifiedSafeGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'tags' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends 'offers' ? Array < OfferGetPayload<S['select'][P]>>  :
        P extends 'purchases' ? Array < PurchaseGetPayload<S['select'][P]>>  :
        P extends 'invitations' ? Array < InvitationGetPayload<S['select'][P]>>  :
        P extends 'invitationFunds' ? InvitationFundsEOAGetPayload<S['select'][P]> | null :
        P extends 'redeemedInvitations' ? Array < InvitationGetPayload<S['select'][P]>>  :
        P extends 'claimedInvitations' ? Array < InvitationGetPayload<S['select'][P]>>  :
        P extends 'members' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends 'createdMemberships' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends 'payableInvoices' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'receivableInvoices' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'cancelledInvoices' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends 'safesVerifiedByPerson' ? Array < VerifiedSafeGetPayload<S['select'][P]>>  :
        P extends 'safesVerifiedByOrganisation' ? Array < VerifiedSafeGetPayload<S['select'][P]>>  :
        P extends 'safesRevokedByPerson' ? Array < VerifiedSafeGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    offers<T extends OfferFindManyArgs = {}>(args?: Subset<T, OfferFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Offer>>, PrismaPromise<Array<OfferGetPayload<T>>>>;

    purchases<T extends PurchaseFindManyArgs = {}>(args?: Subset<T, PurchaseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>;

    invitations<T extends InvitationFindManyArgs = {}>(args?: Subset<T, InvitationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invitation>>, PrismaPromise<Array<InvitationGetPayload<T>>>>;

    invitationFunds<T extends InvitationFundsEOAArgs = {}>(args?: Subset<T, InvitationFundsEOAArgs>): CheckSelect<T, Prisma__InvitationFundsEOAClient<InvitationFundsEOA | null >, Prisma__InvitationFundsEOAClient<InvitationFundsEOAGetPayload<T> | null >>;

    redeemedInvitations<T extends InvitationFindManyArgs = {}>(args?: Subset<T, InvitationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invitation>>, PrismaPromise<Array<InvitationGetPayload<T>>>>;

    claimedInvitations<T extends InvitationFindManyArgs = {}>(args?: Subset<T, InvitationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invitation>>, PrismaPromise<Array<InvitationGetPayload<T>>>>;

    members<T extends MembershipFindManyArgs = {}>(args?: Subset<T, MembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>;

    createdMemberships<T extends MembershipFindManyArgs = {}>(args?: Subset<T, MembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>;

    payableInvoices<T extends InvoiceFindManyArgs = {}>(args?: Subset<T, InvoiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>;

    receivableInvoices<T extends InvoiceFindManyArgs = {}>(args?: Subset<T, InvoiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>;

    cancelledInvoices<T extends InvoiceFindManyArgs = {}>(args?: Subset<T, InvoiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>;

    safesVerifiedByPerson<T extends VerifiedSafeFindManyArgs = {}>(args?: Subset<T, VerifiedSafeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<VerifiedSafe>>, PrismaPromise<Array<VerifiedSafeGetPayload<T>>>>;

    safesVerifiedByOrganisation<T extends VerifiedSafeFindManyArgs = {}>(args?: Subset<T, VerifiedSafeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<VerifiedSafe>>, PrismaPromise<Array<VerifiedSafeGetPayload<T>>>>;

    safesRevokedByPerson<T extends VerifiedSafeFindManyArgs = {}>(args?: Subset<T, VerifiedSafeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<VerifiedSafe>>, PrismaPromise<Array<VerifiedSafeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model ExternalProfiles
   */


  export type AggregateExternalProfiles = {
    _count: ExternalProfilesCountAggregateOutputType | null
    _min: ExternalProfilesMinAggregateOutputType | null
    _max: ExternalProfilesMaxAggregateOutputType | null
  }

  export type ExternalProfilesMinAggregateOutputType = {
    circlesAddress: string | null
    name: string | null
    avatarUrl: string | null
  }

  export type ExternalProfilesMaxAggregateOutputType = {
    circlesAddress: string | null
    name: string | null
    avatarUrl: string | null
  }

  export type ExternalProfilesCountAggregateOutputType = {
    circlesAddress: number
    name: number
    avatarUrl: number
    _all: number
  }


  export type ExternalProfilesMinAggregateInputType = {
    circlesAddress?: true
    name?: true
    avatarUrl?: true
  }

  export type ExternalProfilesMaxAggregateInputType = {
    circlesAddress?: true
    name?: true
    avatarUrl?: true
  }

  export type ExternalProfilesCountAggregateInputType = {
    circlesAddress?: true
    name?: true
    avatarUrl?: true
    _all?: true
  }

  export type ExternalProfilesAggregateArgs = {
    /**
     * Filter which ExternalProfiles to aggregate.
     * 
    **/
    where?: ExternalProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ExternalProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExternalProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExternalProfiles
    **/
    _count?: true | ExternalProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExternalProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExternalProfilesMaxAggregateInputType
  }

  export type GetExternalProfilesAggregateType<T extends ExternalProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateExternalProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExternalProfiles[P]>
      : GetScalarType<T[P], AggregateExternalProfiles[P]>
  }




  export type ExternalProfilesGroupByArgs = {
    where?: ExternalProfilesWhereInput
    orderBy?: Enumerable<ExternalProfilesOrderByWithAggregationInput>
    by: Array<ExternalProfilesScalarFieldEnum>
    having?: ExternalProfilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExternalProfilesCountAggregateInputType | true
    _min?: ExternalProfilesMinAggregateInputType
    _max?: ExternalProfilesMaxAggregateInputType
  }


  export type ExternalProfilesGroupByOutputType = {
    circlesAddress: string
    name: string
    avatarUrl: string | null
    _count: ExternalProfilesCountAggregateOutputType | null
    _min: ExternalProfilesMinAggregateOutputType | null
    _max: ExternalProfilesMaxAggregateOutputType | null
  }

  type GetExternalProfilesGroupByPayload<T extends ExternalProfilesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExternalProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExternalProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExternalProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ExternalProfilesGroupByOutputType[P]>
        }
      >
    >


  export type ExternalProfilesSelect = {
    circlesAddress?: boolean
    name?: boolean
    avatarUrl?: boolean
  }

  export type ExternalProfilesGetPayload<
    S extends boolean | null | undefined | ExternalProfilesArgs,
    U = keyof S
      > = S extends true
        ? ExternalProfiles
    : S extends undefined
    ? never
    : S extends ExternalProfilesArgs | ExternalProfilesFindManyArgs
    ?'include' extends U
    ? ExternalProfiles 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ExternalProfiles ? ExternalProfiles[P] : never
  } 
    : ExternalProfiles
  : ExternalProfiles


  type ExternalProfilesCountArgs = Merge<
    Omit<ExternalProfilesFindManyArgs, 'select' | 'include'> & {
      select?: ExternalProfilesCountAggregateInputType | true
    }
  >

  export interface ExternalProfilesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ExternalProfiles that matches the filter.
     * @param {ExternalProfilesFindUniqueArgs} args - Arguments to find a ExternalProfiles
     * @example
     * // Get one ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExternalProfilesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExternalProfilesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ExternalProfiles'> extends True ? CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>> : CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles | null >, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T> | null >>

    /**
     * Find the first ExternalProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesFindFirstArgs} args - Arguments to find a ExternalProfiles
     * @example
     * // Get one ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExternalProfilesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExternalProfilesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ExternalProfiles'> extends True ? CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>> : CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles | null >, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T> | null >>

    /**
     * Find zero or more ExternalProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.findMany()
     * 
     * // Get first 10 ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.findMany({ take: 10 })
     * 
     * // Only select the `circlesAddress`
     * const externalProfilesWithCirclesAddressOnly = await prisma.externalProfiles.findMany({ select: { circlesAddress: true } })
     * 
    **/
    findMany<T extends ExternalProfilesFindManyArgs>(
      args?: SelectSubset<T, ExternalProfilesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ExternalProfiles>>, PrismaPromise<Array<ExternalProfilesGetPayload<T>>>>

    /**
     * Create a ExternalProfiles.
     * @param {ExternalProfilesCreateArgs} args - Arguments to create a ExternalProfiles.
     * @example
     * // Create one ExternalProfiles
     * const ExternalProfiles = await prisma.externalProfiles.create({
     *   data: {
     *     // ... data to create a ExternalProfiles
     *   }
     * })
     * 
    **/
    create<T extends ExternalProfilesCreateArgs>(
      args: SelectSubset<T, ExternalProfilesCreateArgs>
    ): CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>>

    /**
     * Create many ExternalProfiles.
     *     @param {ExternalProfilesCreateManyArgs} args - Arguments to create many ExternalProfiles.
     *     @example
     *     // Create many ExternalProfiles
     *     const externalProfiles = await prisma.externalProfiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExternalProfilesCreateManyArgs>(
      args?: SelectSubset<T, ExternalProfilesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ExternalProfiles.
     * @param {ExternalProfilesDeleteArgs} args - Arguments to delete one ExternalProfiles.
     * @example
     * // Delete one ExternalProfiles
     * const ExternalProfiles = await prisma.externalProfiles.delete({
     *   where: {
     *     // ... filter to delete one ExternalProfiles
     *   }
     * })
     * 
    **/
    delete<T extends ExternalProfilesDeleteArgs>(
      args: SelectSubset<T, ExternalProfilesDeleteArgs>
    ): CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>>

    /**
     * Update one ExternalProfiles.
     * @param {ExternalProfilesUpdateArgs} args - Arguments to update one ExternalProfiles.
     * @example
     * // Update one ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExternalProfilesUpdateArgs>(
      args: SelectSubset<T, ExternalProfilesUpdateArgs>
    ): CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>>

    /**
     * Delete zero or more ExternalProfiles.
     * @param {ExternalProfilesDeleteManyArgs} args - Arguments to filter ExternalProfiles to delete.
     * @example
     * // Delete a few ExternalProfiles
     * const { count } = await prisma.externalProfiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExternalProfilesDeleteManyArgs>(
      args?: SelectSubset<T, ExternalProfilesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExternalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExternalProfilesUpdateManyArgs>(
      args: SelectSubset<T, ExternalProfilesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ExternalProfiles.
     * @param {ExternalProfilesUpsertArgs} args - Arguments to update or create a ExternalProfiles.
     * @example
     * // Update or create a ExternalProfiles
     * const externalProfiles = await prisma.externalProfiles.upsert({
     *   create: {
     *     // ... data to create a ExternalProfiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExternalProfiles we want to update
     *   }
     * })
    **/
    upsert<T extends ExternalProfilesUpsertArgs>(
      args: SelectSubset<T, ExternalProfilesUpsertArgs>
    ): CheckSelect<T, Prisma__ExternalProfilesClient<ExternalProfiles>, Prisma__ExternalProfilesClient<ExternalProfilesGetPayload<T>>>

    /**
     * Count the number of ExternalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesCountArgs} args - Arguments to filter ExternalProfiles to count.
     * @example
     * // Count the number of ExternalProfiles
     * const count = await prisma.externalProfiles.count({
     *   where: {
     *     // ... the filter for the ExternalProfiles we want to count
     *   }
     * })
    **/
    count<T extends ExternalProfilesCountArgs>(
      args?: Subset<T, ExternalProfilesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExternalProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExternalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExternalProfilesAggregateArgs>(args: Subset<T, ExternalProfilesAggregateArgs>): PrismaPromise<GetExternalProfilesAggregateType<T>>

    /**
     * Group by ExternalProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExternalProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExternalProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ExternalProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExternalProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExternalProfilesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExternalProfiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExternalProfilesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ExternalProfiles findUnique
   */
  export type ExternalProfilesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * Throw an Error if a ExternalProfiles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ExternalProfiles to fetch.
     * 
    **/
    where: ExternalProfilesWhereUniqueInput
  }


  /**
   * ExternalProfiles findFirst
   */
  export type ExternalProfilesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * Throw an Error if a ExternalProfiles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ExternalProfiles to fetch.
     * 
    **/
    where?: ExternalProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ExternalProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExternalProfiles.
     * 
    **/
    cursor?: ExternalProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExternalProfiles.
     * 
    **/
    distinct?: Enumerable<ExternalProfilesScalarFieldEnum>
  }


  /**
   * ExternalProfiles findMany
   */
  export type ExternalProfilesFindManyArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * Filter, which ExternalProfiles to fetch.
     * 
    **/
    where?: ExternalProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ExternalProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExternalProfiles.
     * 
    **/
    cursor?: ExternalProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExternalProfilesScalarFieldEnum>
  }


  /**
   * ExternalProfiles create
   */
  export type ExternalProfilesCreateArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * The data needed to create a ExternalProfiles.
     * 
    **/
    data: XOR<ExternalProfilesCreateInput, ExternalProfilesUncheckedCreateInput>
  }


  /**
   * ExternalProfiles createMany
   */
  export type ExternalProfilesCreateManyArgs = {
    /**
     * The data used to create many ExternalProfiles.
     * 
    **/
    data: Enumerable<ExternalProfilesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ExternalProfiles update
   */
  export type ExternalProfilesUpdateArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * The data needed to update a ExternalProfiles.
     * 
    **/
    data: XOR<ExternalProfilesUpdateInput, ExternalProfilesUncheckedUpdateInput>
    /**
     * Choose, which ExternalProfiles to update.
     * 
    **/
    where: ExternalProfilesWhereUniqueInput
  }


  /**
   * ExternalProfiles updateMany
   */
  export type ExternalProfilesUpdateManyArgs = {
    /**
     * The data used to update ExternalProfiles.
     * 
    **/
    data: XOR<ExternalProfilesUpdateManyMutationInput, ExternalProfilesUncheckedUpdateManyInput>
    /**
     * Filter which ExternalProfiles to update
     * 
    **/
    where?: ExternalProfilesWhereInput
  }


  /**
   * ExternalProfiles upsert
   */
  export type ExternalProfilesUpsertArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * The filter to search for the ExternalProfiles to update in case it exists.
     * 
    **/
    where: ExternalProfilesWhereUniqueInput
    /**
     * In case the ExternalProfiles found by the `where` argument doesn't exist, create a new ExternalProfiles with this data.
     * 
    **/
    create: XOR<ExternalProfilesCreateInput, ExternalProfilesUncheckedCreateInput>
    /**
     * In case the ExternalProfiles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExternalProfilesUpdateInput, ExternalProfilesUncheckedUpdateInput>
  }


  /**
   * ExternalProfiles delete
   */
  export type ExternalProfilesDeleteArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
    /**
     * Filter which ExternalProfiles to delete.
     * 
    **/
    where: ExternalProfilesWhereUniqueInput
  }


  /**
   * ExternalProfiles deleteMany
   */
  export type ExternalProfilesDeleteManyArgs = {
    /**
     * Filter which ExternalProfiles to delete
     * 
    **/
    where?: ExternalProfilesWhereInput
  }


  /**
   * ExternalProfiles without action
   */
  export type ExternalProfilesArgs = {
    /**
     * Select specific fields to fetch from the ExternalProfiles
     * 
    **/
    select?: ExternalProfilesSelect | null
  }



  /**
   * Model Membership
   */


  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    memberAtId: number | null
  }

  export type MembershipSumAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    memberAtId: number | null
  }

  export type MembershipMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    createdByProfileId: number | null
    acceptedAt: Date | null
    rejectedAt: Date | null
    validTo: Date | null
    isAdmin: boolean | null
    memberAddress: string | null
    memberAtId: number | null
  }

  export type MembershipMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    createdByProfileId: number | null
    acceptedAt: Date | null
    rejectedAt: Date | null
    validTo: Date | null
    isAdmin: boolean | null
    memberAddress: string | null
    memberAtId: number | null
  }

  export type MembershipCountAggregateOutputType = {
    id: number
    createdAt: number
    createdByProfileId: number
    acceptedAt: number
    rejectedAt: number
    validTo: number
    isAdmin: number
    memberAddress: number
    memberAtId: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    id?: true
    createdByProfileId?: true
    memberAtId?: true
  }

  export type MembershipSumAggregateInputType = {
    id?: true
    createdByProfileId?: true
    memberAtId?: true
  }

  export type MembershipMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    acceptedAt?: true
    rejectedAt?: true
    validTo?: true
    isAdmin?: true
    memberAddress?: true
    memberAtId?: true
  }

  export type MembershipMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    acceptedAt?: true
    rejectedAt?: true
    validTo?: true
    isAdmin?: true
    memberAddress?: true
    memberAtId?: true
  }

  export type MembershipCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    acceptedAt?: true
    rejectedAt?: true
    validTo?: true
    isAdmin?: true
    memberAddress?: true
    memberAtId?: true
    _all?: true
  }

  export type MembershipAggregateArgs = {
    /**
     * Filter which Membership to aggregate.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs = {
    where?: MembershipWhereInput
    orderBy?: Enumerable<MembershipOrderByWithAggregationInput>
    by: Array<MembershipScalarFieldEnum>
    having?: MembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }


  export type MembershipGroupByOutputType = {
    id: number
    createdAt: Date
    createdByProfileId: number
    acceptedAt: Date | null
    rejectedAt: Date | null
    validTo: Date | null
    isAdmin: boolean | null
    memberAddress: string
    memberAtId: number
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type MembershipSelect = {
    id?: boolean
    createdAt?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    acceptedAt?: boolean
    rejectedAt?: boolean
    validTo?: boolean
    isAdmin?: boolean
    memberAddress?: boolean
    memberAtId?: boolean
    memberAt?: boolean | ProfileArgs
  }

  export type MembershipInclude = {
    createdBy?: boolean | ProfileArgs
    memberAt?: boolean | ProfileArgs
  }

  export type MembershipGetPayload<
    S extends boolean | null | undefined | MembershipArgs,
    U = keyof S
      > = S extends true
        ? Membership
    : S extends undefined
    ? never
    : S extends MembershipArgs | MembershipFindManyArgs
    ?'include' extends U
    ? Membership  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'memberAt' ? ProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'memberAt' ? ProfileGetPayload<S['select'][P]> :  P extends keyof Membership ? Membership[P] : never
  } 
    : Membership
  : Membership


  type MembershipCountArgs = Merge<
    Omit<MembershipFindManyArgs, 'select' | 'include'> & {
      select?: MembershipCountAggregateInputType | true
    }
  >

  export interface MembershipDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Membership that matches the filter.
     * @param {MembershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MembershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Membership'> extends True ? CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>> : CheckSelect<T, Prisma__MembershipClient<Membership | null >, Prisma__MembershipClient<MembershipGetPayload<T> | null >>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MembershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Membership'> extends True ? CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>> : CheckSelect<T, Prisma__MembershipClient<Membership | null >, Prisma__MembershipClient<MembershipGetPayload<T> | null >>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membershipWithIdOnly = await prisma.membership.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MembershipFindManyArgs>(
      args?: SelectSubset<T, MembershipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>

    /**
     * Create a Membership.
     * @param {MembershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
    **/
    create<T extends MembershipCreateArgs>(
      args: SelectSubset<T, MembershipCreateArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Create many Memberships.
     *     @param {MembershipCreateManyArgs} args - Arguments to create many Memberships.
     *     @example
     *     // Create many Memberships
     *     const membership = await prisma.membership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembershipCreateManyArgs>(
      args?: SelectSubset<T, MembershipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Membership.
     * @param {MembershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
    **/
    delete<T extends MembershipDeleteArgs>(
      args: SelectSubset<T, MembershipDeleteArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Update one Membership.
     * @param {MembershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembershipUpdateArgs>(
      args: SelectSubset<T, MembershipUpdateArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Delete zero or more Memberships.
     * @param {MembershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembershipDeleteManyArgs>(
      args?: SelectSubset<T, MembershipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembershipUpdateManyArgs>(
      args: SelectSubset<T, MembershipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Membership.
     * @param {MembershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
    **/
    upsert<T extends MembershipUpsertArgs>(
      args: SelectSubset<T, MembershipUpsertArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends MembershipCountArgs>(
      args?: Subset<T, MembershipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MembershipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    memberAt<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Membership findUnique
   */
  export type MembershipFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Throw an Error if a Membership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Membership to fetch.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership findFirst
   */
  export type MembershipFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Throw an Error if a Membership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Membership to fetch.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     * 
    **/
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership findMany
   */
  export type MembershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Filter, which Memberships to fetch.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memberships.
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership create
   */
  export type MembershipCreateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The data needed to create a Membership.
     * 
    **/
    data: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
  }


  /**
   * Membership createMany
   */
  export type MembershipCreateManyArgs = {
    /**
     * The data used to create many Memberships.
     * 
    **/
    data: Enumerable<MembershipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Membership update
   */
  export type MembershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The data needed to update a Membership.
     * 
    **/
    data: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
    /**
     * Choose, which Membership to update.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership updateMany
   */
  export type MembershipUpdateManyArgs = {
    /**
     * The data used to update Memberships.
     * 
    **/
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyInput>
    /**
     * Filter which Memberships to update
     * 
    **/
    where?: MembershipWhereInput
  }


  /**
   * Membership upsert
   */
  export type MembershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The filter to search for the Membership to update in case it exists.
     * 
    **/
    where: MembershipWhereUniqueInput
    /**
     * In case the Membership found by the `where` argument doesn't exist, create a new Membership with this data.
     * 
    **/
    create: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
    /**
     * In case the Membership was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
  }


  /**
   * Membership delete
   */
  export type MembershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Filter which Membership to delete.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership deleteMany
   */
  export type MembershipDeleteManyArgs = {
    /**
     * Filter which Memberships to delete
     * 
    **/
    where?: MembershipWhereInput
  }


  /**
   * Membership without action
   */
  export type MembershipArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
  }



  /**
   * Model ChatMessage
   */


  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    openedAt: Date | null
    from: string | null
    to: string | null
    text: string | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    openedAt: Date | null
    from: string | null
    to: string | null
    text: string | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    createdAt: number
    openedAt: number
    from: number
    to: number
    text: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    createdAt?: true
    openedAt?: true
    from?: true
    to?: true
    text?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    openedAt?: true
    from?: true
    to?: true
    text?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    createdAt?: true
    openedAt?: true
    from?: true
    to?: true
    text?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs = {
    /**
     * Filter which ChatMessage to aggregate.
     * 
    **/
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<ChatMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs = {
    where?: ChatMessageWhereInput
    orderBy?: Enumerable<ChatMessageOrderByWithAggregationInput>
    by: Array<ChatMessageScalarFieldEnum>
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }


  export type ChatMessageGroupByOutputType = {
    id: number
    createdAt: Date
    openedAt: Date | null
    from: string
    to: string
    text: string
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect = {
    id?: boolean
    createdAt?: boolean
    openedAt?: boolean
    from?: boolean
    to?: boolean
    text?: boolean
    tags?: boolean | TagFindManyArgs
    _count?: boolean | ChatMessageCountOutputTypeArgs
  }

  export type ChatMessageInclude = {
    tags?: boolean | TagFindManyArgs
    _count?: boolean | ChatMessageCountOutputTypeArgs
  }

  export type ChatMessageGetPayload<
    S extends boolean | null | undefined | ChatMessageArgs,
    U = keyof S
      > = S extends true
        ? ChatMessage
    : S extends undefined
    ? never
    : S extends ChatMessageArgs | ChatMessageFindManyArgs
    ?'include' extends U
    ? ChatMessage  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tags' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChatMessageCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tags' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChatMessageCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ChatMessage ? ChatMessage[P] : never
  } 
    : ChatMessage
  : ChatMessage


  type ChatMessageCountArgs = Merge<
    Omit<ChatMessageFindManyArgs, 'select' | 'include'> & {
      select?: ChatMessageCountAggregateInputType | true
    }
  >

  export interface ChatMessageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatMessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatMessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChatMessage'> extends True ? CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>> : CheckSelect<T, Prisma__ChatMessageClient<ChatMessage | null >, Prisma__ChatMessageClient<ChatMessageGetPayload<T> | null >>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatMessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatMessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChatMessage'> extends True ? CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>> : CheckSelect<T, Prisma__ChatMessageClient<ChatMessage | null >, Prisma__ChatMessageClient<ChatMessageGetPayload<T> | null >>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatMessageFindManyArgs>(
      args?: SelectSubset<T, ChatMessageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ChatMessage>>, PrismaPromise<Array<ChatMessageGetPayload<T>>>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
    **/
    create<T extends ChatMessageCreateArgs>(
      args: SelectSubset<T, ChatMessageCreateArgs>
    ): CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>>

    /**
     * Create many ChatMessages.
     *     @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     *     @example
     *     // Create many ChatMessages
     *     const chatMessage = await prisma.chatMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatMessageCreateManyArgs>(
      args?: SelectSubset<T, ChatMessageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
    **/
    delete<T extends ChatMessageDeleteArgs>(
      args: SelectSubset<T, ChatMessageDeleteArgs>
    ): CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatMessageUpdateArgs>(
      args: SelectSubset<T, ChatMessageUpdateArgs>
    ): CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatMessageDeleteManyArgs>(
      args?: SelectSubset<T, ChatMessageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatMessageUpdateManyArgs>(
      args: SelectSubset<T, ChatMessageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
    **/
    upsert<T extends ChatMessageUpsertArgs>(
      args: SelectSubset<T, ChatMessageUpsertArgs>
    ): CheckSelect<T, Prisma__ChatMessageClient<ChatMessage>, Prisma__ChatMessageClient<ChatMessageGetPayload<T>>>

    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatMessageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * Throw an Error if a ChatMessage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ChatMessage to fetch.
     * 
    **/
    where: ChatMessageWhereUniqueInput
  }


  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * Throw an Error if a ChatMessage can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ChatMessage to fetch.
     * 
    **/
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<ChatMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     * 
    **/
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     * 
    **/
    distinct?: Enumerable<ChatMessageScalarFieldEnum>
  }


  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * Filter, which ChatMessages to fetch.
     * 
    **/
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     * 
    **/
    orderBy?: Enumerable<ChatMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     * 
    **/
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ChatMessageScalarFieldEnum>
  }


  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * The data needed to create a ChatMessage.
     * 
    **/
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }


  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs = {
    /**
     * The data used to create many ChatMessages.
     * 
    **/
    data: Enumerable<ChatMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * The data needed to update a ChatMessage.
     * 
    **/
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     * 
    **/
    where: ChatMessageWhereUniqueInput
  }


  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs = {
    /**
     * The data used to update ChatMessages.
     * 
    **/
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     * 
    **/
    where?: ChatMessageWhereInput
  }


  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     * 
    **/
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     * 
    **/
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }


  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
    /**
     * Filter which ChatMessage to delete.
     * 
    **/
    where: ChatMessageWhereUniqueInput
  }


  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs = {
    /**
     * Filter which ChatMessages to delete
     * 
    **/
    where?: ChatMessageWhereInput
  }


  /**
   * ChatMessage without action
   */
  export type ChatMessageArgs = {
    /**
     * Select specific fields to fetch from the ChatMessage
     * 
    **/
    select?: ChatMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ChatMessageInclude | null
  }



  /**
   * Model DelegatedChallenges
   */


  export type AggregateDelegatedChallenges = {
    _count: DelegatedChallengesCountAggregateOutputType | null
    _avg: DelegatedChallengesAvgAggregateOutputType | null
    _sum: DelegatedChallengesSumAggregateOutputType | null
    _min: DelegatedChallengesMinAggregateOutputType | null
    _max: DelegatedChallengesMaxAggregateOutputType | null
  }

  export type DelegatedChallengesAvgAggregateOutputType = {
    id: number | null
  }

  export type DelegatedChallengesSumAggregateOutputType = {
    id: number | null
  }

  export type DelegatedChallengesMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    appId: string | null
    sessionId: string | null
    requestValidTo: Date | null
    delegateAuthCode: string | null
    challenge: string | null
    challengeDepositedAt: Date | null
    challengeValidTo: Date | null
    challengedReadAt: Date | null
  }

  export type DelegatedChallengesMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    appId: string | null
    sessionId: string | null
    requestValidTo: Date | null
    delegateAuthCode: string | null
    challenge: string | null
    challengeDepositedAt: Date | null
    challengeValidTo: Date | null
    challengedReadAt: Date | null
  }

  export type DelegatedChallengesCountAggregateOutputType = {
    id: number
    createdAt: number
    appId: number
    sessionId: number
    requestValidTo: number
    delegateAuthCode: number
    challenge: number
    challengeDepositedAt: number
    challengeValidTo: number
    challengedReadAt: number
    _all: number
  }


  export type DelegatedChallengesAvgAggregateInputType = {
    id?: true
  }

  export type DelegatedChallengesSumAggregateInputType = {
    id?: true
  }

  export type DelegatedChallengesMinAggregateInputType = {
    id?: true
    createdAt?: true
    appId?: true
    sessionId?: true
    requestValidTo?: true
    delegateAuthCode?: true
    challenge?: true
    challengeDepositedAt?: true
    challengeValidTo?: true
    challengedReadAt?: true
  }

  export type DelegatedChallengesMaxAggregateInputType = {
    id?: true
    createdAt?: true
    appId?: true
    sessionId?: true
    requestValidTo?: true
    delegateAuthCode?: true
    challenge?: true
    challengeDepositedAt?: true
    challengeValidTo?: true
    challengedReadAt?: true
  }

  export type DelegatedChallengesCountAggregateInputType = {
    id?: true
    createdAt?: true
    appId?: true
    sessionId?: true
    requestValidTo?: true
    delegateAuthCode?: true
    challenge?: true
    challengeDepositedAt?: true
    challengeValidTo?: true
    challengedReadAt?: true
    _all?: true
  }

  export type DelegatedChallengesAggregateArgs = {
    /**
     * Filter which DelegatedChallenges to aggregate.
     * 
    **/
    where?: DelegatedChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DelegatedChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<DelegatedChallengesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DelegatedChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DelegatedChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DelegatedChallenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DelegatedChallenges
    **/
    _count?: true | DelegatedChallengesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DelegatedChallengesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DelegatedChallengesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DelegatedChallengesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DelegatedChallengesMaxAggregateInputType
  }

  export type GetDelegatedChallengesAggregateType<T extends DelegatedChallengesAggregateArgs> = {
        [P in keyof T & keyof AggregateDelegatedChallenges]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDelegatedChallenges[P]>
      : GetScalarType<T[P], AggregateDelegatedChallenges[P]>
  }




  export type DelegatedChallengesGroupByArgs = {
    where?: DelegatedChallengesWhereInput
    orderBy?: Enumerable<DelegatedChallengesOrderByWithAggregationInput>
    by: Array<DelegatedChallengesScalarFieldEnum>
    having?: DelegatedChallengesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DelegatedChallengesCountAggregateInputType | true
    _avg?: DelegatedChallengesAvgAggregateInputType
    _sum?: DelegatedChallengesSumAggregateInputType
    _min?: DelegatedChallengesMinAggregateInputType
    _max?: DelegatedChallengesMaxAggregateInputType
  }


  export type DelegatedChallengesGroupByOutputType = {
    id: number
    createdAt: Date
    appId: string
    sessionId: string
    requestValidTo: Date
    delegateAuthCode: string
    challenge: string | null
    challengeDepositedAt: Date | null
    challengeValidTo: Date | null
    challengedReadAt: Date | null
    _count: DelegatedChallengesCountAggregateOutputType | null
    _avg: DelegatedChallengesAvgAggregateOutputType | null
    _sum: DelegatedChallengesSumAggregateOutputType | null
    _min: DelegatedChallengesMinAggregateOutputType | null
    _max: DelegatedChallengesMaxAggregateOutputType | null
  }

  type GetDelegatedChallengesGroupByPayload<T extends DelegatedChallengesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DelegatedChallengesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DelegatedChallengesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DelegatedChallengesGroupByOutputType[P]>
            : GetScalarType<T[P], DelegatedChallengesGroupByOutputType[P]>
        }
      >
    >


  export type DelegatedChallengesSelect = {
    id?: boolean
    createdAt?: boolean
    appId?: boolean
    sessionId?: boolean
    requestValidTo?: boolean
    delegateAuthCode?: boolean
    challenge?: boolean
    challengeDepositedAt?: boolean
    challengeValidTo?: boolean
    challengedReadAt?: boolean
  }

  export type DelegatedChallengesGetPayload<
    S extends boolean | null | undefined | DelegatedChallengesArgs,
    U = keyof S
      > = S extends true
        ? DelegatedChallenges
    : S extends undefined
    ? never
    : S extends DelegatedChallengesArgs | DelegatedChallengesFindManyArgs
    ?'include' extends U
    ? DelegatedChallenges 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DelegatedChallenges ? DelegatedChallenges[P] : never
  } 
    : DelegatedChallenges
  : DelegatedChallenges


  type DelegatedChallengesCountArgs = Merge<
    Omit<DelegatedChallengesFindManyArgs, 'select' | 'include'> & {
      select?: DelegatedChallengesCountAggregateInputType | true
    }
  >

  export interface DelegatedChallengesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DelegatedChallenges that matches the filter.
     * @param {DelegatedChallengesFindUniqueArgs} args - Arguments to find a DelegatedChallenges
     * @example
     * // Get one DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DelegatedChallengesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DelegatedChallengesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DelegatedChallenges'> extends True ? CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>> : CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges | null >, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T> | null >>

    /**
     * Find the first DelegatedChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesFindFirstArgs} args - Arguments to find a DelegatedChallenges
     * @example
     * // Get one DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DelegatedChallengesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DelegatedChallengesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DelegatedChallenges'> extends True ? CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>> : CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges | null >, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T> | null >>

    /**
     * Find zero or more DelegatedChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.findMany()
     * 
     * // Get first 10 DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const delegatedChallengesWithIdOnly = await prisma.delegatedChallenges.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DelegatedChallengesFindManyArgs>(
      args?: SelectSubset<T, DelegatedChallengesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DelegatedChallenges>>, PrismaPromise<Array<DelegatedChallengesGetPayload<T>>>>

    /**
     * Create a DelegatedChallenges.
     * @param {DelegatedChallengesCreateArgs} args - Arguments to create a DelegatedChallenges.
     * @example
     * // Create one DelegatedChallenges
     * const DelegatedChallenges = await prisma.delegatedChallenges.create({
     *   data: {
     *     // ... data to create a DelegatedChallenges
     *   }
     * })
     * 
    **/
    create<T extends DelegatedChallengesCreateArgs>(
      args: SelectSubset<T, DelegatedChallengesCreateArgs>
    ): CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>>

    /**
     * Create many DelegatedChallenges.
     *     @param {DelegatedChallengesCreateManyArgs} args - Arguments to create many DelegatedChallenges.
     *     @example
     *     // Create many DelegatedChallenges
     *     const delegatedChallenges = await prisma.delegatedChallenges.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DelegatedChallengesCreateManyArgs>(
      args?: SelectSubset<T, DelegatedChallengesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DelegatedChallenges.
     * @param {DelegatedChallengesDeleteArgs} args - Arguments to delete one DelegatedChallenges.
     * @example
     * // Delete one DelegatedChallenges
     * const DelegatedChallenges = await prisma.delegatedChallenges.delete({
     *   where: {
     *     // ... filter to delete one DelegatedChallenges
     *   }
     * })
     * 
    **/
    delete<T extends DelegatedChallengesDeleteArgs>(
      args: SelectSubset<T, DelegatedChallengesDeleteArgs>
    ): CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>>

    /**
     * Update one DelegatedChallenges.
     * @param {DelegatedChallengesUpdateArgs} args - Arguments to update one DelegatedChallenges.
     * @example
     * // Update one DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DelegatedChallengesUpdateArgs>(
      args: SelectSubset<T, DelegatedChallengesUpdateArgs>
    ): CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>>

    /**
     * Delete zero or more DelegatedChallenges.
     * @param {DelegatedChallengesDeleteManyArgs} args - Arguments to filter DelegatedChallenges to delete.
     * @example
     * // Delete a few DelegatedChallenges
     * const { count } = await prisma.delegatedChallenges.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DelegatedChallengesDeleteManyArgs>(
      args?: SelectSubset<T, DelegatedChallengesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DelegatedChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DelegatedChallengesUpdateManyArgs>(
      args: SelectSubset<T, DelegatedChallengesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DelegatedChallenges.
     * @param {DelegatedChallengesUpsertArgs} args - Arguments to update or create a DelegatedChallenges.
     * @example
     * // Update or create a DelegatedChallenges
     * const delegatedChallenges = await prisma.delegatedChallenges.upsert({
     *   create: {
     *     // ... data to create a DelegatedChallenges
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DelegatedChallenges we want to update
     *   }
     * })
    **/
    upsert<T extends DelegatedChallengesUpsertArgs>(
      args: SelectSubset<T, DelegatedChallengesUpsertArgs>
    ): CheckSelect<T, Prisma__DelegatedChallengesClient<DelegatedChallenges>, Prisma__DelegatedChallengesClient<DelegatedChallengesGetPayload<T>>>

    /**
     * Count the number of DelegatedChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesCountArgs} args - Arguments to filter DelegatedChallenges to count.
     * @example
     * // Count the number of DelegatedChallenges
     * const count = await prisma.delegatedChallenges.count({
     *   where: {
     *     // ... the filter for the DelegatedChallenges we want to count
     *   }
     * })
    **/
    count<T extends DelegatedChallengesCountArgs>(
      args?: Subset<T, DelegatedChallengesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DelegatedChallengesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DelegatedChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DelegatedChallengesAggregateArgs>(args: Subset<T, DelegatedChallengesAggregateArgs>): PrismaPromise<GetDelegatedChallengesAggregateType<T>>

    /**
     * Group by DelegatedChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DelegatedChallengesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DelegatedChallengesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DelegatedChallengesGroupByArgs['orderBy'] }
        : { orderBy?: DelegatedChallengesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DelegatedChallengesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDelegatedChallengesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DelegatedChallenges.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DelegatedChallengesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DelegatedChallenges findUnique
   */
  export type DelegatedChallengesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * Throw an Error if a DelegatedChallenges can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DelegatedChallenges to fetch.
     * 
    **/
    where: DelegatedChallengesWhereUniqueInput
  }


  /**
   * DelegatedChallenges findFirst
   */
  export type DelegatedChallengesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * Throw an Error if a DelegatedChallenges can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DelegatedChallenges to fetch.
     * 
    **/
    where?: DelegatedChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DelegatedChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<DelegatedChallengesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DelegatedChallenges.
     * 
    **/
    cursor?: DelegatedChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DelegatedChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DelegatedChallenges.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DelegatedChallenges.
     * 
    **/
    distinct?: Enumerable<DelegatedChallengesScalarFieldEnum>
  }


  /**
   * DelegatedChallenges findMany
   */
  export type DelegatedChallengesFindManyArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * Filter, which DelegatedChallenges to fetch.
     * 
    **/
    where?: DelegatedChallengesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DelegatedChallenges to fetch.
     * 
    **/
    orderBy?: Enumerable<DelegatedChallengesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DelegatedChallenges.
     * 
    **/
    cursor?: DelegatedChallengesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DelegatedChallenges from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DelegatedChallenges.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DelegatedChallengesScalarFieldEnum>
  }


  /**
   * DelegatedChallenges create
   */
  export type DelegatedChallengesCreateArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * The data needed to create a DelegatedChallenges.
     * 
    **/
    data: XOR<DelegatedChallengesCreateInput, DelegatedChallengesUncheckedCreateInput>
  }


  /**
   * DelegatedChallenges createMany
   */
  export type DelegatedChallengesCreateManyArgs = {
    /**
     * The data used to create many DelegatedChallenges.
     * 
    **/
    data: Enumerable<DelegatedChallengesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DelegatedChallenges update
   */
  export type DelegatedChallengesUpdateArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * The data needed to update a DelegatedChallenges.
     * 
    **/
    data: XOR<DelegatedChallengesUpdateInput, DelegatedChallengesUncheckedUpdateInput>
    /**
     * Choose, which DelegatedChallenges to update.
     * 
    **/
    where: DelegatedChallengesWhereUniqueInput
  }


  /**
   * DelegatedChallenges updateMany
   */
  export type DelegatedChallengesUpdateManyArgs = {
    /**
     * The data used to update DelegatedChallenges.
     * 
    **/
    data: XOR<DelegatedChallengesUpdateManyMutationInput, DelegatedChallengesUncheckedUpdateManyInput>
    /**
     * Filter which DelegatedChallenges to update
     * 
    **/
    where?: DelegatedChallengesWhereInput
  }


  /**
   * DelegatedChallenges upsert
   */
  export type DelegatedChallengesUpsertArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * The filter to search for the DelegatedChallenges to update in case it exists.
     * 
    **/
    where: DelegatedChallengesWhereUniqueInput
    /**
     * In case the DelegatedChallenges found by the `where` argument doesn't exist, create a new DelegatedChallenges with this data.
     * 
    **/
    create: XOR<DelegatedChallengesCreateInput, DelegatedChallengesUncheckedCreateInput>
    /**
     * In case the DelegatedChallenges was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DelegatedChallengesUpdateInput, DelegatedChallengesUncheckedUpdateInput>
  }


  /**
   * DelegatedChallenges delete
   */
  export type DelegatedChallengesDeleteArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
    /**
     * Filter which DelegatedChallenges to delete.
     * 
    **/
    where: DelegatedChallengesWhereUniqueInput
  }


  /**
   * DelegatedChallenges deleteMany
   */
  export type DelegatedChallengesDeleteManyArgs = {
    /**
     * Filter which DelegatedChallenges to delete
     * 
    **/
    where?: DelegatedChallengesWhereInput
  }


  /**
   * DelegatedChallenges without action
   */
  export type DelegatedChallengesArgs = {
    /**
     * Select specific fields to fetch from the DelegatedChallenges
     * 
    **/
    select?: DelegatedChallengesSelect | null
  }



  /**
   * Model Offer
   */


  export type AggregateOffer = {
    _count: OfferCountAggregateOutputType | null
    _avg: OfferAvgAggregateOutputType | null
    _sum: OfferSumAggregateOutputType | null
    _min: OfferMinAggregateOutputType | null
    _max: OfferMaxAggregateOutputType | null
  }

  export type OfferAvgAggregateOutputType = {
    id: number | null
    version: number | null
    createdByProfileId: number | null
    timeCirclesPriceShare: number | null
  }

  export type OfferSumAggregateOutputType = {
    id: number | null
    version: number | null
    createdByProfileId: number | null
    timeCirclesPriceShare: number | null
  }

  export type OfferMinAggregateOutputType = {
    id: number | null
    version: number | null
    createdByProfileId: number | null
    createdAt: Date | null
    title: string | null
    pictureUrl: string | null
    pictureMimeType: string | null
    description: string | null
    pricePerUnit: string | null
    timeCirclesPriceShare: number | null
  }

  export type OfferMaxAggregateOutputType = {
    id: number | null
    version: number | null
    createdByProfileId: number | null
    createdAt: Date | null
    title: string | null
    pictureUrl: string | null
    pictureMimeType: string | null
    description: string | null
    pricePerUnit: string | null
    timeCirclesPriceShare: number | null
  }

  export type OfferCountAggregateOutputType = {
    id: number
    version: number
    createdByProfileId: number
    createdAt: number
    title: number
    pictureUrl: number
    pictureMimeType: number
    description: number
    pricePerUnit: number
    timeCirclesPriceShare: number
    _all: number
  }


  export type OfferAvgAggregateInputType = {
    id?: true
    version?: true
    createdByProfileId?: true
    timeCirclesPriceShare?: true
  }

  export type OfferSumAggregateInputType = {
    id?: true
    version?: true
    createdByProfileId?: true
    timeCirclesPriceShare?: true
  }

  export type OfferMinAggregateInputType = {
    id?: true
    version?: true
    createdByProfileId?: true
    createdAt?: true
    title?: true
    pictureUrl?: true
    pictureMimeType?: true
    description?: true
    pricePerUnit?: true
    timeCirclesPriceShare?: true
  }

  export type OfferMaxAggregateInputType = {
    id?: true
    version?: true
    createdByProfileId?: true
    createdAt?: true
    title?: true
    pictureUrl?: true
    pictureMimeType?: true
    description?: true
    pricePerUnit?: true
    timeCirclesPriceShare?: true
  }

  export type OfferCountAggregateInputType = {
    id?: true
    version?: true
    createdByProfileId?: true
    createdAt?: true
    title?: true
    pictureUrl?: true
    pictureMimeType?: true
    description?: true
    pricePerUnit?: true
    timeCirclesPriceShare?: true
    _all?: true
  }

  export type OfferAggregateArgs = {
    /**
     * Filter which Offer to aggregate.
     * 
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     * 
    **/
    orderBy?: Enumerable<OfferOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offers
    **/
    _count?: true | OfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfferMaxAggregateInputType
  }

  export type GetOfferAggregateType<T extends OfferAggregateArgs> = {
        [P in keyof T & keyof AggregateOffer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffer[P]>
      : GetScalarType<T[P], AggregateOffer[P]>
  }




  export type OfferGroupByArgs = {
    where?: OfferWhereInput
    orderBy?: Enumerable<OfferOrderByWithAggregationInput>
    by: Array<OfferScalarFieldEnum>
    having?: OfferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfferCountAggregateInputType | true
    _avg?: OfferAvgAggregateInputType
    _sum?: OfferSumAggregateInputType
    _min?: OfferMinAggregateInputType
    _max?: OfferMaxAggregateInputType
  }


  export type OfferGroupByOutputType = {
    id: number
    version: number
    createdByProfileId: number
    createdAt: Date
    title: string
    pictureUrl: string | null
    pictureMimeType: string | null
    description: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    _count: OfferCountAggregateOutputType | null
    _avg: OfferAvgAggregateOutputType | null
    _sum: OfferSumAggregateOutputType | null
    _min: OfferMinAggregateOutputType | null
    _max: OfferMaxAggregateOutputType | null
  }

  type GetOfferGroupByPayload<T extends OfferGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OfferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfferGroupByOutputType[P]>
            : GetScalarType<T[P], OfferGroupByOutputType[P]>
        }
      >
    >


  export type OfferSelect = {
    id?: boolean
    version?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    createdAt?: boolean
    title?: boolean
    pictureUrl?: boolean
    pictureMimeType?: boolean
    description?: boolean
    pricePerUnit?: boolean
    timeCirclesPriceShare?: boolean
    purchaseLines?: boolean | PurchaseLineFindManyArgs
    invoiceLines?: boolean | InvoiceLineFindManyArgs
    tags?: boolean | TagFindManyArgs
    _count?: boolean | OfferCountOutputTypeArgs
  }

  export type OfferInclude = {
    createdBy?: boolean | ProfileArgs
    purchaseLines?: boolean | PurchaseLineFindManyArgs
    invoiceLines?: boolean | InvoiceLineFindManyArgs
    tags?: boolean | TagFindManyArgs
    _count?: boolean | OfferCountOutputTypeArgs
  }

  export type OfferGetPayload<
    S extends boolean | null | undefined | OfferArgs,
    U = keyof S
      > = S extends true
        ? Offer
    : S extends undefined
    ? never
    : S extends OfferArgs | OfferFindManyArgs
    ?'include' extends U
    ? Offer  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'purchaseLines' ? Array < PurchaseLineGetPayload<S['include'][P]>>  :
        P extends 'invoiceLines' ? Array < InvoiceLineGetPayload<S['include'][P]>>  :
        P extends 'tags' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends '_count' ? OfferCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'purchaseLines' ? Array < PurchaseLineGetPayload<S['select'][P]>>  :
        P extends 'invoiceLines' ? Array < InvoiceLineGetPayload<S['select'][P]>>  :
        P extends 'tags' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends '_count' ? OfferCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Offer ? Offer[P] : never
  } 
    : Offer
  : Offer


  type OfferCountArgs = Merge<
    Omit<OfferFindManyArgs, 'select' | 'include'> & {
      select?: OfferCountAggregateInputType | true
    }
  >

  export interface OfferDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Offer that matches the filter.
     * @param {OfferFindUniqueArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OfferFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OfferFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Offer'> extends True ? CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>> : CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>

    /**
     * Find the first Offer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindFirstArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OfferFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OfferFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Offer'> extends True ? CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>> : CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>

    /**
     * Find zero or more Offers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offers
     * const offers = await prisma.offer.findMany()
     * 
     * // Get first 10 Offers
     * const offers = await prisma.offer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offerWithIdOnly = await prisma.offer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OfferFindManyArgs>(
      args?: SelectSubset<T, OfferFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Offer>>, PrismaPromise<Array<OfferGetPayload<T>>>>

    /**
     * Create a Offer.
     * @param {OfferCreateArgs} args - Arguments to create a Offer.
     * @example
     * // Create one Offer
     * const Offer = await prisma.offer.create({
     *   data: {
     *     // ... data to create a Offer
     *   }
     * })
     * 
    **/
    create<T extends OfferCreateArgs>(
      args: SelectSubset<T, OfferCreateArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Create many Offers.
     *     @param {OfferCreateManyArgs} args - Arguments to create many Offers.
     *     @example
     *     // Create many Offers
     *     const offer = await prisma.offer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OfferCreateManyArgs>(
      args?: SelectSubset<T, OfferCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Offer.
     * @param {OfferDeleteArgs} args - Arguments to delete one Offer.
     * @example
     * // Delete one Offer
     * const Offer = await prisma.offer.delete({
     *   where: {
     *     // ... filter to delete one Offer
     *   }
     * })
     * 
    **/
    delete<T extends OfferDeleteArgs>(
      args: SelectSubset<T, OfferDeleteArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Update one Offer.
     * @param {OfferUpdateArgs} args - Arguments to update one Offer.
     * @example
     * // Update one Offer
     * const offer = await prisma.offer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OfferUpdateArgs>(
      args: SelectSubset<T, OfferUpdateArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Delete zero or more Offers.
     * @param {OfferDeleteManyArgs} args - Arguments to filter Offers to delete.
     * @example
     * // Delete a few Offers
     * const { count } = await prisma.offer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OfferDeleteManyArgs>(
      args?: SelectSubset<T, OfferDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offers
     * const offer = await prisma.offer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OfferUpdateManyArgs>(
      args: SelectSubset<T, OfferUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Offer.
     * @param {OfferUpsertArgs} args - Arguments to update or create a Offer.
     * @example
     * // Update or create a Offer
     * const offer = await prisma.offer.upsert({
     *   create: {
     *     // ... data to create a Offer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offer we want to update
     *   }
     * })
    **/
    upsert<T extends OfferUpsertArgs>(
      args: SelectSubset<T, OfferUpsertArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Count the number of Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferCountArgs} args - Arguments to filter Offers to count.
     * @example
     * // Count the number of Offers
     * const count = await prisma.offer.count({
     *   where: {
     *     // ... the filter for the Offers we want to count
     *   }
     * })
    **/
    count<T extends OfferCountArgs>(
      args?: Subset<T, OfferCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfferAggregateArgs>(args: Subset<T, OfferAggregateArgs>): PrismaPromise<GetOfferAggregateType<T>>

    /**
     * Group by Offer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfferGroupByArgs['orderBy'] }
        : { orderBy?: OfferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfferGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Offer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OfferClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    purchaseLines<T extends PurchaseLineFindManyArgs = {}>(args?: Subset<T, PurchaseLineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PurchaseLine>>, PrismaPromise<Array<PurchaseLineGetPayload<T>>>>;

    invoiceLines<T extends InvoiceLineFindManyArgs = {}>(args?: Subset<T, InvoiceLineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InvoiceLine>>, PrismaPromise<Array<InvoiceLineGetPayload<T>>>>;

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Offer findUnique
   */
  export type OfferFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * Throw an Error if a Offer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Offer to fetch.
     * 
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer findFirst
   */
  export type OfferFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * Throw an Error if a Offer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Offer to fetch.
     * 
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     * 
    **/
    orderBy?: Enumerable<OfferOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offers.
     * 
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offers.
     * 
    **/
    distinct?: Enumerable<OfferScalarFieldEnum>
  }


  /**
   * Offer findMany
   */
  export type OfferFindManyArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * Filter, which Offers to fetch.
     * 
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
     * 
    **/
    orderBy?: Enumerable<OfferOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offers.
     * 
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OfferScalarFieldEnum>
  }


  /**
   * Offer create
   */
  export type OfferCreateArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * The data needed to create a Offer.
     * 
    **/
    data: XOR<OfferCreateInput, OfferUncheckedCreateInput>
  }


  /**
   * Offer createMany
   */
  export type OfferCreateManyArgs = {
    /**
     * The data used to create many Offers.
     * 
    **/
    data: Enumerable<OfferCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Offer update
   */
  export type OfferUpdateArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * The data needed to update a Offer.
     * 
    **/
    data: XOR<OfferUpdateInput, OfferUncheckedUpdateInput>
    /**
     * Choose, which Offer to update.
     * 
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer updateMany
   */
  export type OfferUpdateManyArgs = {
    /**
     * The data used to update Offers.
     * 
    **/
    data: XOR<OfferUpdateManyMutationInput, OfferUncheckedUpdateManyInput>
    /**
     * Filter which Offers to update
     * 
    **/
    where?: OfferWhereInput
  }


  /**
   * Offer upsert
   */
  export type OfferUpsertArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * The filter to search for the Offer to update in case it exists.
     * 
    **/
    where: OfferWhereUniqueInput
    /**
     * In case the Offer found by the `where` argument doesn't exist, create a new Offer with this data.
     * 
    **/
    create: XOR<OfferCreateInput, OfferUncheckedCreateInput>
    /**
     * In case the Offer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OfferUpdateInput, OfferUncheckedUpdateInput>
  }


  /**
   * Offer delete
   */
  export type OfferDeleteArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
    /**
     * Filter which Offer to delete.
     * 
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer deleteMany
   */
  export type OfferDeleteManyArgs = {
    /**
     * Filter which Offers to delete
     * 
    **/
    where?: OfferWhereInput
  }


  /**
   * Offer without action
   */
  export type OfferArgs = {
    /**
     * Select specific fields to fetch from the Offer
     * 
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OfferInclude | null
  }



  /**
   * Model Purchase
   */


  export type AggregatePurchase = {
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseAvgAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
  }

  export type PurchaseSumAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
  }

  export type PurchaseMinAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    createdAt: Date | null
  }

  export type PurchaseMaxAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    createdAt: Date | null
  }

  export type PurchaseCountAggregateOutputType = {
    id: number
    createdByProfileId: number
    createdAt: number
    _all: number
  }


  export type PurchaseAvgAggregateInputType = {
    id?: true
    createdByProfileId?: true
  }

  export type PurchaseSumAggregateInputType = {
    id?: true
    createdByProfileId?: true
  }

  export type PurchaseMinAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
  }

  export type PurchaseMaxAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
  }

  export type PurchaseCountAggregateInputType = {
    id?: true
    createdByProfileId?: true
    createdAt?: true
    _all?: true
  }

  export type PurchaseAggregateArgs = {
    /**
     * Filter which Purchase to aggregate.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    _count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }




  export type PurchaseGroupByArgs = {
    where?: PurchaseWhereInput
    orderBy?: Enumerable<PurchaseOrderByWithAggregationInput>
    by: Array<PurchaseScalarFieldEnum>
    having?: PurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseCountAggregateInputType | true
    _avg?: PurchaseAvgAggregateInputType
    _sum?: PurchaseSumAggregateInputType
    _min?: PurchaseMinAggregateInputType
    _max?: PurchaseMaxAggregateInputType
  }


  export type PurchaseGroupByOutputType = {
    id: number
    createdByProfileId: number
    createdAt: Date
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  type GetPurchaseGroupByPayload<T extends PurchaseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseSelect = {
    id?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    createdAt?: boolean
    lines?: boolean | PurchaseLineFindManyArgs
    invoices?: boolean | InvoiceFindManyArgs
    _count?: boolean | PurchaseCountOutputTypeArgs
  }

  export type PurchaseInclude = {
    createdBy?: boolean | ProfileArgs
    lines?: boolean | PurchaseLineFindManyArgs
    invoices?: boolean | InvoiceFindManyArgs
    _count?: boolean | PurchaseCountOutputTypeArgs
  }

  export type PurchaseGetPayload<
    S extends boolean | null | undefined | PurchaseArgs,
    U = keyof S
      > = S extends true
        ? Purchase
    : S extends undefined
    ? never
    : S extends PurchaseArgs | PurchaseFindManyArgs
    ?'include' extends U
    ? Purchase  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'lines' ? Array < PurchaseLineGetPayload<S['include'][P]>>  :
        P extends 'invoices' ? Array < InvoiceGetPayload<S['include'][P]>>  :
        P extends '_count' ? PurchaseCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'lines' ? Array < PurchaseLineGetPayload<S['select'][P]>>  :
        P extends 'invoices' ? Array < InvoiceGetPayload<S['select'][P]>>  :
        P extends '_count' ? PurchaseCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Purchase ? Purchase[P] : never
  } 
    : Purchase
  : Purchase


  type PurchaseCountArgs = Merge<
    Omit<PurchaseFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseCountAggregateInputType | true
    }
  >

  export interface PurchaseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseWithIdOnly = await prisma.purchase.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseFindManyArgs>(
      args?: SelectSubset<T, PurchaseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
    **/
    create<T extends PurchaseCreateArgs>(
      args: SelectSubset<T, PurchaseCreateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Create many Purchases.
     *     @param {PurchaseCreateManyArgs} args - Arguments to create many Purchases.
     *     @example
     *     // Create many Purchases
     *     const purchase = await prisma.purchase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseCreateManyArgs>(
      args?: SelectSubset<T, PurchaseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseDeleteArgs>(
      args: SelectSubset<T, PurchaseDeleteArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseUpdateArgs>(
      args: SelectSubset<T, PurchaseUpdateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseDeleteManyArgs>(
      args?: SelectSubset<T, PurchaseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseUpdateManyArgs>(
      args: SelectSubset<T, PurchaseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseUpsertArgs>(
      args: SelectSubset<T, PurchaseUpsertArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): PrismaPromise<GetPurchaseAggregateType<T>>

    /**
     * Group by Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    lines<T extends PurchaseLineFindManyArgs = {}>(args?: Subset<T, PurchaseLineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PurchaseLine>>, PrismaPromise<Array<PurchaseLineGetPayload<T>>>>;

    invoices<T extends InvoiceFindManyArgs = {}>(args?: Subset<T, InvoiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     * 
    **/
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Filter, which Purchases to fetch.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase create
   */
  export type PurchaseCreateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to create a Purchase.
     * 
    **/
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }


  /**
   * Purchase createMany
   */
  export type PurchaseCreateManyArgs = {
    /**
     * The data used to create many Purchases.
     * 
    **/
    data: Enumerable<PurchaseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to update a Purchase.
     * 
    **/
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs = {
    /**
     * The data used to update Purchases.
     * 
    **/
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    /**
     * Filter which Purchases to update
     * 
    **/
    where?: PurchaseWhereInput
  }


  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The filter to search for the Purchase to update in case it exists.
     * 
    **/
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
     * 
    **/
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }


  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Filter which Purchase to delete.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs = {
    /**
     * Filter which Purchases to delete
     * 
    **/
    where?: PurchaseWhereInput
  }


  /**
   * Purchase without action
   */
  export type PurchaseArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
  }



  /**
   * Model PurchaseLine
   */


  export type AggregatePurchaseLine = {
    _count: PurchaseLineCountAggregateOutputType | null
    _avg: PurchaseLineAvgAggregateOutputType | null
    _sum: PurchaseLineSumAggregateOutputType | null
    _min: PurchaseLineMinAggregateOutputType | null
    _max: PurchaseLineMaxAggregateOutputType | null
  }

  export type PurchaseLineAvgAggregateOutputType = {
    id: number | null
    purchaseId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type PurchaseLineSumAggregateOutputType = {
    id: number | null
    purchaseId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type PurchaseLineMinAggregateOutputType = {
    id: number | null
    purchaseId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type PurchaseLineMaxAggregateOutputType = {
    id: number | null
    purchaseId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type PurchaseLineCountAggregateOutputType = {
    id: number
    purchaseId: number
    amount: number
    productId: number
    productVersion: number
    _all: number
  }


  export type PurchaseLineAvgAggregateInputType = {
    id?: true
    purchaseId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type PurchaseLineSumAggregateInputType = {
    id?: true
    purchaseId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type PurchaseLineMinAggregateInputType = {
    id?: true
    purchaseId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type PurchaseLineMaxAggregateInputType = {
    id?: true
    purchaseId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type PurchaseLineCountAggregateInputType = {
    id?: true
    purchaseId?: true
    amount?: true
    productId?: true
    productVersion?: true
    _all?: true
  }

  export type PurchaseLineAggregateArgs = {
    /**
     * Filter which PurchaseLine to aggregate.
     * 
    **/
    where?: PurchaseLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseLines to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PurchaseLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseLines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseLines
    **/
    _count?: true | PurchaseLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseLineMaxAggregateInputType
  }

  export type GetPurchaseLineAggregateType<T extends PurchaseLineAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseLine[P]>
      : GetScalarType<T[P], AggregatePurchaseLine[P]>
  }




  export type PurchaseLineGroupByArgs = {
    where?: PurchaseLineWhereInput
    orderBy?: Enumerable<PurchaseLineOrderByWithAggregationInput>
    by: Array<PurchaseLineScalarFieldEnum>
    having?: PurchaseLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseLineCountAggregateInputType | true
    _avg?: PurchaseLineAvgAggregateInputType
    _sum?: PurchaseLineSumAggregateInputType
    _min?: PurchaseLineMinAggregateInputType
    _max?: PurchaseLineMaxAggregateInputType
  }


  export type PurchaseLineGroupByOutputType = {
    id: number
    purchaseId: number
    amount: number
    productId: number
    productVersion: number
    _count: PurchaseLineCountAggregateOutputType | null
    _avg: PurchaseLineAvgAggregateOutputType | null
    _sum: PurchaseLineSumAggregateOutputType | null
    _min: PurchaseLineMinAggregateOutputType | null
    _max: PurchaseLineMaxAggregateOutputType | null
  }

  type GetPurchaseLineGroupByPayload<T extends PurchaseLineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PurchaseLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseLineGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseLineGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseLineSelect = {
    id?: boolean
    purchase?: boolean | PurchaseArgs
    purchaseId?: boolean
    amount?: boolean
    product?: boolean | OfferArgs
    productId?: boolean
    productVersion?: boolean
  }

  export type PurchaseLineInclude = {
    purchase?: boolean | PurchaseArgs
    product?: boolean | OfferArgs
  }

  export type PurchaseLineGetPayload<
    S extends boolean | null | undefined | PurchaseLineArgs,
    U = keyof S
      > = S extends true
        ? PurchaseLine
    : S extends undefined
    ? never
    : S extends PurchaseLineArgs | PurchaseLineFindManyArgs
    ?'include' extends U
    ? PurchaseLine  & {
    [P in TrueKeys<S['include']>]:
        P extends 'purchase' ? PurchaseGetPayload<S['include'][P]> :
        P extends 'product' ? OfferGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'purchase' ? PurchaseGetPayload<S['select'][P]> :
        P extends 'product' ? OfferGetPayload<S['select'][P]> :  P extends keyof PurchaseLine ? PurchaseLine[P] : never
  } 
    : PurchaseLine
  : PurchaseLine


  type PurchaseLineCountArgs = Merge<
    Omit<PurchaseLineFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseLineCountAggregateInputType | true
    }
  >

  export interface PurchaseLineDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PurchaseLine that matches the filter.
     * @param {PurchaseLineFindUniqueArgs} args - Arguments to find a PurchaseLine
     * @example
     * // Get one PurchaseLine
     * const purchaseLine = await prisma.purchaseLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseLineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseLineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PurchaseLine'> extends True ? CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine | null >, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T> | null >>

    /**
     * Find the first PurchaseLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineFindFirstArgs} args - Arguments to find a PurchaseLine
     * @example
     * // Get one PurchaseLine
     * const purchaseLine = await prisma.purchaseLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseLineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseLineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PurchaseLine'> extends True ? CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine | null >, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T> | null >>

    /**
     * Find zero or more PurchaseLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseLines
     * const purchaseLines = await prisma.purchaseLine.findMany()
     * 
     * // Get first 10 PurchaseLines
     * const purchaseLines = await prisma.purchaseLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseLineWithIdOnly = await prisma.purchaseLine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseLineFindManyArgs>(
      args?: SelectSubset<T, PurchaseLineFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PurchaseLine>>, PrismaPromise<Array<PurchaseLineGetPayload<T>>>>

    /**
     * Create a PurchaseLine.
     * @param {PurchaseLineCreateArgs} args - Arguments to create a PurchaseLine.
     * @example
     * // Create one PurchaseLine
     * const PurchaseLine = await prisma.purchaseLine.create({
     *   data: {
     *     // ... data to create a PurchaseLine
     *   }
     * })
     * 
    **/
    create<T extends PurchaseLineCreateArgs>(
      args: SelectSubset<T, PurchaseLineCreateArgs>
    ): CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>>

    /**
     * Create many PurchaseLines.
     *     @param {PurchaseLineCreateManyArgs} args - Arguments to create many PurchaseLines.
     *     @example
     *     // Create many PurchaseLines
     *     const purchaseLine = await prisma.purchaseLine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseLineCreateManyArgs>(
      args?: SelectSubset<T, PurchaseLineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PurchaseLine.
     * @param {PurchaseLineDeleteArgs} args - Arguments to delete one PurchaseLine.
     * @example
     * // Delete one PurchaseLine
     * const PurchaseLine = await prisma.purchaseLine.delete({
     *   where: {
     *     // ... filter to delete one PurchaseLine
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseLineDeleteArgs>(
      args: SelectSubset<T, PurchaseLineDeleteArgs>
    ): CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>>

    /**
     * Update one PurchaseLine.
     * @param {PurchaseLineUpdateArgs} args - Arguments to update one PurchaseLine.
     * @example
     * // Update one PurchaseLine
     * const purchaseLine = await prisma.purchaseLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseLineUpdateArgs>(
      args: SelectSubset<T, PurchaseLineUpdateArgs>
    ): CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>>

    /**
     * Delete zero or more PurchaseLines.
     * @param {PurchaseLineDeleteManyArgs} args - Arguments to filter PurchaseLines to delete.
     * @example
     * // Delete a few PurchaseLines
     * const { count } = await prisma.purchaseLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseLineDeleteManyArgs>(
      args?: SelectSubset<T, PurchaseLineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseLines
     * const purchaseLine = await prisma.purchaseLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseLineUpdateManyArgs>(
      args: SelectSubset<T, PurchaseLineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseLine.
     * @param {PurchaseLineUpsertArgs} args - Arguments to update or create a PurchaseLine.
     * @example
     * // Update or create a PurchaseLine
     * const purchaseLine = await prisma.purchaseLine.upsert({
     *   create: {
     *     // ... data to create a PurchaseLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseLine we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseLineUpsertArgs>(
      args: SelectSubset<T, PurchaseLineUpsertArgs>
    ): CheckSelect<T, Prisma__PurchaseLineClient<PurchaseLine>, Prisma__PurchaseLineClient<PurchaseLineGetPayload<T>>>

    /**
     * Count the number of PurchaseLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineCountArgs} args - Arguments to filter PurchaseLines to count.
     * @example
     * // Count the number of PurchaseLines
     * const count = await prisma.purchaseLine.count({
     *   where: {
     *     // ... the filter for the PurchaseLines we want to count
     *   }
     * })
    **/
    count<T extends PurchaseLineCountArgs>(
      args?: Subset<T, PurchaseLineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseLineAggregateArgs>(args: Subset<T, PurchaseLineAggregateArgs>): PrismaPromise<GetPurchaseLineAggregateType<T>>

    /**
     * Group by PurchaseLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseLineGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseLineGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseLineClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    purchase<T extends PurchaseArgs = {}>(args?: Subset<T, PurchaseArgs>): CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>;

    product<T extends OfferArgs = {}>(args?: Subset<T, OfferArgs>): CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PurchaseLine findUnique
   */
  export type PurchaseLineFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * Throw an Error if a PurchaseLine can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PurchaseLine to fetch.
     * 
    **/
    where: PurchaseLineWhereUniqueInput
  }


  /**
   * PurchaseLine findFirst
   */
  export type PurchaseLineFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * Throw an Error if a PurchaseLine can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PurchaseLine to fetch.
     * 
    **/
    where?: PurchaseLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseLines to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseLines.
     * 
    **/
    cursor?: PurchaseLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseLines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseLines.
     * 
    **/
    distinct?: Enumerable<PurchaseLineScalarFieldEnum>
  }


  /**
   * PurchaseLine findMany
   */
  export type PurchaseLineFindManyArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * Filter, which PurchaseLines to fetch.
     * 
    **/
    where?: PurchaseLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseLines to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseLines.
     * 
    **/
    cursor?: PurchaseLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseLines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PurchaseLineScalarFieldEnum>
  }


  /**
   * PurchaseLine create
   */
  export type PurchaseLineCreateArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * The data needed to create a PurchaseLine.
     * 
    **/
    data: XOR<PurchaseLineCreateInput, PurchaseLineUncheckedCreateInput>
  }


  /**
   * PurchaseLine createMany
   */
  export type PurchaseLineCreateManyArgs = {
    /**
     * The data used to create many PurchaseLines.
     * 
    **/
    data: Enumerable<PurchaseLineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PurchaseLine update
   */
  export type PurchaseLineUpdateArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * The data needed to update a PurchaseLine.
     * 
    **/
    data: XOR<PurchaseLineUpdateInput, PurchaseLineUncheckedUpdateInput>
    /**
     * Choose, which PurchaseLine to update.
     * 
    **/
    where: PurchaseLineWhereUniqueInput
  }


  /**
   * PurchaseLine updateMany
   */
  export type PurchaseLineUpdateManyArgs = {
    /**
     * The data used to update PurchaseLines.
     * 
    **/
    data: XOR<PurchaseLineUpdateManyMutationInput, PurchaseLineUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseLines to update
     * 
    **/
    where?: PurchaseLineWhereInput
  }


  /**
   * PurchaseLine upsert
   */
  export type PurchaseLineUpsertArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * The filter to search for the PurchaseLine to update in case it exists.
     * 
    **/
    where: PurchaseLineWhereUniqueInput
    /**
     * In case the PurchaseLine found by the `where` argument doesn't exist, create a new PurchaseLine with this data.
     * 
    **/
    create: XOR<PurchaseLineCreateInput, PurchaseLineUncheckedCreateInput>
    /**
     * In case the PurchaseLine was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PurchaseLineUpdateInput, PurchaseLineUncheckedUpdateInput>
  }


  /**
   * PurchaseLine delete
   */
  export type PurchaseLineDeleteArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
    /**
     * Filter which PurchaseLine to delete.
     * 
    **/
    where: PurchaseLineWhereUniqueInput
  }


  /**
   * PurchaseLine deleteMany
   */
  export type PurchaseLineDeleteManyArgs = {
    /**
     * Filter which PurchaseLines to delete
     * 
    **/
    where?: PurchaseLineWhereInput
  }


  /**
   * PurchaseLine without action
   */
  export type PurchaseLineArgs = {
    /**
     * Select specific fields to fetch from the PurchaseLine
     * 
    **/
    select?: PurchaseLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseLineInclude | null
  }



  /**
   * Model Invoice
   */


  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    customerProfileId: number | null
    sellerProfileId: number | null
    purchaseId: number | null
    cancelledByProfileId: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    customerProfileId: number | null
    sellerProfileId: number | null
    purchaseId: number | null
    cancelledByProfileId: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    invoiceNo: string | null
    customerProfileId: number | null
    sellerProfileId: number | null
    purchaseId: number | null
    pendingPaymentTransactionHash: string | null
    paymentTransactionHash: string | null
    pickupCode: string | null
    buyerSignature: boolean | null
    buyerSignedDate: Date | null
    sellerSignature: boolean | null
    sellerSignedDate: Date | null
    cancelledAt: Date | null
    cancelledByProfileId: number | null
    cancelReason: string | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    invoiceNo: string | null
    customerProfileId: number | null
    sellerProfileId: number | null
    purchaseId: number | null
    pendingPaymentTransactionHash: string | null
    paymentTransactionHash: string | null
    pickupCode: string | null
    buyerSignature: boolean | null
    buyerSignedDate: Date | null
    sellerSignature: boolean | null
    sellerSignedDate: Date | null
    cancelledAt: Date | null
    cancelledByProfileId: number | null
    cancelReason: string | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    createdAt: number
    invoiceNo: number
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash: number
    paymentTransactionHash: number
    pickupCode: number
    buyerSignature: number
    buyerSignedDate: number
    sellerSignature: number
    sellerSignedDate: number
    cancelledAt: number
    cancelledByProfileId: number
    cancelReason: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    customerProfileId?: true
    sellerProfileId?: true
    purchaseId?: true
    cancelledByProfileId?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    customerProfileId?: true
    sellerProfileId?: true
    purchaseId?: true
    cancelledByProfileId?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    createdAt?: true
    invoiceNo?: true
    customerProfileId?: true
    sellerProfileId?: true
    purchaseId?: true
    pendingPaymentTransactionHash?: true
    paymentTransactionHash?: true
    pickupCode?: true
    buyerSignature?: true
    buyerSignedDate?: true
    sellerSignature?: true
    sellerSignedDate?: true
    cancelledAt?: true
    cancelledByProfileId?: true
    cancelReason?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    invoiceNo?: true
    customerProfileId?: true
    sellerProfileId?: true
    purchaseId?: true
    pendingPaymentTransactionHash?: true
    paymentTransactionHash?: true
    pickupCode?: true
    buyerSignature?: true
    buyerSignedDate?: true
    sellerSignature?: true
    sellerSignedDate?: true
    cancelledAt?: true
    cancelledByProfileId?: true
    cancelReason?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    createdAt?: true
    invoiceNo?: true
    customerProfileId?: true
    sellerProfileId?: true
    purchaseId?: true
    pendingPaymentTransactionHash?: true
    paymentTransactionHash?: true
    pickupCode?: true
    buyerSignature?: true
    buyerSignedDate?: true
    sellerSignature?: true
    sellerSignedDate?: true
    cancelledAt?: true
    cancelledByProfileId?: true
    cancelReason?: true
    _all?: true
  }

  export type InvoiceAggregateArgs = {
    /**
     * Filter which Invoice to aggregate.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs = {
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithAggregationInput>
    by: Array<InvoiceScalarFieldEnum>
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }


  export type InvoiceGroupByOutputType = {
    id: number
    createdAt: Date
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash: string | null
    paymentTransactionHash: string | null
    pickupCode: string | null
    buyerSignature: boolean | null
    buyerSignedDate: Date | null
    sellerSignature: boolean | null
    sellerSignedDate: Date | null
    cancelledAt: Date | null
    cancelledByProfileId: number | null
    cancelReason: string | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect = {
    id?: boolean
    createdAt?: boolean
    invoiceNo?: boolean
    customerProfile?: boolean | ProfileArgs
    customerProfileId?: boolean
    sellerProfile?: boolean | ProfileArgs
    sellerProfileId?: boolean
    purchase?: boolean | PurchaseArgs
    purchaseId?: boolean
    lines?: boolean | InvoiceLineFindManyArgs
    pendingPaymentTransactionHash?: boolean
    paymentTransaction?: boolean | TransactionArgs
    paymentTransactionHash?: boolean
    pickupCode?: boolean
    buyerSignature?: boolean
    buyerSignedDate?: boolean
    sellerSignature?: boolean
    sellerSignedDate?: boolean
    cancelledAt?: boolean
    cancelledBy?: boolean | ProfileArgs
    cancelledByProfileId?: boolean
    cancelReason?: boolean
    _count?: boolean | InvoiceCountOutputTypeArgs
  }

  export type InvoiceInclude = {
    customerProfile?: boolean | ProfileArgs
    sellerProfile?: boolean | ProfileArgs
    purchase?: boolean | PurchaseArgs
    lines?: boolean | InvoiceLineFindManyArgs
    paymentTransaction?: boolean | TransactionArgs
    cancelledBy?: boolean | ProfileArgs
    _count?: boolean | InvoiceCountOutputTypeArgs
  }

  export type InvoiceGetPayload<
    S extends boolean | null | undefined | InvoiceArgs,
    U = keyof S
      > = S extends true
        ? Invoice
    : S extends undefined
    ? never
    : S extends InvoiceArgs | InvoiceFindManyArgs
    ?'include' extends U
    ? Invoice  & {
    [P in TrueKeys<S['include']>]:
        P extends 'customerProfile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'sellerProfile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'purchase' ? PurchaseGetPayload<S['include'][P]> :
        P extends 'lines' ? Array < InvoiceLineGetPayload<S['include'][P]>>  :
        P extends 'paymentTransaction' ? TransactionGetPayload<S['include'][P]> | null :
        P extends 'cancelledBy' ? ProfileGetPayload<S['include'][P]> | null :
        P extends '_count' ? InvoiceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'customerProfile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'sellerProfile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'purchase' ? PurchaseGetPayload<S['select'][P]> :
        P extends 'lines' ? Array < InvoiceLineGetPayload<S['select'][P]>>  :
        P extends 'paymentTransaction' ? TransactionGetPayload<S['select'][P]> | null :
        P extends 'cancelledBy' ? ProfileGetPayload<S['select'][P]> | null :
        P extends '_count' ? InvoiceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Invoice ? Invoice[P] : never
  } 
    : Invoice
  : Invoice


  type InvoiceCountArgs = Merge<
    Omit<InvoiceFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceCountAggregateInputType | true
    }
  >

  export interface InvoiceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs>(
      args?: SelectSubset<T, InvoiceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs>(
      args: SelectSubset<T, InvoiceCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Create many Invoices.
     *     @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     *     @example
     *     // Create many Invoices
     *     const invoice = await prisma.invoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs>(
      args?: SelectSubset<T, InvoiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs>(
      args: SelectSubset<T, InvoiceDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs>(
      args: SelectSubset<T, InvoiceUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs>(
      args: SelectSubset<T, InvoiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs>(
      args: SelectSubset<T, InvoiceUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    customerProfile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    sellerProfile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    purchase<T extends PurchaseArgs = {}>(args?: Subset<T, PurchaseArgs>): CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>;

    lines<T extends InvoiceLineFindManyArgs = {}>(args?: Subset<T, InvoiceLineFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InvoiceLine>>, PrismaPromise<Array<InvoiceLineGetPayload<T>>>>;

    paymentTransaction<T extends TransactionArgs = {}>(args?: Subset<T, TransactionArgs>): CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>;

    cancelledBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     * 
    **/
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoices to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to create a Invoice.
     * 
    **/
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs = {
    /**
     * The data used to create many Invoices.
     * 
    **/
    data: Enumerable<InvoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to update a Invoice.
     * 
    **/
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs = {
    /**
     * The data used to update Invoices.
     * 
    **/
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     * 
    **/
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     * 
    **/
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter which Invoice to delete.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs = {
    /**
     * Filter which Invoices to delete
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice without action
   */
  export type InvoiceArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
  }



  /**
   * Model InvoiceLine
   */


  export type AggregateInvoiceLine = {
    _count: InvoiceLineCountAggregateOutputType | null
    _avg: InvoiceLineAvgAggregateOutputType | null
    _sum: InvoiceLineSumAggregateOutputType | null
    _min: InvoiceLineMinAggregateOutputType | null
    _max: InvoiceLineMaxAggregateOutputType | null
  }

  export type InvoiceLineAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type InvoiceLineSumAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type InvoiceLineMinAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type InvoiceLineMaxAggregateOutputType = {
    id: number | null
    invoiceId: number | null
    amount: number | null
    productId: number | null
    productVersion: number | null
  }

  export type InvoiceLineCountAggregateOutputType = {
    id: number
    invoiceId: number
    amount: number
    productId: number
    productVersion: number
    _all: number
  }


  export type InvoiceLineAvgAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type InvoiceLineSumAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type InvoiceLineMinAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type InvoiceLineMaxAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    productId?: true
    productVersion?: true
  }

  export type InvoiceLineCountAggregateInputType = {
    id?: true
    invoiceId?: true
    amount?: true
    productId?: true
    productVersion?: true
    _all?: true
  }

  export type InvoiceLineAggregateArgs = {
    /**
     * Filter which InvoiceLine to aggregate.
     * 
    **/
    where?: InvoiceLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceLines to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceLines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceLines
    **/
    _count?: true | InvoiceLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceLineMaxAggregateInputType
  }

  export type GetInvoiceLineAggregateType<T extends InvoiceLineAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceLine[P]>
      : GetScalarType<T[P], AggregateInvoiceLine[P]>
  }




  export type InvoiceLineGroupByArgs = {
    where?: InvoiceLineWhereInput
    orderBy?: Enumerable<InvoiceLineOrderByWithAggregationInput>
    by: Array<InvoiceLineScalarFieldEnum>
    having?: InvoiceLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceLineCountAggregateInputType | true
    _avg?: InvoiceLineAvgAggregateInputType
    _sum?: InvoiceLineSumAggregateInputType
    _min?: InvoiceLineMinAggregateInputType
    _max?: InvoiceLineMaxAggregateInputType
  }


  export type InvoiceLineGroupByOutputType = {
    id: number
    invoiceId: number
    amount: number
    productId: number
    productVersion: number
    _count: InvoiceLineCountAggregateOutputType | null
    _avg: InvoiceLineAvgAggregateOutputType | null
    _sum: InvoiceLineSumAggregateOutputType | null
    _min: InvoiceLineMinAggregateOutputType | null
    _max: InvoiceLineMaxAggregateOutputType | null
  }

  type GetInvoiceLineGroupByPayload<T extends InvoiceLineGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceLineGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceLineGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceLineSelect = {
    id?: boolean
    invoice?: boolean | InvoiceArgs
    invoiceId?: boolean
    amount?: boolean
    product?: boolean | OfferArgs
    productId?: boolean
    productVersion?: boolean
  }

  export type InvoiceLineInclude = {
    invoice?: boolean | InvoiceArgs
    product?: boolean | OfferArgs
  }

  export type InvoiceLineGetPayload<
    S extends boolean | null | undefined | InvoiceLineArgs,
    U = keyof S
      > = S extends true
        ? InvoiceLine
    : S extends undefined
    ? never
    : S extends InvoiceLineArgs | InvoiceLineFindManyArgs
    ?'include' extends U
    ? InvoiceLine  & {
    [P in TrueKeys<S['include']>]:
        P extends 'invoice' ? InvoiceGetPayload<S['include'][P]> :
        P extends 'product' ? OfferGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'invoice' ? InvoiceGetPayload<S['select'][P]> :
        P extends 'product' ? OfferGetPayload<S['select'][P]> :  P extends keyof InvoiceLine ? InvoiceLine[P] : never
  } 
    : InvoiceLine
  : InvoiceLine


  type InvoiceLineCountArgs = Merge<
    Omit<InvoiceLineFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceLineCountAggregateInputType | true
    }
  >

  export interface InvoiceLineDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InvoiceLine that matches the filter.
     * @param {InvoiceLineFindUniqueArgs} args - Arguments to find a InvoiceLine
     * @example
     * // Get one InvoiceLine
     * const invoiceLine = await prisma.invoiceLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceLineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceLineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InvoiceLine'> extends True ? CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine | null >, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T> | null >>

    /**
     * Find the first InvoiceLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineFindFirstArgs} args - Arguments to find a InvoiceLine
     * @example
     * // Get one InvoiceLine
     * const invoiceLine = await prisma.invoiceLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceLineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceLineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InvoiceLine'> extends True ? CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine | null >, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T> | null >>

    /**
     * Find zero or more InvoiceLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceLines
     * const invoiceLines = await prisma.invoiceLine.findMany()
     * 
     * // Get first 10 InvoiceLines
     * const invoiceLines = await prisma.invoiceLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceLineWithIdOnly = await prisma.invoiceLine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceLineFindManyArgs>(
      args?: SelectSubset<T, InvoiceLineFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InvoiceLine>>, PrismaPromise<Array<InvoiceLineGetPayload<T>>>>

    /**
     * Create a InvoiceLine.
     * @param {InvoiceLineCreateArgs} args - Arguments to create a InvoiceLine.
     * @example
     * // Create one InvoiceLine
     * const InvoiceLine = await prisma.invoiceLine.create({
     *   data: {
     *     // ... data to create a InvoiceLine
     *   }
     * })
     * 
    **/
    create<T extends InvoiceLineCreateArgs>(
      args: SelectSubset<T, InvoiceLineCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>>

    /**
     * Create many InvoiceLines.
     *     @param {InvoiceLineCreateManyArgs} args - Arguments to create many InvoiceLines.
     *     @example
     *     // Create many InvoiceLines
     *     const invoiceLine = await prisma.invoiceLine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceLineCreateManyArgs>(
      args?: SelectSubset<T, InvoiceLineCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceLine.
     * @param {InvoiceLineDeleteArgs} args - Arguments to delete one InvoiceLine.
     * @example
     * // Delete one InvoiceLine
     * const InvoiceLine = await prisma.invoiceLine.delete({
     *   where: {
     *     // ... filter to delete one InvoiceLine
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceLineDeleteArgs>(
      args: SelectSubset<T, InvoiceLineDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>>

    /**
     * Update one InvoiceLine.
     * @param {InvoiceLineUpdateArgs} args - Arguments to update one InvoiceLine.
     * @example
     * // Update one InvoiceLine
     * const invoiceLine = await prisma.invoiceLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceLineUpdateArgs>(
      args: SelectSubset<T, InvoiceLineUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>>

    /**
     * Delete zero or more InvoiceLines.
     * @param {InvoiceLineDeleteManyArgs} args - Arguments to filter InvoiceLines to delete.
     * @example
     * // Delete a few InvoiceLines
     * const { count } = await prisma.invoiceLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceLineDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceLineDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceLines
     * const invoiceLine = await prisma.invoiceLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceLineUpdateManyArgs>(
      args: SelectSubset<T, InvoiceLineUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceLine.
     * @param {InvoiceLineUpsertArgs} args - Arguments to update or create a InvoiceLine.
     * @example
     * // Update or create a InvoiceLine
     * const invoiceLine = await prisma.invoiceLine.upsert({
     *   create: {
     *     // ... data to create a InvoiceLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceLine we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceLineUpsertArgs>(
      args: SelectSubset<T, InvoiceLineUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceLineClient<InvoiceLine>, Prisma__InvoiceLineClient<InvoiceLineGetPayload<T>>>

    /**
     * Count the number of InvoiceLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineCountArgs} args - Arguments to filter InvoiceLines to count.
     * @example
     * // Count the number of InvoiceLines
     * const count = await prisma.invoiceLine.count({
     *   where: {
     *     // ... the filter for the InvoiceLines we want to count
     *   }
     * })
    **/
    count<T extends InvoiceLineCountArgs>(
      args?: Subset<T, InvoiceLineCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceLineAggregateArgs>(args: Subset<T, InvoiceLineAggregateArgs>): PrismaPromise<GetInvoiceLineAggregateType<T>>

    /**
     * Group by InvoiceLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceLineGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceLineGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceLineClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    invoice<T extends InvoiceArgs = {}>(args?: Subset<T, InvoiceArgs>): CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>;

    product<T extends OfferArgs = {}>(args?: Subset<T, OfferArgs>): CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InvoiceLine findUnique
   */
  export type InvoiceLineFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * Throw an Error if a InvoiceLine can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceLine to fetch.
     * 
    **/
    where: InvoiceLineWhereUniqueInput
  }


  /**
   * InvoiceLine findFirst
   */
  export type InvoiceLineFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * Throw an Error if a InvoiceLine can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceLine to fetch.
     * 
    **/
    where?: InvoiceLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceLines to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceLines.
     * 
    **/
    cursor?: InvoiceLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceLines.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceLines.
     * 
    **/
    distinct?: Enumerable<InvoiceLineScalarFieldEnum>
  }


  /**
   * InvoiceLine findMany
   */
  export type InvoiceLineFindManyArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * Filter, which InvoiceLines to fetch.
     * 
    **/
    where?: InvoiceLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceLines to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceLineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceLines.
     * 
    **/
    cursor?: InvoiceLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceLines from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceLines.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceLineScalarFieldEnum>
  }


  /**
   * InvoiceLine create
   */
  export type InvoiceLineCreateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * The data needed to create a InvoiceLine.
     * 
    **/
    data: XOR<InvoiceLineCreateInput, InvoiceLineUncheckedCreateInput>
  }


  /**
   * InvoiceLine createMany
   */
  export type InvoiceLineCreateManyArgs = {
    /**
     * The data used to create many InvoiceLines.
     * 
    **/
    data: Enumerable<InvoiceLineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InvoiceLine update
   */
  export type InvoiceLineUpdateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * The data needed to update a InvoiceLine.
     * 
    **/
    data: XOR<InvoiceLineUpdateInput, InvoiceLineUncheckedUpdateInput>
    /**
     * Choose, which InvoiceLine to update.
     * 
    **/
    where: InvoiceLineWhereUniqueInput
  }


  /**
   * InvoiceLine updateMany
   */
  export type InvoiceLineUpdateManyArgs = {
    /**
     * The data used to update InvoiceLines.
     * 
    **/
    data: XOR<InvoiceLineUpdateManyMutationInput, InvoiceLineUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceLines to update
     * 
    **/
    where?: InvoiceLineWhereInput
  }


  /**
   * InvoiceLine upsert
   */
  export type InvoiceLineUpsertArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * The filter to search for the InvoiceLine to update in case it exists.
     * 
    **/
    where: InvoiceLineWhereUniqueInput
    /**
     * In case the InvoiceLine found by the `where` argument doesn't exist, create a new InvoiceLine with this data.
     * 
    **/
    create: XOR<InvoiceLineCreateInput, InvoiceLineUncheckedCreateInput>
    /**
     * In case the InvoiceLine was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceLineUpdateInput, InvoiceLineUncheckedUpdateInput>
  }


  /**
   * InvoiceLine delete
   */
  export type InvoiceLineDeleteArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
    /**
     * Filter which InvoiceLine to delete.
     * 
    **/
    where: InvoiceLineWhereUniqueInput
  }


  /**
   * InvoiceLine deleteMany
   */
  export type InvoiceLineDeleteManyArgs = {
    /**
     * Filter which InvoiceLines to delete
     * 
    **/
    where?: InvoiceLineWhereInput
  }


  /**
   * InvoiceLine without action
   */
  export type InvoiceLineArgs = {
    /**
     * Select specific fields to fetch from the InvoiceLine
     * 
    **/
    select?: InvoiceLineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceLineInclude | null
  }



  /**
   * Model TagType
   */


  export type AggregateTagType = {
    _count: TagTypeCountAggregateOutputType | null
    _min: TagTypeMinAggregateOutputType | null
    _max: TagTypeMaxAggregateOutputType | null
  }

  export type TagTypeMinAggregateOutputType = {
    id: string | null
  }

  export type TagTypeMaxAggregateOutputType = {
    id: string | null
  }

  export type TagTypeCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type TagTypeMinAggregateInputType = {
    id?: true
  }

  export type TagTypeMaxAggregateInputType = {
    id?: true
  }

  export type TagTypeCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type TagTypeAggregateArgs = {
    /**
     * Filter which TagType to aggregate.
     * 
    **/
    where?: TagTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<TagTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TagTypes
    **/
    _count?: true | TagTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagTypeMaxAggregateInputType
  }

  export type GetTagTypeAggregateType<T extends TagTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateTagType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTagType[P]>
      : GetScalarType<T[P], AggregateTagType[P]>
  }




  export type TagTypeGroupByArgs = {
    where?: TagTypeWhereInput
    orderBy?: Enumerable<TagTypeOrderByWithAggregationInput>
    by: Array<TagTypeScalarFieldEnum>
    having?: TagTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagTypeCountAggregateInputType | true
    _min?: TagTypeMinAggregateInputType
    _max?: TagTypeMaxAggregateInputType
  }


  export type TagTypeGroupByOutputType = {
    id: string
    _count: TagTypeCountAggregateOutputType | null
    _min: TagTypeMinAggregateOutputType | null
    _max: TagTypeMaxAggregateOutputType | null
  }

  type GetTagTypeGroupByPayload<T extends TagTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagTypeGroupByOutputType[P]>
            : GetScalarType<T[P], TagTypeGroupByOutputType[P]>
        }
      >
    >


  export type TagTypeSelect = {
    id?: boolean
    tags?: boolean | TagFindManyArgs
    _count?: boolean | TagTypeCountOutputTypeArgs
  }

  export type TagTypeInclude = {
    tags?: boolean | TagFindManyArgs
    _count?: boolean | TagTypeCountOutputTypeArgs
  }

  export type TagTypeGetPayload<
    S extends boolean | null | undefined | TagTypeArgs,
    U = keyof S
      > = S extends true
        ? TagType
    : S extends undefined
    ? never
    : S extends TagTypeArgs | TagTypeFindManyArgs
    ?'include' extends U
    ? TagType  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tags' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends '_count' ? TagTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tags' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends '_count' ? TagTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TagType ? TagType[P] : never
  } 
    : TagType
  : TagType


  type TagTypeCountArgs = Merge<
    Omit<TagTypeFindManyArgs, 'select' | 'include'> & {
      select?: TagTypeCountAggregateInputType | true
    }
  >

  export interface TagTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TagType that matches the filter.
     * @param {TagTypeFindUniqueArgs} args - Arguments to find a TagType
     * @example
     * // Get one TagType
     * const tagType = await prisma.tagType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TagType'> extends True ? CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>> : CheckSelect<T, Prisma__TagTypeClient<TagType | null >, Prisma__TagTypeClient<TagTypeGetPayload<T> | null >>

    /**
     * Find the first TagType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeFindFirstArgs} args - Arguments to find a TagType
     * @example
     * // Get one TagType
     * const tagType = await prisma.tagType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TagType'> extends True ? CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>> : CheckSelect<T, Prisma__TagTypeClient<TagType | null >, Prisma__TagTypeClient<TagTypeGetPayload<T> | null >>

    /**
     * Find zero or more TagTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TagTypes
     * const tagTypes = await prisma.tagType.findMany()
     * 
     * // Get first 10 TagTypes
     * const tagTypes = await prisma.tagType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagTypeWithIdOnly = await prisma.tagType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagTypeFindManyArgs>(
      args?: SelectSubset<T, TagTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TagType>>, PrismaPromise<Array<TagTypeGetPayload<T>>>>

    /**
     * Create a TagType.
     * @param {TagTypeCreateArgs} args - Arguments to create a TagType.
     * @example
     * // Create one TagType
     * const TagType = await prisma.tagType.create({
     *   data: {
     *     // ... data to create a TagType
     *   }
     * })
     * 
    **/
    create<T extends TagTypeCreateArgs>(
      args: SelectSubset<T, TagTypeCreateArgs>
    ): CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>>

    /**
     * Create many TagTypes.
     *     @param {TagTypeCreateManyArgs} args - Arguments to create many TagTypes.
     *     @example
     *     // Create many TagTypes
     *     const tagType = await prisma.tagType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagTypeCreateManyArgs>(
      args?: SelectSubset<T, TagTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TagType.
     * @param {TagTypeDeleteArgs} args - Arguments to delete one TagType.
     * @example
     * // Delete one TagType
     * const TagType = await prisma.tagType.delete({
     *   where: {
     *     // ... filter to delete one TagType
     *   }
     * })
     * 
    **/
    delete<T extends TagTypeDeleteArgs>(
      args: SelectSubset<T, TagTypeDeleteArgs>
    ): CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>>

    /**
     * Update one TagType.
     * @param {TagTypeUpdateArgs} args - Arguments to update one TagType.
     * @example
     * // Update one TagType
     * const tagType = await prisma.tagType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagTypeUpdateArgs>(
      args: SelectSubset<T, TagTypeUpdateArgs>
    ): CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>>

    /**
     * Delete zero or more TagTypes.
     * @param {TagTypeDeleteManyArgs} args - Arguments to filter TagTypes to delete.
     * @example
     * // Delete a few TagTypes
     * const { count } = await prisma.tagType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagTypeDeleteManyArgs>(
      args?: SelectSubset<T, TagTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TagTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TagTypes
     * const tagType = await prisma.tagType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagTypeUpdateManyArgs>(
      args: SelectSubset<T, TagTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TagType.
     * @param {TagTypeUpsertArgs} args - Arguments to update or create a TagType.
     * @example
     * // Update or create a TagType
     * const tagType = await prisma.tagType.upsert({
     *   create: {
     *     // ... data to create a TagType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TagType we want to update
     *   }
     * })
    **/
    upsert<T extends TagTypeUpsertArgs>(
      args: SelectSubset<T, TagTypeUpsertArgs>
    ): CheckSelect<T, Prisma__TagTypeClient<TagType>, Prisma__TagTypeClient<TagTypeGetPayload<T>>>

    /**
     * Count the number of TagTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeCountArgs} args - Arguments to filter TagTypes to count.
     * @example
     * // Count the number of TagTypes
     * const count = await prisma.tagType.count({
     *   where: {
     *     // ... the filter for the TagTypes we want to count
     *   }
     * })
    **/
    count<T extends TagTypeCountArgs>(
      args?: Subset<T, TagTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TagType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagTypeAggregateArgs>(args: Subset<T, TagTypeAggregateArgs>): PrismaPromise<GetTagTypeAggregateType<T>>

    /**
     * Group by TagType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagTypeGroupByArgs['orderBy'] }
        : { orderBy?: TagTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagTypeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TagType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TagType findUnique
   */
  export type TagTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * Throw an Error if a TagType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TagType to fetch.
     * 
    **/
    where: TagTypeWhereUniqueInput
  }


  /**
   * TagType findFirst
   */
  export type TagTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * Throw an Error if a TagType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TagType to fetch.
     * 
    **/
    where?: TagTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<TagTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TagTypes.
     * 
    **/
    cursor?: TagTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TagTypes.
     * 
    **/
    distinct?: Enumerable<TagTypeScalarFieldEnum>
  }


  /**
   * TagType findMany
   */
  export type TagTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * Filter, which TagTypes to fetch.
     * 
    **/
    where?: TagTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TagTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<TagTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TagTypes.
     * 
    **/
    cursor?: TagTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TagTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TagTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagTypeScalarFieldEnum>
  }


  /**
   * TagType create
   */
  export type TagTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * The data needed to create a TagType.
     * 
    **/
    data: XOR<TagTypeCreateInput, TagTypeUncheckedCreateInput>
  }


  /**
   * TagType createMany
   */
  export type TagTypeCreateManyArgs = {
    /**
     * The data used to create many TagTypes.
     * 
    **/
    data: Enumerable<TagTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TagType update
   */
  export type TagTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * The data needed to update a TagType.
     * 
    **/
    data: XOR<TagTypeUpdateInput, TagTypeUncheckedUpdateInput>
    /**
     * Choose, which TagType to update.
     * 
    **/
    where: TagTypeWhereUniqueInput
  }


  /**
   * TagType updateMany
   */
  export type TagTypeUpdateManyArgs = {
    /**
     * The data used to update TagTypes.
     * 
    **/
    data: XOR<TagTypeUpdateManyMutationInput, TagTypeUncheckedUpdateManyInput>
    /**
     * Filter which TagTypes to update
     * 
    **/
    where?: TagTypeWhereInput
  }


  /**
   * TagType upsert
   */
  export type TagTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * The filter to search for the TagType to update in case it exists.
     * 
    **/
    where: TagTypeWhereUniqueInput
    /**
     * In case the TagType found by the `where` argument doesn't exist, create a new TagType with this data.
     * 
    **/
    create: XOR<TagTypeCreateInput, TagTypeUncheckedCreateInput>
    /**
     * In case the TagType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagTypeUpdateInput, TagTypeUncheckedUpdateInput>
  }


  /**
   * TagType delete
   */
  export type TagTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
    /**
     * Filter which TagType to delete.
     * 
    **/
    where: TagTypeWhereUniqueInput
  }


  /**
   * TagType deleteMany
   */
  export type TagTypeDeleteManyArgs = {
    /**
     * Filter which TagTypes to delete
     * 
    **/
    where?: TagTypeWhereInput
  }


  /**
   * TagType without action
   */
  export type TagTypeArgs = {
    /**
     * Select specific fields to fetch from the TagType
     * 
    **/
    select?: TagTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagTypeInclude | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionMinAggregateOutputType = {
    transactionHash: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    transactionHash: string | null
  }

  export type TransactionCountAggregateOutputType = {
    transactionHash: number
    _all: number
  }


  export type TransactionMinAggregateInputType = {
    transactionHash?: true
  }

  export type TransactionMaxAggregateInputType = {
    transactionHash?: true
  }

  export type TransactionCountAggregateInputType = {
    transactionHash?: true
    _all?: true
  }

  export type TransactionAggregateArgs = {
    /**
     * Filter which Transaction to aggregate.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: Array<TransactionScalarFieldEnum>
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    transactionHash: string
    _count: TransactionCountAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect = {
    transactionHash?: boolean
    tags?: boolean | TagFindManyArgs
    payedInvoice?: boolean | InvoiceArgs
    InviteeReward_VerifiedSafe?: boolean | VerifiedSafeArgs
    InviterReward_VerifiedSafe?: boolean | VerifiedSafeArgs
    SwapFunding_VerifiedSafe?: boolean | VerifiedSafeArgs
    _count?: boolean | TransactionCountOutputTypeArgs
  }

  export type TransactionInclude = {
    tags?: boolean | TagFindManyArgs
    payedInvoice?: boolean | InvoiceArgs
    InviteeReward_VerifiedSafe?: boolean | VerifiedSafeArgs
    InviterReward_VerifiedSafe?: boolean | VerifiedSafeArgs
    SwapFunding_VerifiedSafe?: boolean | VerifiedSafeArgs
    _count?: boolean | TransactionCountOutputTypeArgs
  }

  export type TransactionGetPayload<
    S extends boolean | null | undefined | TransactionArgs,
    U = keyof S
      > = S extends true
        ? Transaction
    : S extends undefined
    ? never
    : S extends TransactionArgs | TransactionFindManyArgs
    ?'include' extends U
    ? Transaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tags' ? Array < TagGetPayload<S['include'][P]>>  :
        P extends 'payedInvoice' ? InvoiceGetPayload<S['include'][P]> | null :
        P extends 'InviteeReward_VerifiedSafe' ? VerifiedSafeGetPayload<S['include'][P]> | null :
        P extends 'InviterReward_VerifiedSafe' ? VerifiedSafeGetPayload<S['include'][P]> | null :
        P extends 'SwapFunding_VerifiedSafe' ? VerifiedSafeGetPayload<S['include'][P]> | null :
        P extends '_count' ? TransactionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tags' ? Array < TagGetPayload<S['select'][P]>>  :
        P extends 'payedInvoice' ? InvoiceGetPayload<S['select'][P]> | null :
        P extends 'InviteeReward_VerifiedSafe' ? VerifiedSafeGetPayload<S['select'][P]> | null :
        P extends 'InviterReward_VerifiedSafe' ? VerifiedSafeGetPayload<S['select'][P]> | null :
        P extends 'SwapFunding_VerifiedSafe' ? VerifiedSafeGetPayload<S['select'][P]> | null :
        P extends '_count' ? TransactionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Transaction ? Transaction[P] : never
  } 
    : Transaction
  : Transaction


  type TransactionCountArgs = Merge<
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }
  >

  export interface TransactionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `transactionHash`
     * const transactionWithTransactionHashOnly = await prisma.transaction.findMany({ select: { transactionHash: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs>(
      args?: SelectSubset<T, TransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs>(
      args: SelectSubset<T, TransactionCreateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs>(
      args?: SelectSubset<T, TransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs>(
      args: SelectSubset<T, TransactionDeleteArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs>(
      args: SelectSubset<T, TransactionUpdateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs>(
      args?: SelectSubset<T, TransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs>(
      args: SelectSubset<T, TransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs>(
      args: SelectSubset<T, TransactionUpsertArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tags<T extends TagFindManyArgs = {}>(args?: Subset<T, TagFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>;

    payedInvoice<T extends InvoiceArgs = {}>(args?: Subset<T, InvoiceArgs>): CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>;

    InviteeReward_VerifiedSafe<T extends VerifiedSafeArgs = {}>(args?: Subset<T, VerifiedSafeArgs>): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe | null >, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T> | null >>;

    InviterReward_VerifiedSafe<T extends VerifiedSafeArgs = {}>(args?: Subset<T, VerifiedSafeArgs>): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe | null >, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T> | null >>;

    SwapFunding_VerifiedSafe<T extends VerifiedSafeArgs = {}>(args?: Subset<T, VerifiedSafeArgs>): CheckSelect<T, Prisma__VerifiedSafeClient<VerifiedSafe | null >, Prisma__VerifiedSafeClient<VerifiedSafeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     * 
    **/
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transactions to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to create a Transaction.
     * 
    **/
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs = {
    /**
     * The data used to create many Transactions.
     * 
    **/
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to update a Transaction.
     * 
    **/
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs = {
    /**
     * The data used to update Transactions.
     * 
    **/
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     * 
    **/
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     * 
    **/
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter which Transaction to delete.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs = {
    /**
     * Filter which Transactions to delete
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    chatMessageId: number | null
    offerId: number | null
    offerVersion: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
    createdByProfileId: number | null
    chatMessageId: number | null
    offerId: number | null
    offerVersion: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    createdByProfileId: number | null
    isPrivate: boolean | null
    transactionHash: string | null
    typeId: string | null
    chatMessageId: number | null
    offerId: number | null
    offerVersion: number | null
    value: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    createdByProfileId: number | null
    isPrivate: boolean | null
    transactionHash: string | null
    typeId: string | null
    chatMessageId: number | null
    offerId: number | null
    offerVersion: number | null
    value: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    createdAt: number
    createdByProfileId: number
    isPrivate: number
    transactionHash: number
    typeId: number
    chatMessageId: number
    offerId: number
    offerVersion: number
    value: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
    createdByProfileId?: true
    chatMessageId?: true
    offerId?: true
    offerVersion?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
    createdByProfileId?: true
    chatMessageId?: true
    offerId?: true
    offerVersion?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    isPrivate?: true
    transactionHash?: true
    typeId?: true
    chatMessageId?: true
    offerId?: true
    offerVersion?: true
    value?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    isPrivate?: true
    transactionHash?: true
    typeId?: true
    chatMessageId?: true
    offerId?: true
    offerVersion?: true
    value?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdByProfileId?: true
    isPrivate?: true
    transactionHash?: true
    typeId?: true
    chatMessageId?: true
    offerId?: true
    offerVersion?: true
    value?: true
    _all?: true
  }

  export type TagAggregateArgs = {
    /**
     * Filter which Tag to aggregate.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: Array<TagScalarFieldEnum>
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: number
    createdAt: Date
    createdByProfileId: number
    isPrivate: boolean
    transactionHash: string | null
    typeId: string
    chatMessageId: number | null
    offerId: number | null
    offerVersion: number | null
    value: string | null
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect = {
    id?: boolean
    createdAt?: boolean
    createdBy?: boolean | ProfileArgs
    createdByProfileId?: boolean
    isPrivate?: boolean
    transaction?: boolean | TransactionArgs
    transactionHash?: boolean
    type?: boolean | TagTypeArgs
    typeId?: boolean
    chatMessage?: boolean | ChatMessageArgs
    chatMessageId?: boolean
    offer?: boolean | OfferArgs
    offerId?: boolean
    offerVersion?: boolean
    value?: boolean
  }

  export type TagInclude = {
    createdBy?: boolean | ProfileArgs
    transaction?: boolean | TransactionArgs
    type?: boolean | TagTypeArgs
    chatMessage?: boolean | ChatMessageArgs
    offer?: boolean | OfferArgs
  }

  export type TagGetPayload<
    S extends boolean | null | undefined | TagArgs,
    U = keyof S
      > = S extends true
        ? Tag
    : S extends undefined
    ? never
    : S extends TagArgs | TagFindManyArgs
    ?'include' extends U
    ? Tag  & {
    [P in TrueKeys<S['include']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['include'][P]> :
        P extends 'transaction' ? TransactionGetPayload<S['include'][P]> | null :
        P extends 'type' ? TagTypeGetPayload<S['include'][P]> :
        P extends 'chatMessage' ? ChatMessageGetPayload<S['include'][P]> | null :
        P extends 'offer' ? OfferGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'createdBy' ? ProfileGetPayload<S['select'][P]> :
        P extends 'transaction' ? TransactionGetPayload<S['select'][P]> | null :
        P extends 'type' ? TagTypeGetPayload<S['select'][P]> :
        P extends 'chatMessage' ? ChatMessageGetPayload<S['select'][P]> | null :
        P extends 'offer' ? OfferGetPayload<S['select'][P]> | null :  P extends keyof Tag ? Tag[P] : never
  } 
    : Tag
  : Tag


  type TagCountArgs = Merge<
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }
  >

  export interface TagDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>> : CheckSelect<T, Prisma__TagClient<Tag | null >, Prisma__TagClient<TagGetPayload<T> | null >>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs>(
      args?: SelectSubset<T, TagFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tag>>, PrismaPromise<Array<TagGetPayload<T>>>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs>(
      args: SelectSubset<T, TagCreateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs>(
      args?: SelectSubset<T, TagCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs>(
      args: SelectSubset<T, TagDeleteArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs>(
      args: SelectSubset<T, TagUpdateArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs>(
      args?: SelectSubset<T, TagDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs>(
      args: SelectSubset<T, TagUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs>(
      args: SelectSubset<T, TagUpsertArgs>
    ): CheckSelect<T, Prisma__TagClient<Tag>, Prisma__TagClient<TagGetPayload<T>>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    createdBy<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    transaction<T extends TransactionArgs = {}>(args?: Subset<T, TransactionArgs>): CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>;

    type<T extends TagTypeArgs = {}>(args?: Subset<T, TagTypeArgs>): CheckSelect<T, Prisma__TagTypeClient<TagType | null >, Prisma__TagTypeClient<TagTypeGetPayload<T> | null >>;

    chatMessage<T extends ChatMessageArgs = {}>(args?: Subset<T, ChatMessageArgs>): CheckSelect<T, Prisma__ChatMessageClient<ChatMessage | null >, Prisma__ChatMessageClient<ChatMessageGetPayload<T> | null >>;

    offer<T extends OfferArgs = {}>(args?: Subset<T, OfferArgs>): CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Throw an Error if a Tag can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tag to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to create a Tag.
     * 
    **/
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs = {
    /**
     * The data used to create many Tags.
     * 
    **/
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The data needed to update a Tag.
     * 
    **/
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs = {
    /**
     * The data used to update Tags.
     * 
    **/
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * The filter to search for the Tag to update in case it exists.
     * 
    **/
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     * 
    **/
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
    /**
     * Filter which Tag to delete.
     * 
    **/
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     * 
    **/
    where?: TagWhereInput
  }


  /**
   * Tag without action
   */
  export type TagArgs = {
    /**
     * Select specific fields to fetch from the Tag
     * 
    **/
    select?: TagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagInclude | null
  }



  /**
   * Model Job
   */


  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    kind: string | null
    hash: string | null
    createdAt: Date | null
    timeoutAt: Date | null
    finishedAt: Date | null
    error: string | null
    warning: string | null
    info: string | null
    topic: string | null
    payload: string | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    kind: string | null
    hash: string | null
    createdAt: Date | null
    timeoutAt: Date | null
    finishedAt: Date | null
    error: string | null
    warning: string | null
    info: string | null
    topic: string | null
    payload: string | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    kind: number
    hash: number
    createdAt: number
    timeoutAt: number
    finishedAt: number
    error: number
    warning: number
    info: number
    topic: number
    payload: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    kind?: true
    hash?: true
    createdAt?: true
    timeoutAt?: true
    finishedAt?: true
    error?: true
    warning?: true
    info?: true
    topic?: true
    payload?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    kind?: true
    hash?: true
    createdAt?: true
    timeoutAt?: true
    finishedAt?: true
    error?: true
    warning?: true
    info?: true
    topic?: true
    payload?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    kind?: true
    hash?: true
    createdAt?: true
    timeoutAt?: true
    finishedAt?: true
    error?: true
    warning?: true
    info?: true
    topic?: true
    payload?: true
    _all?: true
  }

  export type JobAggregateArgs = {
    /**
     * Filter which Job to aggregate.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs = {
    where?: JobWhereInput
    orderBy?: Enumerable<JobOrderByWithAggregationInput>
    by: Array<JobScalarFieldEnum>
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }


  export type JobGroupByOutputType = {
    id: number
    kind: string | null
    hash: string
    createdAt: Date
    timeoutAt: Date | null
    finishedAt: Date | null
    error: string | null
    warning: string | null
    info: string | null
    topic: string
    payload: string
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect = {
    id?: boolean
    kind?: boolean
    hash?: boolean
    createdAt?: boolean
    timeoutAt?: boolean
    finishedAt?: boolean
    error?: boolean
    warning?: boolean
    info?: boolean
    topic?: boolean
    payload?: boolean
  }

  export type JobGetPayload<
    S extends boolean | null | undefined | JobArgs,
    U = keyof S
      > = S extends true
        ? Job
    : S extends undefined
    ? never
    : S extends JobArgs | JobFindManyArgs
    ?'include' extends U
    ? Job 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Job ? Job[P] : never
  } 
    : Job
  : Job


  type JobCountArgs = Merge<
    Omit<JobFindManyArgs, 'select' | 'include'> & {
      select?: JobCountAggregateInputType | true
    }
  >

  export interface JobDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Job'> extends True ? CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>> : CheckSelect<T, Prisma__JobClient<Job | null >, Prisma__JobClient<JobGetPayload<T> | null >>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobFindManyArgs>(
      args?: SelectSubset<T, JobFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Job>>, PrismaPromise<Array<JobGetPayload<T>>>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
    **/
    create<T extends JobCreateArgs>(
      args: SelectSubset<T, JobCreateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Create many Jobs.
     *     @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     *     @example
     *     // Create many Jobs
     *     const job = await prisma.job.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobCreateManyArgs>(
      args?: SelectSubset<T, JobCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
    **/
    delete<T extends JobDeleteArgs>(
      args: SelectSubset<T, JobDeleteArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobUpdateArgs>(
      args: SelectSubset<T, JobUpdateArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobDeleteManyArgs>(
      args?: SelectSubset<T, JobDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobUpdateManyArgs>(
      args: SelectSubset<T, JobUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
    **/
    upsert<T extends JobUpsertArgs>(
      args: SelectSubset<T, JobUpsertArgs>
    ): CheckSelect<T, Prisma__JobClient<Job>, Prisma__JobClient<JobGetPayload<T>>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Throw an Error if a Job can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job findFirst
   */
  export type JobFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Throw an Error if a Job can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Job to fetch.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     * 
    **/
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job findMany
   */
  export type JobFindManyArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Filter, which Jobs to fetch.
     * 
    **/
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     * 
    **/
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job create
   */
  export type JobCreateArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * The data needed to create a Job.
     * 
    **/
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }


  /**
   * Job createMany
   */
  export type JobCreateManyArgs = {
    /**
     * The data used to create many Jobs.
     * 
    **/
    data: Enumerable<JobCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Job update
   */
  export type JobUpdateArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * The data needed to update a Job.
     * 
    **/
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs = {
    /**
     * The data used to update Jobs.
     * 
    **/
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     * 
    **/
    where?: JobWhereInput
  }


  /**
   * Job upsert
   */
  export type JobUpsertArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * The filter to search for the Job to update in case it exists.
     * 
    **/
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     * 
    **/
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }


  /**
   * Job delete
   */
  export type JobDeleteArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
    /**
     * Filter which Job to delete.
     * 
    **/
    where: JobWhereUniqueInput
  }


  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs = {
    /**
     * Filter which Jobs to delete
     * 
    **/
    where?: JobWhereInput
  }


  /**
   * Job without action
   */
  export type JobArgs = {
    /**
     * Select specific fields to fetch from the Job
     * 
    **/
    select?: JobSelect | null
  }



  /**
   * Model i18n
   */


  export type AggregateI18n = {
    _count: I18nCountAggregateOutputType | null
    _avg: I18nAvgAggregateOutputType | null
    _sum: I18nSumAggregateOutputType | null
    _min: I18nMinAggregateOutputType | null
    _max: I18nMaxAggregateOutputType | null
  }

  export type I18nAvgAggregateOutputType = {
    version: number | null
  }

  export type I18nSumAggregateOutputType = {
    version: number | null
  }

  export type I18nMinAggregateOutputType = {
    createdAt: Date | null
    createdBy: string | null
    lang: string | null
    key: string | null
    version: number | null
    value: string | null
  }

  export type I18nMaxAggregateOutputType = {
    createdAt: Date | null
    createdBy: string | null
    lang: string | null
    key: string | null
    version: number | null
    value: string | null
  }

  export type I18nCountAggregateOutputType = {
    createdAt: number
    createdBy: number
    lang: number
    key: number
    version: number
    value: number
    _all: number
  }


  export type I18nAvgAggregateInputType = {
    version?: true
  }

  export type I18nSumAggregateInputType = {
    version?: true
  }

  export type I18nMinAggregateInputType = {
    createdAt?: true
    createdBy?: true
    lang?: true
    key?: true
    version?: true
    value?: true
  }

  export type I18nMaxAggregateInputType = {
    createdAt?: true
    createdBy?: true
    lang?: true
    key?: true
    version?: true
    value?: true
  }

  export type I18nCountAggregateInputType = {
    createdAt?: true
    createdBy?: true
    lang?: true
    key?: true
    version?: true
    value?: true
    _all?: true
  }

  export type I18nAggregateArgs = {
    /**
     * Filter which i18n to aggregate.
     * 
    **/
    where?: i18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of i18ns to fetch.
     * 
    **/
    orderBy?: Enumerable<i18nOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: i18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` i18ns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` i18ns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned i18ns
    **/
    _count?: true | I18nCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: I18nAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: I18nSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: I18nMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: I18nMaxAggregateInputType
  }

  export type GetI18nAggregateType<T extends I18nAggregateArgs> = {
        [P in keyof T & keyof AggregateI18n]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateI18n[P]>
      : GetScalarType<T[P], AggregateI18n[P]>
  }




  export type I18nGroupByArgs = {
    where?: i18nWhereInput
    orderBy?: Enumerable<i18nOrderByWithAggregationInput>
    by: Array<I18nScalarFieldEnum>
    having?: i18nScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: I18nCountAggregateInputType | true
    _avg?: I18nAvgAggregateInputType
    _sum?: I18nSumAggregateInputType
    _min?: I18nMinAggregateInputType
    _max?: I18nMaxAggregateInputType
  }


  export type I18nGroupByOutputType = {
    createdAt: Date
    createdBy: string
    lang: string
    key: string
    version: number
    value: string
    _count: I18nCountAggregateOutputType | null
    _avg: I18nAvgAggregateOutputType | null
    _sum: I18nSumAggregateOutputType | null
    _min: I18nMinAggregateOutputType | null
    _max: I18nMaxAggregateOutputType | null
  }

  type GetI18nGroupByPayload<T extends I18nGroupByArgs> = PrismaPromise<
    Array<
      PickArray<I18nGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof I18nGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], I18nGroupByOutputType[P]>
            : GetScalarType<T[P], I18nGroupByOutputType[P]>
        }
      >
    >


  export type i18nSelect = {
    createdAt?: boolean
    createdBy?: boolean
    lang?: boolean
    key?: boolean
    version?: boolean
    value?: boolean
  }

  export type i18nGetPayload<
    S extends boolean | null | undefined | i18nArgs,
    U = keyof S
      > = S extends true
        ? i18n
    : S extends undefined
    ? never
    : S extends i18nArgs | i18nFindManyArgs
    ?'include' extends U
    ? i18n 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof i18n ? i18n[P] : never
  } 
    : i18n
  : i18n


  type i18nCountArgs = Merge<
    Omit<i18nFindManyArgs, 'select' | 'include'> & {
      select?: I18nCountAggregateInputType | true
    }
  >

  export interface i18nDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one I18n that matches the filter.
     * @param {i18nFindUniqueArgs} args - Arguments to find a I18n
     * @example
     * // Get one I18n
     * const i18n = await prisma.i18n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends i18nFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, i18nFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'i18n'> extends True ? CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>> : CheckSelect<T, Prisma__i18nClient<i18n | null >, Prisma__i18nClient<i18nGetPayload<T> | null >>

    /**
     * Find the first I18n that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {i18nFindFirstArgs} args - Arguments to find a I18n
     * @example
     * // Get one I18n
     * const i18n = await prisma.i18n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends i18nFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, i18nFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'i18n'> extends True ? CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>> : CheckSelect<T, Prisma__i18nClient<i18n | null >, Prisma__i18nClient<i18nGetPayload<T> | null >>

    /**
     * Find zero or more I18ns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {i18nFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all I18ns
     * const i18ns = await prisma.i18n.findMany()
     * 
     * // Get first 10 I18ns
     * const i18ns = await prisma.i18n.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const i18nWithCreatedAtOnly = await prisma.i18n.findMany({ select: { createdAt: true } })
     * 
    **/
    findMany<T extends i18nFindManyArgs>(
      args?: SelectSubset<T, i18nFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<i18n>>, PrismaPromise<Array<i18nGetPayload<T>>>>

    /**
     * Create a I18n.
     * @param {i18nCreateArgs} args - Arguments to create a I18n.
     * @example
     * // Create one I18n
     * const I18n = await prisma.i18n.create({
     *   data: {
     *     // ... data to create a I18n
     *   }
     * })
     * 
    **/
    create<T extends i18nCreateArgs>(
      args: SelectSubset<T, i18nCreateArgs>
    ): CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>>

    /**
     * Create many I18ns.
     *     @param {i18nCreateManyArgs} args - Arguments to create many I18ns.
     *     @example
     *     // Create many I18ns
     *     const i18n = await prisma.i18n.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends i18nCreateManyArgs>(
      args?: SelectSubset<T, i18nCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a I18n.
     * @param {i18nDeleteArgs} args - Arguments to delete one I18n.
     * @example
     * // Delete one I18n
     * const I18n = await prisma.i18n.delete({
     *   where: {
     *     // ... filter to delete one I18n
     *   }
     * })
     * 
    **/
    delete<T extends i18nDeleteArgs>(
      args: SelectSubset<T, i18nDeleteArgs>
    ): CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>>

    /**
     * Update one I18n.
     * @param {i18nUpdateArgs} args - Arguments to update one I18n.
     * @example
     * // Update one I18n
     * const i18n = await prisma.i18n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends i18nUpdateArgs>(
      args: SelectSubset<T, i18nUpdateArgs>
    ): CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>>

    /**
     * Delete zero or more I18ns.
     * @param {i18nDeleteManyArgs} args - Arguments to filter I18ns to delete.
     * @example
     * // Delete a few I18ns
     * const { count } = await prisma.i18n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends i18nDeleteManyArgs>(
      args?: SelectSubset<T, i18nDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more I18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {i18nUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many I18ns
     * const i18n = await prisma.i18n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends i18nUpdateManyArgs>(
      args: SelectSubset<T, i18nUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one I18n.
     * @param {i18nUpsertArgs} args - Arguments to update or create a I18n.
     * @example
     * // Update or create a I18n
     * const i18n = await prisma.i18n.upsert({
     *   create: {
     *     // ... data to create a I18n
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the I18n we want to update
     *   }
     * })
    **/
    upsert<T extends i18nUpsertArgs>(
      args: SelectSubset<T, i18nUpsertArgs>
    ): CheckSelect<T, Prisma__i18nClient<i18n>, Prisma__i18nClient<i18nGetPayload<T>>>

    /**
     * Count the number of I18ns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {i18nCountArgs} args - Arguments to filter I18ns to count.
     * @example
     * // Count the number of I18ns
     * const count = await prisma.i18n.count({
     *   where: {
     *     // ... the filter for the I18ns we want to count
     *   }
     * })
    **/
    count<T extends i18nCountArgs>(
      args?: Subset<T, i18nCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], I18nCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a I18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {I18nAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends I18nAggregateArgs>(args: Subset<T, I18nAggregateArgs>): PrismaPromise<GetI18nAggregateType<T>>

    /**
     * Group by I18n.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {I18nGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends I18nGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: I18nGroupByArgs['orderBy'] }
        : { orderBy?: I18nGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, I18nGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetI18nGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for i18n.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__i18nClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * i18n findUnique
   */
  export type i18nFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * Throw an Error if a i18n can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which i18n to fetch.
     * 
    **/
    where: i18nWhereUniqueInput
  }


  /**
   * i18n findFirst
   */
  export type i18nFindFirstArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * Throw an Error if a i18n can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which i18n to fetch.
     * 
    **/
    where?: i18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of i18ns to fetch.
     * 
    **/
    orderBy?: Enumerable<i18nOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for i18ns.
     * 
    **/
    cursor?: i18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` i18ns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` i18ns.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of i18ns.
     * 
    **/
    distinct?: Enumerable<I18nScalarFieldEnum>
  }


  /**
   * i18n findMany
   */
  export type i18nFindManyArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * Filter, which i18ns to fetch.
     * 
    **/
    where?: i18nWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of i18ns to fetch.
     * 
    **/
    orderBy?: Enumerable<i18nOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing i18ns.
     * 
    **/
    cursor?: i18nWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` i18ns from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` i18ns.
     * 
    **/
    skip?: number
    distinct?: Enumerable<I18nScalarFieldEnum>
  }


  /**
   * i18n create
   */
  export type i18nCreateArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * The data needed to create a i18n.
     * 
    **/
    data: XOR<i18nCreateInput, i18nUncheckedCreateInput>
  }


  /**
   * i18n createMany
   */
  export type i18nCreateManyArgs = {
    /**
     * The data used to create many i18ns.
     * 
    **/
    data: Enumerable<i18nCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * i18n update
   */
  export type i18nUpdateArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * The data needed to update a i18n.
     * 
    **/
    data: XOR<i18nUpdateInput, i18nUncheckedUpdateInput>
    /**
     * Choose, which i18n to update.
     * 
    **/
    where: i18nWhereUniqueInput
  }


  /**
   * i18n updateMany
   */
  export type i18nUpdateManyArgs = {
    /**
     * The data used to update i18ns.
     * 
    **/
    data: XOR<i18nUpdateManyMutationInput, i18nUncheckedUpdateManyInput>
    /**
     * Filter which i18ns to update
     * 
    **/
    where?: i18nWhereInput
  }


  /**
   * i18n upsert
   */
  export type i18nUpsertArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * The filter to search for the i18n to update in case it exists.
     * 
    **/
    where: i18nWhereUniqueInput
    /**
     * In case the i18n found by the `where` argument doesn't exist, create a new i18n with this data.
     * 
    **/
    create: XOR<i18nCreateInput, i18nUncheckedCreateInput>
    /**
     * In case the i18n was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<i18nUpdateInput, i18nUncheckedUpdateInput>
  }


  /**
   * i18n delete
   */
  export type i18nDeleteArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
    /**
     * Filter which i18n to delete.
     * 
    **/
    where: i18nWhereUniqueInput
  }


  /**
   * i18n deleteMany
   */
  export type i18nDeleteManyArgs = {
    /**
     * Filter which i18ns to delete
     * 
    **/
    where?: i18nWhereInput
  }


  /**
   * i18n without action
   */
  export type i18nArgs = {
    /**
     * Select specific fields to fetch from the i18n
     * 
    **/
    select?: i18nSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    emailAddress: 'emailAddress',
    ethAddress: 'ethAddress',
    challengeHash: 'challengeHash',
    signature: 'signature',
    profileId: 'profileId',
    issuedBy: 'issuedBy',
    jti: 'jti',
    createdAt: 'createdAt',
    validFrom: 'validFrom',
    endedAt: 'endedAt',
    endReason: 'endReason',
    maxLifetime: 'maxLifetime'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    createdByProfileId: 'createdByProfileId',
    createdAt: 'createdAt',
    fundedAt: 'fundedAt',
    name: 'name',
    code: 'code',
    claimedByProfileId: 'claimedByProfileId',
    claimedAt: 'claimedAt',
    redeemedByProfileId: 'redeemedByProfileId',
    redeemedAt: 'redeemedAt',
    redeemTxHash: 'redeemTxHash',
    forSafeAddress: 'forSafeAddress',
    address: 'address',
    key: 'key'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const InvitationFundsEOAScalarFieldEnum: {
    id: 'id',
    address: 'address',
    privateKey: 'privateKey',
    profileId: 'profileId'
  };

  export type InvitationFundsEOAScalarFieldEnum = (typeof InvitationFundsEOAScalarFieldEnum)[keyof typeof InvitationFundsEOAScalarFieldEnum]


  export const VerifiedSafeScalarFieldEnum: {
    safeAddress: 'safeAddress',
    createdAt: 'createdAt',
    createdByProfileId: 'createdByProfileId',
    createdByOrganisationId: 'createdByOrganisationId',
    revokedAt: 'revokedAt',
    revokedByProfileId: 'revokedByProfileId',
    swapEoaAddress: 'swapEoaAddress',
    swapEoaKey: 'swapEoaKey',
    rewardProcessingStartedAt: 'rewardProcessingStartedAt',
    rewardProcessingWorker: 'rewardProcessingWorker',
    inviteeRewardTransactionHash: 'inviteeRewardTransactionHash',
    inviterRewardTransactionHash: 'inviterRewardTransactionHash',
    swapFundingTransactionHash: 'swapFundingTransactionHash',
    inviteCount: 'inviteCount'
  };

  export type VerifiedSafeScalarFieldEnum = (typeof VerifiedSafeScalarFieldEnum)[keyof typeof VerifiedSafeScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    lastUpdateAt: 'lastUpdateAt',
    emailAddress: 'emailAddress',
    askedForEmailAddress: 'askedForEmailAddress',
    emailAddressVerified: 'emailAddressVerified',
    verifyEmailChallenge: 'verifyEmailChallenge',
    createdAt: 'createdAt',
    status: 'status',
    type: 'type',
    successorOfCirclesAddress: 'successorOfCirclesAddress',
    circlesAddress: 'circlesAddress',
    circlesSafeOwner: 'circlesSafeOwner',
    circlesTokenAddress: 'circlesTokenAddress',
    firstName: 'firstName',
    lastName: 'lastName',
    avatarUrl: 'avatarUrl',
    avatarCid: 'avatarCid',
    avatarMimeType: 'avatarMimeType',
    dream: 'dream',
    country: 'country',
    newsletter: 'newsletter',
    displayTimeCircles: 'displayTimeCircles',
    cityGeonameid: 'cityGeonameid',
    lastAcknowledged: 'lastAcknowledged',
    verifySafeChallenge: 'verifySafeChallenge',
    newSafeAddress: 'newSafeAddress',
    invoiceNoPrefix: 'invoiceNoPrefix',
    lastInvoiceNo: 'lastInvoiceNo',
    refundNoPrefix: 'refundNoPrefix',
    lastRefundNo: 'lastRefundNo',
    displayCurrency: 'displayCurrency'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ExternalProfilesScalarFieldEnum: {
    circlesAddress: 'circlesAddress',
    name: 'name',
    avatarUrl: 'avatarUrl'
  };

  export type ExternalProfilesScalarFieldEnum = (typeof ExternalProfilesScalarFieldEnum)[keyof typeof ExternalProfilesScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdByProfileId: 'createdByProfileId',
    acceptedAt: 'acceptedAt',
    rejectedAt: 'rejectedAt',
    validTo: 'validTo',
    isAdmin: 'isAdmin',
    memberAddress: 'memberAddress',
    memberAtId: 'memberAtId'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    openedAt: 'openedAt',
    from: 'from',
    to: 'to',
    text: 'text'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const DelegatedChallengesScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    appId: 'appId',
    sessionId: 'sessionId',
    requestValidTo: 'requestValidTo',
    delegateAuthCode: 'delegateAuthCode',
    challenge: 'challenge',
    challengeDepositedAt: 'challengeDepositedAt',
    challengeValidTo: 'challengeValidTo',
    challengedReadAt: 'challengedReadAt'
  };

  export type DelegatedChallengesScalarFieldEnum = (typeof DelegatedChallengesScalarFieldEnum)[keyof typeof DelegatedChallengesScalarFieldEnum]


  export const OfferScalarFieldEnum: {
    id: 'id',
    version: 'version',
    createdByProfileId: 'createdByProfileId',
    createdAt: 'createdAt',
    title: 'title',
    pictureUrl: 'pictureUrl',
    pictureMimeType: 'pictureMimeType',
    description: 'description',
    pricePerUnit: 'pricePerUnit',
    timeCirclesPriceShare: 'timeCirclesPriceShare'
  };

  export type OfferScalarFieldEnum = (typeof OfferScalarFieldEnum)[keyof typeof OfferScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    id: 'id',
    createdByProfileId: 'createdByProfileId',
    createdAt: 'createdAt'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const PurchaseLineScalarFieldEnum: {
    id: 'id',
    purchaseId: 'purchaseId',
    amount: 'amount',
    productId: 'productId',
    productVersion: 'productVersion'
  };

  export type PurchaseLineScalarFieldEnum = (typeof PurchaseLineScalarFieldEnum)[keyof typeof PurchaseLineScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    invoiceNo: 'invoiceNo',
    customerProfileId: 'customerProfileId',
    sellerProfileId: 'sellerProfileId',
    purchaseId: 'purchaseId',
    pendingPaymentTransactionHash: 'pendingPaymentTransactionHash',
    paymentTransactionHash: 'paymentTransactionHash',
    pickupCode: 'pickupCode',
    buyerSignature: 'buyerSignature',
    buyerSignedDate: 'buyerSignedDate',
    sellerSignature: 'sellerSignature',
    sellerSignedDate: 'sellerSignedDate',
    cancelledAt: 'cancelledAt',
    cancelledByProfileId: 'cancelledByProfileId',
    cancelReason: 'cancelReason'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceLineScalarFieldEnum: {
    id: 'id',
    invoiceId: 'invoiceId',
    amount: 'amount',
    productId: 'productId',
    productVersion: 'productVersion'
  };

  export type InvoiceLineScalarFieldEnum = (typeof InvoiceLineScalarFieldEnum)[keyof typeof InvoiceLineScalarFieldEnum]


  export const TagTypeScalarFieldEnum: {
    id: 'id'
  };

  export type TagTypeScalarFieldEnum = (typeof TagTypeScalarFieldEnum)[keyof typeof TagTypeScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    transactionHash: 'transactionHash'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdByProfileId: 'createdByProfileId',
    isPrivate: 'isPrivate',
    transactionHash: 'transactionHash',
    typeId: 'typeId',
    chatMessageId: 'chatMessageId',
    offerId: 'offerId',
    offerVersion: 'offerVersion',
    value: 'value'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    kind: 'kind',
    hash: 'hash',
    createdAt: 'createdAt',
    timeoutAt: 'timeoutAt',
    finishedAt: 'finishedAt',
    error: 'error',
    warning: 'warning',
    info: 'info',
    topic: 'topic',
    payload: 'payload'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const I18nScalarFieldEnum: {
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    lang: 'lang',
    key: 'key',
    version: 'version',
    value: 'value'
  };

  export type I18nScalarFieldEnum = (typeof I18nScalarFieldEnum)[keyof typeof I18nScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    emailAddress?: StringNullableFilter | string | null
    ethAddress?: StringNullableFilter | string | null
    challengeHash?: StringNullableFilter | string | null
    signature?: StringNullableFilter | string | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    profileId?: IntNullableFilter | number | null
    issuedBy?: StringFilter | string
    jti?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    validFrom?: DateTimeNullableFilter | Date | string | null
    endedAt?: DateTimeNullableFilter | Date | string | null
    endReason?: StringNullableFilter | string | null
    maxLifetime?: IntFilter | number
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    emailAddress?: SortOrder
    ethAddress?: SortOrder
    challengeHash?: SortOrder
    signature?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    profileId?: SortOrder
    issuedBy?: SortOrder
    jti?: SortOrder
    createdAt?: SortOrder
    validFrom?: SortOrder
    endedAt?: SortOrder
    endReason?: SortOrder
    maxLifetime?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    emailAddress?: SortOrder
    ethAddress?: SortOrder
    challengeHash?: SortOrder
    signature?: SortOrder
    profileId?: SortOrder
    issuedBy?: SortOrder
    jti?: SortOrder
    createdAt?: SortOrder
    validFrom?: SortOrder
    endedAt?: SortOrder
    endReason?: SortOrder
    maxLifetime?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    emailAddress?: StringNullableWithAggregatesFilter | string | null
    ethAddress?: StringNullableWithAggregatesFilter | string | null
    challengeHash?: StringNullableWithAggregatesFilter | string | null
    signature?: StringNullableWithAggregatesFilter | string | null
    profileId?: IntNullableWithAggregatesFilter | number | null
    issuedBy?: StringWithAggregatesFilter | string
    jti?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    validFrom?: DateTimeNullableWithAggregatesFilter | Date | string | null
    endedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    endReason?: StringNullableWithAggregatesFilter | string | null
    maxLifetime?: IntWithAggregatesFilter | number
  }

  export type InvitationWhereInput = {
    AND?: Enumerable<InvitationWhereInput>
    OR?: Enumerable<InvitationWhereInput>
    NOT?: Enumerable<InvitationWhereInput>
    id?: IntFilter | number
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    fundedAt?: DateTimeNullableFilter | Date | string | null
    name?: StringFilter | string
    code?: StringFilter | string
    claimedBy?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    claimedByProfileId?: IntNullableFilter | number | null
    claimedAt?: DateTimeNullableFilter | Date | string | null
    redeemedBy?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    redeemedByProfileId?: IntNullableFilter | number | null
    redeemedAt?: DateTimeNullableFilter | Date | string | null
    redeemTxHash?: StringNullableFilter | string | null
    forSafeAddress?: StringNullableFilter | string | null
    address?: StringFilter | string
    key?: StringFilter | string
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    fundedAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    claimedBy?: ProfileOrderByWithRelationInput
    claimedByProfileId?: SortOrder
    claimedAt?: SortOrder
    redeemedBy?: ProfileOrderByWithRelationInput
    redeemedByProfileId?: SortOrder
    redeemedAt?: SortOrder
    redeemTxHash?: SortOrder
    forSafeAddress?: SortOrder
    address?: SortOrder
    key?: SortOrder
  }

  export type InvitationWhereUniqueInput = {
    id?: number
  }

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    fundedAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    claimedByProfileId?: SortOrder
    claimedAt?: SortOrder
    redeemedByProfileId?: SortOrder
    redeemedAt?: SortOrder
    redeemTxHash?: SortOrder
    forSafeAddress?: SortOrder
    address?: SortOrder
    key?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _avg?: InvitationAvgOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
    _sum?: InvitationSumOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvitationScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvitationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvitationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdByProfileId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    fundedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    name?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    claimedByProfileId?: IntNullableWithAggregatesFilter | number | null
    claimedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    redeemedByProfileId?: IntNullableWithAggregatesFilter | number | null
    redeemedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    redeemTxHash?: StringNullableWithAggregatesFilter | string | null
    forSafeAddress?: StringNullableWithAggregatesFilter | string | null
    address?: StringWithAggregatesFilter | string
    key?: StringWithAggregatesFilter | string
  }

  export type InvitationFundsEOAWhereInput = {
    AND?: Enumerable<InvitationFundsEOAWhereInput>
    OR?: Enumerable<InvitationFundsEOAWhereInput>
    NOT?: Enumerable<InvitationFundsEOAWhereInput>
    id?: IntFilter | number
    address?: StringFilter | string
    privateKey?: StringFilter | string
    profileId?: IntFilter | number
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
  }

  export type InvitationFundsEOAOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    privateKey?: SortOrder
    profileId?: SortOrder
    profile?: ProfileOrderByWithRelationInput
  }

  export type InvitationFundsEOAWhereUniqueInput = {
    id?: number
    profileId?: number
  }

  export type InvitationFundsEOAOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    privateKey?: SortOrder
    profileId?: SortOrder
    _count?: InvitationFundsEOACountOrderByAggregateInput
    _avg?: InvitationFundsEOAAvgOrderByAggregateInput
    _max?: InvitationFundsEOAMaxOrderByAggregateInput
    _min?: InvitationFundsEOAMinOrderByAggregateInput
    _sum?: InvitationFundsEOASumOrderByAggregateInput
  }

  export type InvitationFundsEOAScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvitationFundsEOAScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvitationFundsEOAScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvitationFundsEOAScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    privateKey?: StringWithAggregatesFilter | string
    profileId?: IntWithAggregatesFilter | number
  }

  export type VerifiedSafeWhereInput = {
    AND?: Enumerable<VerifiedSafeWhereInput>
    OR?: Enumerable<VerifiedSafeWhereInput>
    NOT?: Enumerable<VerifiedSafeWhereInput>
    safeAddress?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    createdByOrganisation?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByOrganisationId?: IntFilter | number
    revokedAt?: DateTimeNullableFilter | Date | string | null
    revokedByProfileId?: IntNullableFilter | number | null
    revokedBy?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    swapEoaAddress?: StringFilter | string
    swapEoaKey?: StringFilter | string
    rewardProcessingStartedAt?: DateTimeNullableFilter | Date | string | null
    rewardProcessingWorker?: StringNullableFilter | string | null
    inviteeRewardTransaction?: XOR<TransactionRelationFilter, TransactionWhereInput> | null
    inviteeRewardTransactionHash?: StringNullableFilter | string | null
    inviterRewardTransaction?: XOR<TransactionRelationFilter, TransactionWhereInput> | null
    inviterRewardTransactionHash?: StringNullableFilter | string | null
    swapFundingTransaction?: XOR<TransactionRelationFilter, TransactionWhereInput> | null
    swapFundingTransactionHash?: StringNullableFilter | string | null
    inviteCount?: IntFilter | number
  }

  export type VerifiedSafeOrderByWithRelationInput = {
    safeAddress?: SortOrder
    createdAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    createdByOrganisation?: ProfileOrderByWithRelationInput
    createdByOrganisationId?: SortOrder
    revokedAt?: SortOrder
    revokedByProfileId?: SortOrder
    revokedBy?: ProfileOrderByWithRelationInput
    swapEoaAddress?: SortOrder
    swapEoaKey?: SortOrder
    rewardProcessingStartedAt?: SortOrder
    rewardProcessingWorker?: SortOrder
    inviteeRewardTransaction?: TransactionOrderByWithRelationInput
    inviteeRewardTransactionHash?: SortOrder
    inviterRewardTransaction?: TransactionOrderByWithRelationInput
    inviterRewardTransactionHash?: SortOrder
    swapFundingTransaction?: TransactionOrderByWithRelationInput
    swapFundingTransactionHash?: SortOrder
    inviteCount?: SortOrder
  }

  export type VerifiedSafeWhereUniqueInput = {
    safeAddress?: string
    inviteeRewardTransactionHash?: string
    inviterRewardTransactionHash?: string
    swapFundingTransactionHash?: string
  }

  export type VerifiedSafeOrderByWithAggregationInput = {
    safeAddress?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedAt?: SortOrder
    revokedByProfileId?: SortOrder
    swapEoaAddress?: SortOrder
    swapEoaKey?: SortOrder
    rewardProcessingStartedAt?: SortOrder
    rewardProcessingWorker?: SortOrder
    inviteeRewardTransactionHash?: SortOrder
    inviterRewardTransactionHash?: SortOrder
    swapFundingTransactionHash?: SortOrder
    inviteCount?: SortOrder
    _count?: VerifiedSafeCountOrderByAggregateInput
    _avg?: VerifiedSafeAvgOrderByAggregateInput
    _max?: VerifiedSafeMaxOrderByAggregateInput
    _min?: VerifiedSafeMinOrderByAggregateInput
    _sum?: VerifiedSafeSumOrderByAggregateInput
  }

  export type VerifiedSafeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerifiedSafeScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerifiedSafeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerifiedSafeScalarWhereWithAggregatesInput>
    safeAddress?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    createdByProfileId?: IntWithAggregatesFilter | number
    createdByOrganisationId?: IntWithAggregatesFilter | number
    revokedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    revokedByProfileId?: IntNullableWithAggregatesFilter | number | null
    swapEoaAddress?: StringWithAggregatesFilter | string
    swapEoaKey?: StringWithAggregatesFilter | string
    rewardProcessingStartedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    rewardProcessingWorker?: StringNullableWithAggregatesFilter | string | null
    inviteeRewardTransactionHash?: StringNullableWithAggregatesFilter | string | null
    inviterRewardTransactionHash?: StringNullableWithAggregatesFilter | string | null
    swapFundingTransactionHash?: StringNullableWithAggregatesFilter | string | null
    inviteCount?: IntWithAggregatesFilter | number
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    lastUpdateAt?: DateTimeFilter | Date | string
    emailAddress?: StringNullableFilter | string | null
    askedForEmailAddress?: BoolFilter | boolean
    emailAddressVerified?: BoolNullableFilter | boolean | null
    verifyEmailChallenge?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    status?: StringNullableFilter | string | null
    type?: EnumProfileTypeNullableFilter | ProfileType | null
    successorOfCirclesAddress?: StringNullableFilter | string | null
    circlesAddress?: StringNullableFilter | string | null
    circlesSafeOwner?: StringNullableFilter | string | null
    circlesTokenAddress?: StringNullableFilter | string | null
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    avatarUrl?: StringNullableFilter | string | null
    avatarCid?: StringNullableFilter | string | null
    avatarMimeType?: StringNullableFilter | string | null
    dream?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    newsletter?: BoolNullableFilter | boolean | null
    displayTimeCircles?: BoolNullableFilter | boolean | null
    cityGeonameid?: IntNullableFilter | number | null
    lastAcknowledged?: DateTimeNullableFilter | Date | string | null
    verifySafeChallenge?: StringNullableFilter | string | null
    newSafeAddress?: StringNullableFilter | string | null
    sessions?: SessionListRelationFilter
    tags?: TagListRelationFilter
    offers?: OfferListRelationFilter
    purchases?: PurchaseListRelationFilter
    invitations?: InvitationListRelationFilter
    invitationFunds?: XOR<InvitationFundsEOARelationFilter, InvitationFundsEOAWhereInput> | null
    redeemedInvitations?: InvitationListRelationFilter
    claimedInvitations?: InvitationListRelationFilter
    members?: MembershipListRelationFilter
    createdMemberships?: MembershipListRelationFilter
    payableInvoices?: InvoiceListRelationFilter
    receivableInvoices?: InvoiceListRelationFilter
    cancelledInvoices?: InvoiceListRelationFilter
    invoiceNoPrefix?: StringNullableFilter | string | null
    lastInvoiceNo?: IntNullableFilter | number | null
    refundNoPrefix?: StringNullableFilter | string | null
    lastRefundNo?: IntNullableFilter | number | null
    displayCurrency?: StringFilter | string
    safesVerifiedByPerson?: VerifiedSafeListRelationFilter
    safesVerifiedByOrganisation?: VerifiedSafeListRelationFilter
    safesRevokedByPerson?: VerifiedSafeListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    lastUpdateAt?: SortOrder
    emailAddress?: SortOrder
    askedForEmailAddress?: SortOrder
    emailAddressVerified?: SortOrder
    verifyEmailChallenge?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    successorOfCirclesAddress?: SortOrder
    circlesAddress?: SortOrder
    circlesSafeOwner?: SortOrder
    circlesTokenAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    avatarCid?: SortOrder
    avatarMimeType?: SortOrder
    dream?: SortOrder
    country?: SortOrder
    newsletter?: SortOrder
    displayTimeCircles?: SortOrder
    cityGeonameid?: SortOrder
    lastAcknowledged?: SortOrder
    verifySafeChallenge?: SortOrder
    newSafeAddress?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    offers?: OfferOrderByRelationAggregateInput
    purchases?: PurchaseOrderByRelationAggregateInput
    invitations?: InvitationOrderByRelationAggregateInput
    invitationFunds?: InvitationFundsEOAOrderByWithRelationInput
    redeemedInvitations?: InvitationOrderByRelationAggregateInput
    claimedInvitations?: InvitationOrderByRelationAggregateInput
    members?: MembershipOrderByRelationAggregateInput
    createdMemberships?: MembershipOrderByRelationAggregateInput
    payableInvoices?: InvoiceOrderByRelationAggregateInput
    receivableInvoices?: InvoiceOrderByRelationAggregateInput
    cancelledInvoices?: InvoiceOrderByRelationAggregateInput
    invoiceNoPrefix?: SortOrder
    lastInvoiceNo?: SortOrder
    refundNoPrefix?: SortOrder
    lastRefundNo?: SortOrder
    displayCurrency?: SortOrder
    safesVerifiedByPerson?: VerifiedSafeOrderByRelationAggregateInput
    safesVerifiedByOrganisation?: VerifiedSafeOrderByRelationAggregateInput
    safesRevokedByPerson?: VerifiedSafeOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = {
    id?: number
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    lastUpdateAt?: SortOrder
    emailAddress?: SortOrder
    askedForEmailAddress?: SortOrder
    emailAddressVerified?: SortOrder
    verifyEmailChallenge?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    successorOfCirclesAddress?: SortOrder
    circlesAddress?: SortOrder
    circlesSafeOwner?: SortOrder
    circlesTokenAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    avatarCid?: SortOrder
    avatarMimeType?: SortOrder
    dream?: SortOrder
    country?: SortOrder
    newsletter?: SortOrder
    displayTimeCircles?: SortOrder
    cityGeonameid?: SortOrder
    lastAcknowledged?: SortOrder
    verifySafeChallenge?: SortOrder
    newSafeAddress?: SortOrder
    invoiceNoPrefix?: SortOrder
    lastInvoiceNo?: SortOrder
    refundNoPrefix?: SortOrder
    lastRefundNo?: SortOrder
    displayCurrency?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    lastUpdateAt?: DateTimeWithAggregatesFilter | Date | string
    emailAddress?: StringNullableWithAggregatesFilter | string | null
    askedForEmailAddress?: BoolWithAggregatesFilter | boolean
    emailAddressVerified?: BoolNullableWithAggregatesFilter | boolean | null
    verifyEmailChallenge?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    status?: StringNullableWithAggregatesFilter | string | null
    type?: EnumProfileTypeNullableWithAggregatesFilter | ProfileType | null
    successorOfCirclesAddress?: StringNullableWithAggregatesFilter | string | null
    circlesAddress?: StringNullableWithAggregatesFilter | string | null
    circlesSafeOwner?: StringNullableWithAggregatesFilter | string | null
    circlesTokenAddress?: StringNullableWithAggregatesFilter | string | null
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringNullableWithAggregatesFilter | string | null
    avatarUrl?: StringNullableWithAggregatesFilter | string | null
    avatarCid?: StringNullableWithAggregatesFilter | string | null
    avatarMimeType?: StringNullableWithAggregatesFilter | string | null
    dream?: StringNullableWithAggregatesFilter | string | null
    country?: StringNullableWithAggregatesFilter | string | null
    newsletter?: BoolNullableWithAggregatesFilter | boolean | null
    displayTimeCircles?: BoolNullableWithAggregatesFilter | boolean | null
    cityGeonameid?: IntNullableWithAggregatesFilter | number | null
    lastAcknowledged?: DateTimeNullableWithAggregatesFilter | Date | string | null
    verifySafeChallenge?: StringNullableWithAggregatesFilter | string | null
    newSafeAddress?: StringNullableWithAggregatesFilter | string | null
    invoiceNoPrefix?: StringNullableWithAggregatesFilter | string | null
    lastInvoiceNo?: IntNullableWithAggregatesFilter | number | null
    refundNoPrefix?: StringNullableWithAggregatesFilter | string | null
    lastRefundNo?: IntNullableWithAggregatesFilter | number | null
    displayCurrency?: StringWithAggregatesFilter | string
  }

  export type ExternalProfilesWhereInput = {
    AND?: Enumerable<ExternalProfilesWhereInput>
    OR?: Enumerable<ExternalProfilesWhereInput>
    NOT?: Enumerable<ExternalProfilesWhereInput>
    circlesAddress?: StringFilter | string
    name?: StringFilter | string
    avatarUrl?: StringNullableFilter | string | null
  }

  export type ExternalProfilesOrderByWithRelationInput = {
    circlesAddress?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
  }

  export type ExternalProfilesWhereUniqueInput = {
    circlesAddress?: string
  }

  export type ExternalProfilesOrderByWithAggregationInput = {
    circlesAddress?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    _count?: ExternalProfilesCountOrderByAggregateInput
    _max?: ExternalProfilesMaxOrderByAggregateInput
    _min?: ExternalProfilesMinOrderByAggregateInput
  }

  export type ExternalProfilesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExternalProfilesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExternalProfilesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExternalProfilesScalarWhereWithAggregatesInput>
    circlesAddress?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    avatarUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type MembershipWhereInput = {
    AND?: Enumerable<MembershipWhereInput>
    OR?: Enumerable<MembershipWhereInput>
    NOT?: Enumerable<MembershipWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    acceptedAt?: DateTimeNullableFilter | Date | string | null
    rejectedAt?: DateTimeNullableFilter | Date | string | null
    validTo?: DateTimeNullableFilter | Date | string | null
    isAdmin?: BoolNullableFilter | boolean | null
    memberAddress?: StringFilter | string
    memberAtId?: IntFilter | number
    memberAt?: XOR<ProfileRelationFilter, ProfileWhereInput>
  }

  export type MembershipOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    acceptedAt?: SortOrder
    rejectedAt?: SortOrder
    validTo?: SortOrder
    isAdmin?: SortOrder
    memberAddress?: SortOrder
    memberAtId?: SortOrder
    memberAt?: ProfileOrderByWithRelationInput
  }

  export type MembershipWhereUniqueInput = {
    id?: number
  }

  export type MembershipOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    acceptedAt?: SortOrder
    rejectedAt?: SortOrder
    validTo?: SortOrder
    isAdmin?: SortOrder
    memberAddress?: SortOrder
    memberAtId?: SortOrder
    _count?: MembershipCountOrderByAggregateInput
    _avg?: MembershipAvgOrderByAggregateInput
    _max?: MembershipMaxOrderByAggregateInput
    _min?: MembershipMinOrderByAggregateInput
    _sum?: MembershipSumOrderByAggregateInput
  }

  export type MembershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    createdByProfileId?: IntWithAggregatesFilter | number
    acceptedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    rejectedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    validTo?: DateTimeNullableWithAggregatesFilter | Date | string | null
    isAdmin?: BoolNullableWithAggregatesFilter | boolean | null
    memberAddress?: StringWithAggregatesFilter | string
    memberAtId?: IntWithAggregatesFilter | number
  }

  export type ChatMessageWhereInput = {
    AND?: Enumerable<ChatMessageWhereInput>
    OR?: Enumerable<ChatMessageWhereInput>
    NOT?: Enumerable<ChatMessageWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    openedAt?: DateTimeNullableFilter | Date | string | null
    from?: StringFilter | string
    to?: StringFilter | string
    text?: StringFilter | string
    tags?: TagListRelationFilter
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    openedAt?: SortOrder
    from?: SortOrder
    to?: SortOrder
    text?: SortOrder
    tags?: TagOrderByRelationAggregateInput
  }

  export type ChatMessageWhereUniqueInput = {
    id?: number
  }

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    openedAt?: SortOrder
    from?: SortOrder
    to?: SortOrder
    text?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatMessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    openedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    from?: StringWithAggregatesFilter | string
    to?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
  }

  export type DelegatedChallengesWhereInput = {
    AND?: Enumerable<DelegatedChallengesWhereInput>
    OR?: Enumerable<DelegatedChallengesWhereInput>
    NOT?: Enumerable<DelegatedChallengesWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    appId?: StringFilter | string
    sessionId?: StringFilter | string
    requestValidTo?: DateTimeFilter | Date | string
    delegateAuthCode?: StringFilter | string
    challenge?: StringNullableFilter | string | null
    challengeDepositedAt?: DateTimeNullableFilter | Date | string | null
    challengeValidTo?: DateTimeNullableFilter | Date | string | null
    challengedReadAt?: DateTimeNullableFilter | Date | string | null
  }

  export type DelegatedChallengesOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    appId?: SortOrder
    sessionId?: SortOrder
    requestValidTo?: SortOrder
    delegateAuthCode?: SortOrder
    challenge?: SortOrder
    challengeDepositedAt?: SortOrder
    challengeValidTo?: SortOrder
    challengedReadAt?: SortOrder
  }

  export type DelegatedChallengesWhereUniqueInput = {
    id?: number
    delegateAuthCode?: string
  }

  export type DelegatedChallengesOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    appId?: SortOrder
    sessionId?: SortOrder
    requestValidTo?: SortOrder
    delegateAuthCode?: SortOrder
    challenge?: SortOrder
    challengeDepositedAt?: SortOrder
    challengeValidTo?: SortOrder
    challengedReadAt?: SortOrder
    _count?: DelegatedChallengesCountOrderByAggregateInput
    _avg?: DelegatedChallengesAvgOrderByAggregateInput
    _max?: DelegatedChallengesMaxOrderByAggregateInput
    _min?: DelegatedChallengesMinOrderByAggregateInput
    _sum?: DelegatedChallengesSumOrderByAggregateInput
  }

  export type DelegatedChallengesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DelegatedChallengesScalarWhereWithAggregatesInput>
    OR?: Enumerable<DelegatedChallengesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DelegatedChallengesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    appId?: StringWithAggregatesFilter | string
    sessionId?: StringWithAggregatesFilter | string
    requestValidTo?: DateTimeWithAggregatesFilter | Date | string
    delegateAuthCode?: StringWithAggregatesFilter | string
    challenge?: StringNullableWithAggregatesFilter | string | null
    challengeDepositedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    challengeValidTo?: DateTimeNullableWithAggregatesFilter | Date | string | null
    challengedReadAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type OfferWhereInput = {
    AND?: Enumerable<OfferWhereInput>
    OR?: Enumerable<OfferWhereInput>
    NOT?: Enumerable<OfferWhereInput>
    id?: IntFilter | number
    version?: IntFilter | number
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    pictureUrl?: StringNullableFilter | string | null
    pictureMimeType?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    pricePerUnit?: StringFilter | string
    timeCirclesPriceShare?: IntFilter | number
    purchaseLines?: PurchaseLineListRelationFilter
    invoiceLines?: InvoiceLineListRelationFilter
    tags?: TagListRelationFilter
  }

  export type OfferOrderByWithRelationInput = {
    id?: SortOrder
    version?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    pictureUrl?: SortOrder
    pictureMimeType?: SortOrder
    description?: SortOrder
    pricePerUnit?: SortOrder
    timeCirclesPriceShare?: SortOrder
    purchaseLines?: PurchaseLineOrderByRelationAggregateInput
    invoiceLines?: InvoiceLineOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
  }

  export type OfferWhereUniqueInput = {
    id_version?: OfferIdVersionCompoundUniqueInput
  }

  export type OfferOrderByWithAggregationInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    pictureUrl?: SortOrder
    pictureMimeType?: SortOrder
    description?: SortOrder
    pricePerUnit?: SortOrder
    timeCirclesPriceShare?: SortOrder
    _count?: OfferCountOrderByAggregateInput
    _avg?: OfferAvgOrderByAggregateInput
    _max?: OfferMaxOrderByAggregateInput
    _min?: OfferMinOrderByAggregateInput
    _sum?: OfferSumOrderByAggregateInput
  }

  export type OfferScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OfferScalarWhereWithAggregatesInput>
    OR?: Enumerable<OfferScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OfferScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    version?: IntWithAggregatesFilter | number
    createdByProfileId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    pictureUrl?: StringNullableWithAggregatesFilter | string | null
    pictureMimeType?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    pricePerUnit?: StringWithAggregatesFilter | string
    timeCirclesPriceShare?: IntWithAggregatesFilter | number
  }

  export type PurchaseWhereInput = {
    AND?: Enumerable<PurchaseWhereInput>
    OR?: Enumerable<PurchaseWhereInput>
    NOT?: Enumerable<PurchaseWhereInput>
    id?: IntFilter | number
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    lines?: PurchaseLineListRelationFilter
    invoices?: InvoiceListRelationFilter
  }

  export type PurchaseOrderByWithRelationInput = {
    id?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    lines?: PurchaseLineOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
  }

  export type PurchaseWhereUniqueInput = {
    id?: number
  }

  export type PurchaseOrderByWithAggregationInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    _count?: PurchaseCountOrderByAggregateInput
    _avg?: PurchaseAvgOrderByAggregateInput
    _max?: PurchaseMaxOrderByAggregateInput
    _min?: PurchaseMinOrderByAggregateInput
    _sum?: PurchaseSumOrderByAggregateInput
  }

  export type PurchaseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    OR?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdByProfileId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PurchaseLineWhereInput = {
    AND?: Enumerable<PurchaseLineWhereInput>
    OR?: Enumerable<PurchaseLineWhereInput>
    NOT?: Enumerable<PurchaseLineWhereInput>
    id?: IntFilter | number
    purchase?: XOR<PurchaseRelationFilter, PurchaseWhereInput>
    purchaseId?: IntFilter | number
    amount?: IntFilter | number
    product?: XOR<OfferRelationFilter, OfferWhereInput>
    productId?: IntFilter | number
    productVersion?: IntFilter | number
  }

  export type PurchaseLineOrderByWithRelationInput = {
    id?: SortOrder
    purchase?: PurchaseOrderByWithRelationInput
    purchaseId?: SortOrder
    amount?: SortOrder
    product?: OfferOrderByWithRelationInput
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type PurchaseLineWhereUniqueInput = {
    id?: number
  }

  export type PurchaseLineOrderByWithAggregationInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
    _count?: PurchaseLineCountOrderByAggregateInput
    _avg?: PurchaseLineAvgOrderByAggregateInput
    _max?: PurchaseLineMaxOrderByAggregateInput
    _min?: PurchaseLineMinOrderByAggregateInput
    _sum?: PurchaseLineSumOrderByAggregateInput
  }

  export type PurchaseLineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PurchaseLineScalarWhereWithAggregatesInput>
    OR?: Enumerable<PurchaseLineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PurchaseLineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    purchaseId?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    productVersion?: IntWithAggregatesFilter | number
  }

  export type InvoiceWhereInput = {
    AND?: Enumerable<InvoiceWhereInput>
    OR?: Enumerable<InvoiceWhereInput>
    NOT?: Enumerable<InvoiceWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    invoiceNo?: StringFilter | string
    customerProfile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    customerProfileId?: IntFilter | number
    sellerProfile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    sellerProfileId?: IntFilter | number
    purchase?: XOR<PurchaseRelationFilter, PurchaseWhereInput>
    purchaseId?: IntFilter | number
    lines?: InvoiceLineListRelationFilter
    pendingPaymentTransactionHash?: StringNullableFilter | string | null
    paymentTransaction?: XOR<TransactionRelationFilter, TransactionWhereInput> | null
    paymentTransactionHash?: StringNullableFilter | string | null
    pickupCode?: StringNullableFilter | string | null
    buyerSignature?: BoolNullableFilter | boolean | null
    buyerSignedDate?: DateTimeNullableFilter | Date | string | null
    sellerSignature?: BoolNullableFilter | boolean | null
    sellerSignedDate?: DateTimeNullableFilter | Date | string | null
    cancelledAt?: DateTimeNullableFilter | Date | string | null
    cancelledBy?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    cancelledByProfileId?: IntNullableFilter | number | null
    cancelReason?: StringNullableFilter | string | null
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    invoiceNo?: SortOrder
    customerProfile?: ProfileOrderByWithRelationInput
    customerProfileId?: SortOrder
    sellerProfile?: ProfileOrderByWithRelationInput
    sellerProfileId?: SortOrder
    purchase?: PurchaseOrderByWithRelationInput
    purchaseId?: SortOrder
    lines?: InvoiceLineOrderByRelationAggregateInput
    pendingPaymentTransactionHash?: SortOrder
    paymentTransaction?: TransactionOrderByWithRelationInput
    paymentTransactionHash?: SortOrder
    pickupCode?: SortOrder
    buyerSignature?: SortOrder
    buyerSignedDate?: SortOrder
    sellerSignature?: SortOrder
    sellerSignedDate?: SortOrder
    cancelledAt?: SortOrder
    cancelledBy?: ProfileOrderByWithRelationInput
    cancelledByProfileId?: SortOrder
    cancelReason?: SortOrder
  }

  export type InvoiceWhereUniqueInput = {
    id?: number
    paymentTransactionHash?: string
  }

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    invoiceNo?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    pendingPaymentTransactionHash?: SortOrder
    paymentTransactionHash?: SortOrder
    pickupCode?: SortOrder
    buyerSignature?: SortOrder
    buyerSignedDate?: SortOrder
    sellerSignature?: SortOrder
    sellerSignedDate?: SortOrder
    cancelledAt?: SortOrder
    cancelledByProfileId?: SortOrder
    cancelReason?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    invoiceNo?: StringWithAggregatesFilter | string
    customerProfileId?: IntWithAggregatesFilter | number
    sellerProfileId?: IntWithAggregatesFilter | number
    purchaseId?: IntWithAggregatesFilter | number
    pendingPaymentTransactionHash?: StringNullableWithAggregatesFilter | string | null
    paymentTransactionHash?: StringNullableWithAggregatesFilter | string | null
    pickupCode?: StringNullableWithAggregatesFilter | string | null
    buyerSignature?: BoolNullableWithAggregatesFilter | boolean | null
    buyerSignedDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    sellerSignature?: BoolNullableWithAggregatesFilter | boolean | null
    sellerSignedDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    cancelledAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    cancelledByProfileId?: IntNullableWithAggregatesFilter | number | null
    cancelReason?: StringNullableWithAggregatesFilter | string | null
  }

  export type InvoiceLineWhereInput = {
    AND?: Enumerable<InvoiceLineWhereInput>
    OR?: Enumerable<InvoiceLineWhereInput>
    NOT?: Enumerable<InvoiceLineWhereInput>
    id?: IntFilter | number
    invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput>
    invoiceId?: IntFilter | number
    amount?: IntFilter | number
    product?: XOR<OfferRelationFilter, OfferWhereInput>
    productId?: IntFilter | number
    productVersion?: IntFilter | number
  }

  export type InvoiceLineOrderByWithRelationInput = {
    id?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
    invoiceId?: SortOrder
    amount?: SortOrder
    product?: OfferOrderByWithRelationInput
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceLineWhereUniqueInput = {
    id?: number
  }

  export type InvoiceLineOrderByWithAggregationInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
    _count?: InvoiceLineCountOrderByAggregateInput
    _avg?: InvoiceLineAvgOrderByAggregateInput
    _max?: InvoiceLineMaxOrderByAggregateInput
    _min?: InvoiceLineMinOrderByAggregateInput
    _sum?: InvoiceLineSumOrderByAggregateInput
  }

  export type InvoiceLineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceLineScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceLineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceLineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    invoiceId?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    productVersion?: IntWithAggregatesFilter | number
  }

  export type TagTypeWhereInput = {
    AND?: Enumerable<TagTypeWhereInput>
    OR?: Enumerable<TagTypeWhereInput>
    NOT?: Enumerable<TagTypeWhereInput>
    id?: StringFilter | string
    tags?: TagListRelationFilter
  }

  export type TagTypeOrderByWithRelationInput = {
    id?: SortOrder
    tags?: TagOrderByRelationAggregateInput
  }

  export type TagTypeWhereUniqueInput = {
    id?: string
  }

  export type TagTypeOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: TagTypeCountOrderByAggregateInput
    _max?: TagTypeMaxOrderByAggregateInput
    _min?: TagTypeMinOrderByAggregateInput
  }

  export type TagTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagTypeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    transactionHash?: StringFilter | string
    tags?: TagListRelationFilter
    payedInvoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput> | null
    InviteeReward_VerifiedSafe?: XOR<VerifiedSafeRelationFilter, VerifiedSafeWhereInput> | null
    InviterReward_VerifiedSafe?: XOR<VerifiedSafeRelationFilter, VerifiedSafeWhereInput> | null
    SwapFunding_VerifiedSafe?: XOR<VerifiedSafeRelationFilter, VerifiedSafeWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    transactionHash?: SortOrder
    tags?: TagOrderByRelationAggregateInput
    payedInvoice?: InvoiceOrderByWithRelationInput
    InviteeReward_VerifiedSafe?: VerifiedSafeOrderByWithRelationInput
    InviterReward_VerifiedSafe?: VerifiedSafeOrderByWithRelationInput
    SwapFunding_VerifiedSafe?: VerifiedSafeOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = {
    transactionHash?: string
  }

  export type TransactionOrderByWithAggregationInput = {
    transactionHash?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    transactionHash?: StringWithAggregatesFilter | string
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    createdBy?: XOR<ProfileRelationFilter, ProfileWhereInput>
    createdByProfileId?: IntFilter | number
    isPrivate?: BoolFilter | boolean
    transaction?: XOR<TransactionRelationFilter, TransactionWhereInput> | null
    transactionHash?: StringNullableFilter | string | null
    type?: XOR<TagTypeRelationFilter, TagTypeWhereInput>
    typeId?: StringFilter | string
    chatMessage?: XOR<ChatMessageRelationFilter, ChatMessageWhereInput> | null
    chatMessageId?: IntNullableFilter | number | null
    offer?: XOR<OfferRelationFilter, OfferWhereInput> | null
    offerId?: IntNullableFilter | number | null
    offerVersion?: IntNullableFilter | number | null
    value?: StringNullableFilter | string | null
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdBy?: ProfileOrderByWithRelationInput
    createdByProfileId?: SortOrder
    isPrivate?: SortOrder
    transaction?: TransactionOrderByWithRelationInput
    transactionHash?: SortOrder
    type?: TagTypeOrderByWithRelationInput
    typeId?: SortOrder
    chatMessage?: ChatMessageOrderByWithRelationInput
    chatMessageId?: SortOrder
    offer?: OfferOrderByWithRelationInput
    offerId?: SortOrder
    offerVersion?: SortOrder
    value?: SortOrder
  }

  export type TagWhereUniqueInput = {
    id?: number
  }

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    isPrivate?: SortOrder
    transactionHash?: SortOrder
    typeId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
    value?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    createdByProfileId?: IntWithAggregatesFilter | number
    isPrivate?: BoolWithAggregatesFilter | boolean
    transactionHash?: StringNullableWithAggregatesFilter | string | null
    typeId?: StringWithAggregatesFilter | string
    chatMessageId?: IntNullableWithAggregatesFilter | number | null
    offerId?: IntNullableWithAggregatesFilter | number | null
    offerVersion?: IntNullableWithAggregatesFilter | number | null
    value?: StringNullableWithAggregatesFilter | string | null
  }

  export type JobWhereInput = {
    AND?: Enumerable<JobWhereInput>
    OR?: Enumerable<JobWhereInput>
    NOT?: Enumerable<JobWhereInput>
    id?: IntFilter | number
    kind?: StringNullableFilter | string | null
    hash?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    timeoutAt?: DateTimeNullableFilter | Date | string | null
    finishedAt?: DateTimeNullableFilter | Date | string | null
    error?: StringNullableFilter | string | null
    warning?: StringNullableFilter | string | null
    info?: StringNullableFilter | string | null
    topic?: StringFilter | string
    payload?: StringFilter | string
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    kind?: SortOrder
    hash?: SortOrder
    createdAt?: SortOrder
    timeoutAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    warning?: SortOrder
    info?: SortOrder
    topic?: SortOrder
    payload?: SortOrder
  }

  export type JobWhereUniqueInput = {
    id?: number
    hash?: string
  }

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    kind?: SortOrder
    hash?: SortOrder
    createdAt?: SortOrder
    timeoutAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    warning?: SortOrder
    info?: SortOrder
    topic?: SortOrder
    payload?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JobScalarWhereWithAggregatesInput>
    OR?: Enumerable<JobScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JobScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    kind?: StringNullableWithAggregatesFilter | string | null
    hash?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    timeoutAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    finishedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    error?: StringNullableWithAggregatesFilter | string | null
    warning?: StringNullableWithAggregatesFilter | string | null
    info?: StringNullableWithAggregatesFilter | string | null
    topic?: StringWithAggregatesFilter | string
    payload?: StringWithAggregatesFilter | string
  }

  export type i18nWhereInput = {
    AND?: Enumerable<i18nWhereInput>
    OR?: Enumerable<i18nWhereInput>
    NOT?: Enumerable<i18nWhereInput>
    createdAt?: DateTimeFilter | Date | string
    createdBy?: StringFilter | string
    lang?: StringFilter | string
    key?: StringFilter | string
    version?: IntFilter | number
    value?: StringFilter | string
  }

  export type i18nOrderByWithRelationInput = {
    createdAt?: SortOrder
    createdBy?: SortOrder
    lang?: SortOrder
    key?: SortOrder
    version?: SortOrder
    value?: SortOrder
  }

  export type i18nWhereUniqueInput = {
    lang_key_version?: i18nLangKeyVersionCompoundUniqueInput
  }

  export type i18nOrderByWithAggregationInput = {
    createdAt?: SortOrder
    createdBy?: SortOrder
    lang?: SortOrder
    key?: SortOrder
    version?: SortOrder
    value?: SortOrder
    _count?: i18nCountOrderByAggregateInput
    _avg?: i18nAvgOrderByAggregateInput
    _max?: i18nMaxOrderByAggregateInput
    _min?: i18nMinOrderByAggregateInput
    _sum?: i18nSumOrderByAggregateInput
  }

  export type i18nScalarWhereWithAggregatesInput = {
    AND?: Enumerable<i18nScalarWhereWithAggregatesInput>
    OR?: Enumerable<i18nScalarWhereWithAggregatesInput>
    NOT?: Enumerable<i18nScalarWhereWithAggregatesInput>
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    createdBy?: StringWithAggregatesFilter | string
    lang?: StringWithAggregatesFilter | string
    key?: StringWithAggregatesFilter | string
    version?: IntWithAggregatesFilter | number
    value?: StringWithAggregatesFilter | string
  }

  export type SessionCreateInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    profile?: ProfileCreateNestedOneWithoutSessionsInput
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type SessionUncheckedCreateInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    profileId?: number | null
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutSessionsInput
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    profileId?: number | null
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    profileId?: NullableIntFieldUpdateOperationsInput | number | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationCreateInput = {
    createdBy: ProfileCreateNestedOneWithoutInvitationsInput
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedBy?: ProfileCreateNestedOneWithoutClaimedInvitationsInput
    claimedAt?: Date | string | null
    redeemedBy?: ProfileCreateNestedOneWithoutRedeemedInvitationsInput
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUncheckedCreateInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUpdateInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutInvitationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedBy?: ProfileUpdateOneWithoutClaimedInvitationsInput
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedBy?: ProfileUpdateOneWithoutRedeemedInvitationsInput
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationCreateManyInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationFundsEOACreateInput = {
    address: string
    privateKey: string
    profile: ProfileCreateNestedOneWithoutInvitationFundsInput
  }

  export type InvitationFundsEOAUncheckedCreateInput = {
    id?: number
    address: string
    privateKey: string
    profileId: number
  }

  export type InvitationFundsEOAUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutInvitationFundsInput
  }

  export type InvitationFundsEOAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type InvitationFundsEOACreateManyInput = {
    id?: number
    address: string
    privateKey: string
    profileId: number
  }

  export type InvitationFundsEOAUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationFundsEOAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeCreateInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeUpdateInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeCreateManyInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeUpdateManyMutationInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateManyInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUpdateInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
  }

  export type ProfileUpdateManyMutationInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
  }

  export type ExternalProfilesCreateInput = {
    circlesAddress: string
    name: string
    avatarUrl?: string | null
  }

  export type ExternalProfilesUncheckedCreateInput = {
    circlesAddress: string
    name: string
    avatarUrl?: string | null
  }

  export type ExternalProfilesUpdateInput = {
    circlesAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExternalProfilesUncheckedUpdateInput = {
    circlesAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExternalProfilesCreateManyInput = {
    circlesAddress: string
    name: string
    avatarUrl?: string | null
  }

  export type ExternalProfilesUpdateManyMutationInput = {
    circlesAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExternalProfilesUncheckedUpdateManyInput = {
    circlesAddress?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembershipCreateInput = {
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutCreatedMembershipsInput
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAt: ProfileCreateNestedOneWithoutMembersInput
  }

  export type MembershipUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    createdByProfileId: number
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAtId: number
  }

  export type MembershipUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutCreatedMembershipsInput
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAt?: ProfileUpdateOneRequiredWithoutMembersInput
  }

  export type MembershipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAtId?: IntFieldUpdateOperationsInput | number
  }

  export type MembershipCreateManyInput = {
    id?: number
    createdAt?: Date | string
    createdByProfileId: number
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAtId: number
  }

  export type MembershipUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAtId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageCreateInput = {
    createdAt: Date | string
    openedAt?: Date | string | null
    from: string
    to: string
    text: string
    tags?: TagCreateNestedManyWithoutChatMessageInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    openedAt?: Date | string | null
    from: string
    to: string
    text: string
    tags?: TagUncheckedCreateNestedManyWithoutChatMessageInput
  }

  export type ChatMessageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutChatMessageInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutChatMessageInput
  }

  export type ChatMessageCreateManyInput = {
    id?: number
    createdAt: Date | string
    openedAt?: Date | string | null
    from: string
    to: string
    text: string
  }

  export type ChatMessageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type DelegatedChallengesCreateInput = {
    createdAt: Date | string
    appId: string
    sessionId: string
    requestValidTo: Date | string
    delegateAuthCode: string
    challenge?: string | null
    challengeDepositedAt?: Date | string | null
    challengeValidTo?: Date | string | null
    challengedReadAt?: Date | string | null
  }

  export type DelegatedChallengesUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    appId: string
    sessionId: string
    requestValidTo: Date | string
    delegateAuthCode: string
    challenge?: string | null
    challengeDepositedAt?: Date | string | null
    challengeValidTo?: Date | string | null
    challengedReadAt?: Date | string | null
  }

  export type DelegatedChallengesUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    requestValidTo?: DateTimeFieldUpdateOperationsInput | Date | string
    delegateAuthCode?: StringFieldUpdateOperationsInput | string
    challenge?: NullableStringFieldUpdateOperationsInput | string | null
    challengeDepositedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengeValidTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengedReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DelegatedChallengesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    requestValidTo?: DateTimeFieldUpdateOperationsInput | Date | string
    delegateAuthCode?: StringFieldUpdateOperationsInput | string
    challenge?: NullableStringFieldUpdateOperationsInput | string | null
    challengeDepositedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengeValidTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengedReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DelegatedChallengesCreateManyInput = {
    id?: number
    createdAt: Date | string
    appId: string
    sessionId: string
    requestValidTo: Date | string
    delegateAuthCode: string
    challenge?: string | null
    challengeDepositedAt?: Date | string | null
    challengeValidTo?: Date | string | null
    challengedReadAt?: Date | string | null
  }

  export type DelegatedChallengesUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    requestValidTo?: DateTimeFieldUpdateOperationsInput | Date | string
    delegateAuthCode?: StringFieldUpdateOperationsInput | string
    challenge?: NullableStringFieldUpdateOperationsInput | string | null
    challengeDepositedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengeValidTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengedReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DelegatedChallengesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appId?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    requestValidTo?: DateTimeFieldUpdateOperationsInput | Date | string
    delegateAuthCode?: StringFieldUpdateOperationsInput | string
    challenge?: NullableStringFieldUpdateOperationsInput | string | null
    challengeDepositedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengeValidTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    challengedReadAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OfferCreateInput = {
    id?: number
    version: number
    createdBy: ProfileCreateNestedOneWithoutOffersInput
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineCreateNestedManyWithoutProductInput
    tags?: TagCreateNestedManyWithoutOfferInput
  }

  export type OfferUncheckedCreateInput = {
    id?: number
    version: number
    createdByProfileId: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineUncheckedCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedCreateNestedManyWithoutProductInput
    tags?: TagUncheckedCreateNestedManyWithoutOfferInput
  }

  export type OfferUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdBy?: ProfileUpdateOneRequiredWithoutOffersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUpdateManyWithoutProductInput
    tags?: TagUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUncheckedUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedUpdateManyWithoutProductInput
    tags?: TagUncheckedUpdateManyWithoutOfferInput
  }

  export type OfferCreateManyInput = {
    id?: number
    version: number
    createdByProfileId: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
  }

  export type OfferUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
  }

  export type OfferUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseCreateInput = {
    createdBy: ProfileCreateNestedOneWithoutPurchasesInput
    createdAt: Date | string
    lines?: PurchaseLineCreateNestedManyWithoutPurchaseInput
    invoices?: InvoiceCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    lines?: PurchaseLineUncheckedCreateNestedManyWithoutPurchaseInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUpdateInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutPurchasesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUpdateManyWithoutPurchaseInput
    invoices?: InvoiceUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUncheckedUpdateManyWithoutPurchaseInput
    invoices?: InvoiceUncheckedUpdateManyWithoutPurchaseInput
  }

  export type PurchaseCreateManyInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
  }

  export type PurchaseUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseLineCreateInput = {
    purchase: PurchaseCreateNestedOneWithoutLinesInput
    amount: number
    product: OfferCreateNestedOneWithoutPurchaseLinesInput
  }

  export type PurchaseLineUncheckedCreateInput = {
    id?: number
    purchaseId: number
    amount: number
    productId: number
    productVersion: number
  }

  export type PurchaseLineUpdateInput = {
    purchase?: PurchaseUpdateOneRequiredWithoutLinesInput
    amount?: IntFieldUpdateOperationsInput | number
    product?: OfferUpdateOneRequiredWithoutPurchaseLinesInput
  }

  export type PurchaseLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseLineCreateManyInput = {
    id?: number
    purchaseId: number
    amount: number
    productId: number
    productVersion: number
  }

  export type PurchaseLineUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceCreateInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceCreateManyInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceLineCreateInput = {
    invoice: InvoiceCreateNestedOneWithoutLinesInput
    amount: number
    product: OfferCreateNestedOneWithoutInvoiceLinesInput
  }

  export type InvoiceLineUncheckedCreateInput = {
    id?: number
    invoiceId: number
    amount: number
    productId: number
    productVersion: number
  }

  export type InvoiceLineUpdateInput = {
    invoice?: InvoiceUpdateOneRequiredWithoutLinesInput
    amount?: IntFieldUpdateOperationsInput | number
    product?: OfferUpdateOneRequiredWithoutInvoiceLinesInput
  }

  export type InvoiceLineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineCreateManyInput = {
    id?: number
    invoiceId: number
    amount: number
    productId: number
    productVersion: number
  }

  export type InvoiceLineUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type TagTypeCreateInput = {
    id: string
    tags?: TagCreateNestedManyWithoutTypeInput
  }

  export type TagTypeUncheckedCreateInput = {
    id: string
    tags?: TagUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TagTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTypeInput
  }

  export type TagTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTypeInput
  }

  export type TagTypeCreateManyInput = {
    id: string
  }

  export type TagTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TagTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    transactionHash: string
    tags?: TagCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    transactionHash: string
    tags?: TagUncheckedCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUpdateInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedUpdateInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionCreateManyInput = {
    transactionHash: string
  }

  export type TransactionUpdateManyMutationInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    createdAt: Date | string
    createdBy: ProfileCreateNestedOneWithoutTagsInput
    isPrivate: boolean
    transaction?: TransactionCreateNestedOneWithoutTagsInput
    type: TagTypeCreateNestedOneWithoutTagsInput
    chatMessage?: ChatMessageCreateNestedOneWithoutTagsInput
    offer?: OfferCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutTagsInput
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transaction?: TransactionUpdateOneWithoutTagsInput
    type?: TagTypeUpdateOneRequiredWithoutTagsInput
    chatMessage?: ChatMessageUpdateOneWithoutTagsInput
    offer?: OfferUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateManyInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobCreateInput = {
    kind?: string | null
    hash: string
    createdAt?: Date | string
    timeoutAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    warning?: string | null
    info?: string | null
    topic: string
    payload: string
  }

  export type JobUncheckedCreateInput = {
    id?: number
    kind?: string | null
    hash: string
    createdAt?: Date | string
    timeoutAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    warning?: string | null
    info?: string | null
    topic: string
    payload: string
  }

  export type JobUpdateInput = {
    kind?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeoutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    warning?: NullableStringFieldUpdateOperationsInput | string | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeoutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    warning?: NullableStringFieldUpdateOperationsInput | string | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
  }

  export type JobCreateManyInput = {
    id?: number
    kind?: string | null
    hash: string
    createdAt?: Date | string
    timeoutAt?: Date | string | null
    finishedAt?: Date | string | null
    error?: string | null
    warning?: string | null
    info?: string | null
    topic: string
    payload: string
  }

  export type JobUpdateManyMutationInput = {
    kind?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeoutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    warning?: NullableStringFieldUpdateOperationsInput | string | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: NullableStringFieldUpdateOperationsInput | string | null
    hash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeoutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    warning?: NullableStringFieldUpdateOperationsInput | string | null
    info?: NullableStringFieldUpdateOperationsInput | string | null
    topic?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
  }

  export type i18nCreateInput = {
    createdAt?: Date | string
    createdBy: string
    lang: string
    key: string
    version: number
    value: string
  }

  export type i18nUncheckedCreateInput = {
    createdAt?: Date | string
    createdBy: string
    lang: string
    key: string
    version: number
    value: string
  }

  export type i18nUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    lang?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type i18nUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    lang?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type i18nCreateManyInput = {
    createdAt?: Date | string
    createdBy: string
    lang: string
    key: string
    version: number
    value: string
  }

  export type i18nUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    lang?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type i18nUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    lang?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    emailAddress?: SortOrder
    ethAddress?: SortOrder
    challengeHash?: SortOrder
    signature?: SortOrder
    profileId?: SortOrder
    issuedBy?: SortOrder
    jti?: SortOrder
    createdAt?: SortOrder
    validFrom?: SortOrder
    endedAt?: SortOrder
    endReason?: SortOrder
    maxLifetime?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    profileId?: SortOrder
    maxLifetime?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    emailAddress?: SortOrder
    ethAddress?: SortOrder
    challengeHash?: SortOrder
    signature?: SortOrder
    profileId?: SortOrder
    issuedBy?: SortOrder
    jti?: SortOrder
    createdAt?: SortOrder
    validFrom?: SortOrder
    endedAt?: SortOrder
    endReason?: SortOrder
    maxLifetime?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    emailAddress?: SortOrder
    ethAddress?: SortOrder
    challengeHash?: SortOrder
    signature?: SortOrder
    profileId?: SortOrder
    issuedBy?: SortOrder
    jti?: SortOrder
    createdAt?: SortOrder
    validFrom?: SortOrder
    endedAt?: SortOrder
    endReason?: SortOrder
    maxLifetime?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    profileId?: SortOrder
    maxLifetime?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    fundedAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    claimedByProfileId?: SortOrder
    claimedAt?: SortOrder
    redeemedByProfileId?: SortOrder
    redeemedAt?: SortOrder
    redeemTxHash?: SortOrder
    forSafeAddress?: SortOrder
    address?: SortOrder
    key?: SortOrder
  }

  export type InvitationAvgOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    claimedByProfileId?: SortOrder
    redeemedByProfileId?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    fundedAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    claimedByProfileId?: SortOrder
    claimedAt?: SortOrder
    redeemedByProfileId?: SortOrder
    redeemedAt?: SortOrder
    redeemTxHash?: SortOrder
    forSafeAddress?: SortOrder
    address?: SortOrder
    key?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    fundedAt?: SortOrder
    name?: SortOrder
    code?: SortOrder
    claimedByProfileId?: SortOrder
    claimedAt?: SortOrder
    redeemedByProfileId?: SortOrder
    redeemedAt?: SortOrder
    redeemTxHash?: SortOrder
    forSafeAddress?: SortOrder
    address?: SortOrder
    key?: SortOrder
  }

  export type InvitationSumOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    claimedByProfileId?: SortOrder
    redeemedByProfileId?: SortOrder
  }

  export type InvitationFundsEOACountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    privateKey?: SortOrder
    profileId?: SortOrder
  }

  export type InvitationFundsEOAAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type InvitationFundsEOAMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    privateKey?: SortOrder
    profileId?: SortOrder
  }

  export type InvitationFundsEOAMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    privateKey?: SortOrder
    profileId?: SortOrder
  }

  export type InvitationFundsEOASumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type TransactionRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type VerifiedSafeCountOrderByAggregateInput = {
    safeAddress?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedAt?: SortOrder
    revokedByProfileId?: SortOrder
    swapEoaAddress?: SortOrder
    swapEoaKey?: SortOrder
    rewardProcessingStartedAt?: SortOrder
    rewardProcessingWorker?: SortOrder
    inviteeRewardTransactionHash?: SortOrder
    inviterRewardTransactionHash?: SortOrder
    swapFundingTransactionHash?: SortOrder
    inviteCount?: SortOrder
  }

  export type VerifiedSafeAvgOrderByAggregateInput = {
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedByProfileId?: SortOrder
    inviteCount?: SortOrder
  }

  export type VerifiedSafeMaxOrderByAggregateInput = {
    safeAddress?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedAt?: SortOrder
    revokedByProfileId?: SortOrder
    swapEoaAddress?: SortOrder
    swapEoaKey?: SortOrder
    rewardProcessingStartedAt?: SortOrder
    rewardProcessingWorker?: SortOrder
    inviteeRewardTransactionHash?: SortOrder
    inviterRewardTransactionHash?: SortOrder
    swapFundingTransactionHash?: SortOrder
    inviteCount?: SortOrder
  }

  export type VerifiedSafeMinOrderByAggregateInput = {
    safeAddress?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedAt?: SortOrder
    revokedByProfileId?: SortOrder
    swapEoaAddress?: SortOrder
    swapEoaKey?: SortOrder
    rewardProcessingStartedAt?: SortOrder
    rewardProcessingWorker?: SortOrder
    inviteeRewardTransactionHash?: SortOrder
    inviterRewardTransactionHash?: SortOrder
    swapFundingTransactionHash?: SortOrder
    inviteCount?: SortOrder
  }

  export type VerifiedSafeSumOrderByAggregateInput = {
    createdByProfileId?: SortOrder
    createdByOrganisationId?: SortOrder
    revokedByProfileId?: SortOrder
    inviteCount?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type EnumProfileTypeNullableFilter = {
    equals?: ProfileType | null
    in?: Enumerable<ProfileType> | null
    notIn?: Enumerable<ProfileType> | null
    not?: NestedEnumProfileTypeNullableFilter | ProfileType | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type OfferListRelationFilter = {
    every?: OfferWhereInput
    some?: OfferWhereInput
    none?: OfferWhereInput
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type InvitationFundsEOARelationFilter = {
    is?: InvitationFundsEOAWhereInput | null
    isNot?: InvitationFundsEOAWhereInput | null
  }

  export type MembershipListRelationFilter = {
    every?: MembershipWhereInput
    some?: MembershipWhereInput
    none?: MembershipWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type VerifiedSafeListRelationFilter = {
    every?: VerifiedSafeWhereInput
    some?: VerifiedSafeWhereInput
    none?: VerifiedSafeWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerifiedSafeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    lastUpdateAt?: SortOrder
    emailAddress?: SortOrder
    askedForEmailAddress?: SortOrder
    emailAddressVerified?: SortOrder
    verifyEmailChallenge?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    successorOfCirclesAddress?: SortOrder
    circlesAddress?: SortOrder
    circlesSafeOwner?: SortOrder
    circlesTokenAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    avatarCid?: SortOrder
    avatarMimeType?: SortOrder
    dream?: SortOrder
    country?: SortOrder
    newsletter?: SortOrder
    displayTimeCircles?: SortOrder
    cityGeonameid?: SortOrder
    lastAcknowledged?: SortOrder
    verifySafeChallenge?: SortOrder
    newSafeAddress?: SortOrder
    invoiceNoPrefix?: SortOrder
    lastInvoiceNo?: SortOrder
    refundNoPrefix?: SortOrder
    lastRefundNo?: SortOrder
    displayCurrency?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    cityGeonameid?: SortOrder
    lastInvoiceNo?: SortOrder
    lastRefundNo?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    lastUpdateAt?: SortOrder
    emailAddress?: SortOrder
    askedForEmailAddress?: SortOrder
    emailAddressVerified?: SortOrder
    verifyEmailChallenge?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    successorOfCirclesAddress?: SortOrder
    circlesAddress?: SortOrder
    circlesSafeOwner?: SortOrder
    circlesTokenAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    avatarCid?: SortOrder
    avatarMimeType?: SortOrder
    dream?: SortOrder
    country?: SortOrder
    newsletter?: SortOrder
    displayTimeCircles?: SortOrder
    cityGeonameid?: SortOrder
    lastAcknowledged?: SortOrder
    verifySafeChallenge?: SortOrder
    newSafeAddress?: SortOrder
    invoiceNoPrefix?: SortOrder
    lastInvoiceNo?: SortOrder
    refundNoPrefix?: SortOrder
    lastRefundNo?: SortOrder
    displayCurrency?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    lastUpdateAt?: SortOrder
    emailAddress?: SortOrder
    askedForEmailAddress?: SortOrder
    emailAddressVerified?: SortOrder
    verifyEmailChallenge?: SortOrder
    createdAt?: SortOrder
    status?: SortOrder
    type?: SortOrder
    successorOfCirclesAddress?: SortOrder
    circlesAddress?: SortOrder
    circlesSafeOwner?: SortOrder
    circlesTokenAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    avatarCid?: SortOrder
    avatarMimeType?: SortOrder
    dream?: SortOrder
    country?: SortOrder
    newsletter?: SortOrder
    displayTimeCircles?: SortOrder
    cityGeonameid?: SortOrder
    lastAcknowledged?: SortOrder
    verifySafeChallenge?: SortOrder
    newSafeAddress?: SortOrder
    invoiceNoPrefix?: SortOrder
    lastInvoiceNo?: SortOrder
    refundNoPrefix?: SortOrder
    lastRefundNo?: SortOrder
    displayCurrency?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    cityGeonameid?: SortOrder
    lastInvoiceNo?: SortOrder
    lastRefundNo?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type EnumProfileTypeNullableWithAggregatesFilter = {
    equals?: ProfileType | null
    in?: Enumerable<ProfileType> | null
    notIn?: Enumerable<ProfileType> | null
    not?: NestedEnumProfileTypeNullableWithAggregatesFilter | ProfileType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumProfileTypeNullableFilter
    _max?: NestedEnumProfileTypeNullableFilter
  }

  export type ExternalProfilesCountOrderByAggregateInput = {
    circlesAddress?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
  }

  export type ExternalProfilesMaxOrderByAggregateInput = {
    circlesAddress?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
  }

  export type ExternalProfilesMinOrderByAggregateInput = {
    circlesAddress?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
  }

  export type MembershipCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    acceptedAt?: SortOrder
    rejectedAt?: SortOrder
    validTo?: SortOrder
    isAdmin?: SortOrder
    memberAddress?: SortOrder
    memberAtId?: SortOrder
  }

  export type MembershipAvgOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    memberAtId?: SortOrder
  }

  export type MembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    acceptedAt?: SortOrder
    rejectedAt?: SortOrder
    validTo?: SortOrder
    isAdmin?: SortOrder
    memberAddress?: SortOrder
    memberAtId?: SortOrder
  }

  export type MembershipMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    acceptedAt?: SortOrder
    rejectedAt?: SortOrder
    validTo?: SortOrder
    isAdmin?: SortOrder
    memberAddress?: SortOrder
    memberAtId?: SortOrder
  }

  export type MembershipSumOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    memberAtId?: SortOrder
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    openedAt?: SortOrder
    from?: SortOrder
    to?: SortOrder
    text?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    openedAt?: SortOrder
    from?: SortOrder
    to?: SortOrder
    text?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    openedAt?: SortOrder
    from?: SortOrder
    to?: SortOrder
    text?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DelegatedChallengesCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    appId?: SortOrder
    sessionId?: SortOrder
    requestValidTo?: SortOrder
    delegateAuthCode?: SortOrder
    challenge?: SortOrder
    challengeDepositedAt?: SortOrder
    challengeValidTo?: SortOrder
    challengedReadAt?: SortOrder
  }

  export type DelegatedChallengesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DelegatedChallengesMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    appId?: SortOrder
    sessionId?: SortOrder
    requestValidTo?: SortOrder
    delegateAuthCode?: SortOrder
    challenge?: SortOrder
    challengeDepositedAt?: SortOrder
    challengeValidTo?: SortOrder
    challengedReadAt?: SortOrder
  }

  export type DelegatedChallengesMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    appId?: SortOrder
    sessionId?: SortOrder
    requestValidTo?: SortOrder
    delegateAuthCode?: SortOrder
    challenge?: SortOrder
    challengeDepositedAt?: SortOrder
    challengeValidTo?: SortOrder
    challengedReadAt?: SortOrder
  }

  export type DelegatedChallengesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PurchaseLineListRelationFilter = {
    every?: PurchaseLineWhereInput
    some?: PurchaseLineWhereInput
    none?: PurchaseLineWhereInput
  }

  export type InvoiceLineListRelationFilter = {
    every?: InvoiceLineWhereInput
    some?: InvoiceLineWhereInput
    none?: InvoiceLineWhereInput
  }

  export type PurchaseLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfferIdVersionCompoundUniqueInput = {
    id: number
    version: number
  }

  export type OfferCountOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    pictureUrl?: SortOrder
    pictureMimeType?: SortOrder
    description?: SortOrder
    pricePerUnit?: SortOrder
    timeCirclesPriceShare?: SortOrder
  }

  export type OfferAvgOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    timeCirclesPriceShare?: SortOrder
  }

  export type OfferMaxOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    pictureUrl?: SortOrder
    pictureMimeType?: SortOrder
    description?: SortOrder
    pricePerUnit?: SortOrder
    timeCirclesPriceShare?: SortOrder
  }

  export type OfferMinOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    pictureUrl?: SortOrder
    pictureMimeType?: SortOrder
    description?: SortOrder
    pricePerUnit?: SortOrder
    timeCirclesPriceShare?: SortOrder
  }

  export type OfferSumOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    createdByProfileId?: SortOrder
    timeCirclesPriceShare?: SortOrder
  }

  export type PurchaseCountOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseAvgOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
  }

  export type PurchaseMaxOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseMinOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    createdAt?: SortOrder
  }

  export type PurchaseSumOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
  }

  export type PurchaseRelationFilter = {
    is?: PurchaseWhereInput
    isNot?: PurchaseWhereInput
  }

  export type OfferRelationFilter = {
    is?: OfferWhereInput
    isNot?: OfferWhereInput
  }

  export type PurchaseLineCountOrderByAggregateInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type PurchaseLineAvgOrderByAggregateInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type PurchaseLineMaxOrderByAggregateInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type PurchaseLineMinOrderByAggregateInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type PurchaseLineSumOrderByAggregateInput = {
    id?: SortOrder
    purchaseId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    invoiceNo?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    pendingPaymentTransactionHash?: SortOrder
    paymentTransactionHash?: SortOrder
    pickupCode?: SortOrder
    buyerSignature?: SortOrder
    buyerSignedDate?: SortOrder
    sellerSignature?: SortOrder
    sellerSignedDate?: SortOrder
    cancelledAt?: SortOrder
    cancelledByProfileId?: SortOrder
    cancelReason?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    cancelledByProfileId?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    invoiceNo?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    pendingPaymentTransactionHash?: SortOrder
    paymentTransactionHash?: SortOrder
    pickupCode?: SortOrder
    buyerSignature?: SortOrder
    buyerSignedDate?: SortOrder
    sellerSignature?: SortOrder
    sellerSignedDate?: SortOrder
    cancelledAt?: SortOrder
    cancelledByProfileId?: SortOrder
    cancelReason?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    invoiceNo?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    pendingPaymentTransactionHash?: SortOrder
    paymentTransactionHash?: SortOrder
    pickupCode?: SortOrder
    buyerSignature?: SortOrder
    buyerSignedDate?: SortOrder
    sellerSignature?: SortOrder
    sellerSignedDate?: SortOrder
    cancelledAt?: SortOrder
    cancelledByProfileId?: SortOrder
    cancelReason?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    customerProfileId?: SortOrder
    sellerProfileId?: SortOrder
    purchaseId?: SortOrder
    cancelledByProfileId?: SortOrder
  }

  export type InvoiceRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type InvoiceLineCountOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceLineAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceLineMaxOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceLineMinOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type InvoiceLineSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
    amount?: SortOrder
    productId?: SortOrder
    productVersion?: SortOrder
  }

  export type TagTypeCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagTypeMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagTypeMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VerifiedSafeRelationFilter = {
    is?: VerifiedSafeWhereInput | null
    isNot?: VerifiedSafeWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    transactionHash?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    transactionHash?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    transactionHash?: SortOrder
  }

  export type TagTypeRelationFilter = {
    is?: TagTypeWhereInput
    isNot?: TagTypeWhereInput
  }

  export type ChatMessageRelationFilter = {
    is?: ChatMessageWhereInput | null
    isNot?: ChatMessageWhereInput | null
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    isPrivate?: SortOrder
    transactionHash?: SortOrder
    typeId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
    value?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    isPrivate?: SortOrder
    transactionHash?: SortOrder
    typeId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
    value?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdByProfileId?: SortOrder
    isPrivate?: SortOrder
    transactionHash?: SortOrder
    typeId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
    value?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
    createdByProfileId?: SortOrder
    chatMessageId?: SortOrder
    offerId?: SortOrder
    offerVersion?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    hash?: SortOrder
    createdAt?: SortOrder
    timeoutAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    warning?: SortOrder
    info?: SortOrder
    topic?: SortOrder
    payload?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    hash?: SortOrder
    createdAt?: SortOrder
    timeoutAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    warning?: SortOrder
    info?: SortOrder
    topic?: SortOrder
    payload?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    hash?: SortOrder
    createdAt?: SortOrder
    timeoutAt?: SortOrder
    finishedAt?: SortOrder
    error?: SortOrder
    warning?: SortOrder
    info?: SortOrder
    topic?: SortOrder
    payload?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type i18nLangKeyVersionCompoundUniqueInput = {
    lang: string
    key: string
    version: number
  }

  export type i18nCountOrderByAggregateInput = {
    createdAt?: SortOrder
    createdBy?: SortOrder
    lang?: SortOrder
    key?: SortOrder
    version?: SortOrder
    value?: SortOrder
  }

  export type i18nAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type i18nMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    createdBy?: SortOrder
    lang?: SortOrder
    key?: SortOrder
    version?: SortOrder
    value?: SortOrder
  }

  export type i18nMinOrderByAggregateInput = {
    createdAt?: SortOrder
    createdBy?: SortOrder
    lang?: SortOrder
    key?: SortOrder
    version?: SortOrder
    value?: SortOrder
  }

  export type i18nSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ProfileCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ProfileCreateWithoutSessionsInput, ProfileUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSessionsInput
    connect?: ProfileWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProfileUpdateOneWithoutSessionsInput = {
    create?: XOR<ProfileCreateWithoutSessionsInput, ProfileUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSessionsInput
    upsert?: ProfileUpsertWithoutSessionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutSessionsInput, ProfileUncheckedUpdateWithoutSessionsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<ProfileCreateWithoutInvitationsInput, ProfileUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutInvitationsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutClaimedInvitationsInput = {
    create?: XOR<ProfileCreateWithoutClaimedInvitationsInput, ProfileUncheckedCreateWithoutClaimedInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutClaimedInvitationsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutRedeemedInvitationsInput = {
    create?: XOR<ProfileCreateWithoutRedeemedInvitationsInput, ProfileUncheckedCreateWithoutRedeemedInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutRedeemedInvitationsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutInvitationsInput = {
    create?: XOR<ProfileCreateWithoutInvitationsInput, ProfileUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutInvitationsInput
    upsert?: ProfileUpsertWithoutInvitationsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutInvitationsInput, ProfileUncheckedUpdateWithoutInvitationsInput>
  }

  export type ProfileUpdateOneWithoutClaimedInvitationsInput = {
    create?: XOR<ProfileCreateWithoutClaimedInvitationsInput, ProfileUncheckedCreateWithoutClaimedInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutClaimedInvitationsInput
    upsert?: ProfileUpsertWithoutClaimedInvitationsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutClaimedInvitationsInput, ProfileUncheckedUpdateWithoutClaimedInvitationsInput>
  }

  export type ProfileUpdateOneWithoutRedeemedInvitationsInput = {
    create?: XOR<ProfileCreateWithoutRedeemedInvitationsInput, ProfileUncheckedCreateWithoutRedeemedInvitationsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutRedeemedInvitationsInput
    upsert?: ProfileUpsertWithoutRedeemedInvitationsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutRedeemedInvitationsInput, ProfileUncheckedUpdateWithoutRedeemedInvitationsInput>
  }

  export type ProfileCreateNestedOneWithoutInvitationFundsInput = {
    create?: XOR<ProfileCreateWithoutInvitationFundsInput, ProfileUncheckedCreateWithoutInvitationFundsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutInvitationFundsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutInvitationFundsInput = {
    create?: XOR<ProfileCreateWithoutInvitationFundsInput, ProfileUncheckedCreateWithoutInvitationFundsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutInvitationFundsInput
    upsert?: ProfileUpsertWithoutInvitationFundsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutInvitationFundsInput, ProfileUncheckedUpdateWithoutInvitationFundsInput>
  }

  export type ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput = {
    create?: XOR<ProfileCreateWithoutSafesVerifiedByPersonInput, ProfileUncheckedCreateWithoutSafesVerifiedByPersonInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesVerifiedByPersonInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput = {
    create?: XOR<ProfileCreateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedCreateWithoutSafesVerifiedByOrganisationInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesVerifiedByOrganisationInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutSafesRevokedByPersonInput = {
    create?: XOR<ProfileCreateWithoutSafesRevokedByPersonInput, ProfileUncheckedCreateWithoutSafesRevokedByPersonInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesRevokedByPersonInput
    connect?: ProfileWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviteeReward_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutInviteeReward_VerifiedSafeInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviterReward_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutInviterReward_VerifiedSafeInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedCreateWithoutSwapFunding_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutSwapFunding_VerifiedSafeInput
    connect?: TransactionWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput = {
    create?: XOR<ProfileCreateWithoutSafesVerifiedByPersonInput, ProfileUncheckedCreateWithoutSafesVerifiedByPersonInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesVerifiedByPersonInput
    upsert?: ProfileUpsertWithoutSafesVerifiedByPersonInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutSafesVerifiedByPersonInput, ProfileUncheckedUpdateWithoutSafesVerifiedByPersonInput>
  }

  export type ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput = {
    create?: XOR<ProfileCreateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedCreateWithoutSafesVerifiedByOrganisationInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesVerifiedByOrganisationInput
    upsert?: ProfileUpsertWithoutSafesVerifiedByOrganisationInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedUpdateWithoutSafesVerifiedByOrganisationInput>
  }

  export type ProfileUpdateOneWithoutSafesRevokedByPersonInput = {
    create?: XOR<ProfileCreateWithoutSafesRevokedByPersonInput, ProfileUncheckedCreateWithoutSafesRevokedByPersonInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutSafesRevokedByPersonInput
    upsert?: ProfileUpsertWithoutSafesRevokedByPersonInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutSafesRevokedByPersonInput, ProfileUncheckedUpdateWithoutSafesRevokedByPersonInput>
  }

  export type TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviteeReward_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutInviteeReward_VerifiedSafeInput
    upsert?: TransactionUpsertWithoutInviteeReward_VerifiedSafeInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<TransactionUpdateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedUpdateWithoutInviteeReward_VerifiedSafeInput>
  }

  export type TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviterReward_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutInviterReward_VerifiedSafeInput
    upsert?: TransactionUpsertWithoutInviterReward_VerifiedSafeInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<TransactionUpdateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedUpdateWithoutInviterReward_VerifiedSafeInput>
  }

  export type TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput = {
    create?: XOR<TransactionCreateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedCreateWithoutSwapFunding_VerifiedSafeInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutSwapFunding_VerifiedSafeInput
    upsert?: TransactionUpsertWithoutSwapFunding_VerifiedSafeInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<TransactionUpdateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedUpdateWithoutSwapFunding_VerifiedSafeInput>
  }

  export type SessionCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<SessionCreateWithoutProfileInput>, Enumerable<SessionUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutProfileInput>
    createMany?: SessionCreateManyProfileInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TagCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<TagCreateWithoutCreatedByInput>, Enumerable<TagUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutCreatedByInput>
    createMany?: TagCreateManyCreatedByInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type OfferCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<OfferCreateWithoutCreatedByInput>, Enumerable<OfferUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<OfferCreateOrConnectWithoutCreatedByInput>
    createMany?: OfferCreateManyCreatedByInputEnvelope
    connect?: Enumerable<OfferWhereUniqueInput>
  }

  export type PurchaseCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCreatedByInput>, Enumerable<PurchaseUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCreatedByInput>
    createMany?: PurchaseCreateManyCreatedByInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type InvitationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutCreatedByInput>, Enumerable<InvitationUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutCreatedByInput>
    createMany?: InvitationCreateManyCreatedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type InvitationFundsEOACreateNestedOneWithoutProfileInput = {
    create?: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
    connectOrCreate?: InvitationFundsEOACreateOrConnectWithoutProfileInput
    connect?: InvitationFundsEOAWhereUniqueInput
  }

  export type InvitationCreateNestedManyWithoutRedeemedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutRedeemedByInput>, Enumerable<InvitationUncheckedCreateWithoutRedeemedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutRedeemedByInput>
    createMany?: InvitationCreateManyRedeemedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type InvitationCreateNestedManyWithoutClaimedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutClaimedByInput>, Enumerable<InvitationUncheckedCreateWithoutClaimedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutClaimedByInput>
    createMany?: InvitationCreateManyClaimedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type MembershipCreateNestedManyWithoutMemberAtInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutMemberAtInput>, Enumerable<MembershipUncheckedCreateWithoutMemberAtInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutMemberAtInput>
    createMany?: MembershipCreateManyMemberAtInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type MembershipCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCreatedByInput>, Enumerable<MembershipUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCreatedByInput>
    createMany?: MembershipCreateManyCreatedByInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutCustomerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCustomerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutCustomerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCustomerProfileInput>
    createMany?: InvoiceCreateManyCustomerProfileInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutSellerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutSellerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutSellerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutSellerProfileInput>
    createMany?: InvoiceCreateManySellerProfileInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutCancelledByInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCancelledByInput>, Enumerable<InvoiceUncheckedCreateWithoutCancelledByInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCancelledByInput>
    createMany?: InvoiceCreateManyCancelledByInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type VerifiedSafeCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByInput>
    createMany?: VerifiedSafeCreateManyCreatedByInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByOrganisationInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByOrganisationInput>
    createMany?: VerifiedSafeCreateManyCreatedByOrganisationInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type VerifiedSafeCreateNestedManyWithoutRevokedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutRevokedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutRevokedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutRevokedByInput>
    createMany?: VerifiedSafeCreateManyRevokedByInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<SessionCreateWithoutProfileInput>, Enumerable<SessionUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutProfileInput>
    createMany?: SessionCreateManyProfileInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<TagCreateWithoutCreatedByInput>, Enumerable<TagUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutCreatedByInput>
    createMany?: TagCreateManyCreatedByInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type OfferUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<OfferCreateWithoutCreatedByInput>, Enumerable<OfferUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<OfferCreateOrConnectWithoutCreatedByInput>
    createMany?: OfferCreateManyCreatedByInputEnvelope
    connect?: Enumerable<OfferWhereUniqueInput>
  }

  export type PurchaseUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCreatedByInput>, Enumerable<PurchaseUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCreatedByInput>
    createMany?: PurchaseCreateManyCreatedByInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type InvitationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutCreatedByInput>, Enumerable<InvitationUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutCreatedByInput>
    createMany?: InvitationCreateManyCreatedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
    connectOrCreate?: InvitationFundsEOACreateOrConnectWithoutProfileInput
    connect?: InvitationFundsEOAWhereUniqueInput
  }

  export type InvitationUncheckedCreateNestedManyWithoutRedeemedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutRedeemedByInput>, Enumerable<InvitationUncheckedCreateWithoutRedeemedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutRedeemedByInput>
    createMany?: InvitationCreateManyRedeemedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type InvitationUncheckedCreateNestedManyWithoutClaimedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutClaimedByInput>, Enumerable<InvitationUncheckedCreateWithoutClaimedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutClaimedByInput>
    createMany?: InvitationCreateManyClaimedByInputEnvelope
    connect?: Enumerable<InvitationWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutMemberAtInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutMemberAtInput>, Enumerable<MembershipUncheckedCreateWithoutMemberAtInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutMemberAtInput>
    createMany?: MembershipCreateManyMemberAtInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCreatedByInput>, Enumerable<MembershipUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCreatedByInput>
    createMany?: MembershipCreateManyCreatedByInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCustomerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutCustomerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCustomerProfileInput>
    createMany?: InvoiceCreateManyCustomerProfileInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutSellerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutSellerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutSellerProfileInput>
    createMany?: InvoiceCreateManySellerProfileInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCancelledByInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCancelledByInput>, Enumerable<InvoiceUncheckedCreateWithoutCancelledByInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCancelledByInput>
    createMany?: InvoiceCreateManyCancelledByInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByInput>
    createMany?: VerifiedSafeCreateManyCreatedByInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByOrganisationInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByOrganisationInput>
    createMany?: VerifiedSafeCreateManyCreatedByOrganisationInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutRevokedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutRevokedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutRevokedByInput>
    createMany?: VerifiedSafeCreateManyRevokedByInputEnvelope
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableEnumProfileTypeFieldUpdateOperationsInput = {
    set?: ProfileType | null
  }

  export type SessionUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<SessionCreateWithoutProfileInput>, Enumerable<SessionUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: SessionCreateManyProfileInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TagUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<TagCreateWithoutCreatedByInput>, Enumerable<TagUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: TagCreateManyCreatedByInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type OfferUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<OfferCreateWithoutCreatedByInput>, Enumerable<OfferUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<OfferCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<OfferUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: OfferCreateManyCreatedByInputEnvelope
    set?: Enumerable<OfferWhereUniqueInput>
    disconnect?: Enumerable<OfferWhereUniqueInput>
    delete?: Enumerable<OfferWhereUniqueInput>
    connect?: Enumerable<OfferWhereUniqueInput>
    update?: Enumerable<OfferUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<OfferUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<OfferScalarWhereInput>
  }

  export type PurchaseUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCreatedByInput>, Enumerable<PurchaseUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: PurchaseCreateManyCreatedByInputEnvelope
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type InvitationUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutCreatedByInput>, Enumerable<InvitationUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: InvitationCreateManyCreatedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type InvitationFundsEOAUpdateOneWithoutProfileInput = {
    create?: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
    connectOrCreate?: InvitationFundsEOACreateOrConnectWithoutProfileInput
    upsert?: InvitationFundsEOAUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvitationFundsEOAWhereUniqueInput
    update?: XOR<InvitationFundsEOAUpdateWithoutProfileInput, InvitationFundsEOAUncheckedUpdateWithoutProfileInput>
  }

  export type InvitationUpdateManyWithoutRedeemedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutRedeemedByInput>, Enumerable<InvitationUncheckedCreateWithoutRedeemedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutRedeemedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutRedeemedByInput>
    createMany?: InvitationCreateManyRedeemedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutRedeemedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutRedeemedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type InvitationUpdateManyWithoutClaimedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutClaimedByInput>, Enumerable<InvitationUncheckedCreateWithoutClaimedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutClaimedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutClaimedByInput>
    createMany?: InvitationCreateManyClaimedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutClaimedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutClaimedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type MembershipUpdateManyWithoutMemberAtInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutMemberAtInput>, Enumerable<MembershipUncheckedCreateWithoutMemberAtInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutMemberAtInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutMemberAtInput>
    createMany?: MembershipCreateManyMemberAtInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutMemberAtInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutMemberAtInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type MembershipUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCreatedByInput>, Enumerable<MembershipUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: MembershipCreateManyCreatedByInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutCustomerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCustomerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutCustomerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCustomerProfileInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutCustomerProfileInput>
    createMany?: InvoiceCreateManyCustomerProfileInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutCustomerProfileInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutCustomerProfileInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutSellerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutSellerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutSellerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutSellerProfileInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutSellerProfileInput>
    createMany?: InvoiceCreateManySellerProfileInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutSellerProfileInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutSellerProfileInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutCancelledByInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCancelledByInput>, Enumerable<InvoiceUncheckedCreateWithoutCancelledByInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCancelledByInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutCancelledByInput>
    createMany?: InvoiceCreateManyCancelledByInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutCancelledByInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutCancelledByInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type VerifiedSafeUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: VerifiedSafeCreateManyCreatedByInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByOrganisationInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByOrganisationInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByOrganisationInput>
    createMany?: VerifiedSafeCreateManyCreatedByOrganisationInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByOrganisationInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutCreatedByOrganisationInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type VerifiedSafeUpdateManyWithoutRevokedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutRevokedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutRevokedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutRevokedByInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutRevokedByInput>
    createMany?: VerifiedSafeCreateManyRevokedByInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutRevokedByInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutRevokedByInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<SessionCreateWithoutProfileInput>, Enumerable<SessionUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: SessionCreateManyProfileInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type TagUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<TagCreateWithoutCreatedByInput>, Enumerable<TagUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: TagCreateManyCreatedByInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type OfferUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<OfferCreateWithoutCreatedByInput>, Enumerable<OfferUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<OfferCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<OfferUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: OfferCreateManyCreatedByInputEnvelope
    set?: Enumerable<OfferWhereUniqueInput>
    disconnect?: Enumerable<OfferWhereUniqueInput>
    delete?: Enumerable<OfferWhereUniqueInput>
    connect?: Enumerable<OfferWhereUniqueInput>
    update?: Enumerable<OfferUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<OfferUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<OfferScalarWhereInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCreatedByInput>, Enumerable<PurchaseUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: PurchaseCreateManyCreatedByInputEnvelope
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    connect?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type InvitationUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutCreatedByInput>, Enumerable<InvitationUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: InvitationCreateManyCreatedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput = {
    create?: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
    connectOrCreate?: InvitationFundsEOACreateOrConnectWithoutProfileInput
    upsert?: InvitationFundsEOAUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvitationFundsEOAWhereUniqueInput
    update?: XOR<InvitationFundsEOAUpdateWithoutProfileInput, InvitationFundsEOAUncheckedUpdateWithoutProfileInput>
  }

  export type InvitationUncheckedUpdateManyWithoutRedeemedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutRedeemedByInput>, Enumerable<InvitationUncheckedCreateWithoutRedeemedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutRedeemedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutRedeemedByInput>
    createMany?: InvitationCreateManyRedeemedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutRedeemedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutRedeemedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type InvitationUncheckedUpdateManyWithoutClaimedByInput = {
    create?: XOR<Enumerable<InvitationCreateWithoutClaimedByInput>, Enumerable<InvitationUncheckedCreateWithoutClaimedByInput>>
    connectOrCreate?: Enumerable<InvitationCreateOrConnectWithoutClaimedByInput>
    upsert?: Enumerable<InvitationUpsertWithWhereUniqueWithoutClaimedByInput>
    createMany?: InvitationCreateManyClaimedByInputEnvelope
    set?: Enumerable<InvitationWhereUniqueInput>
    disconnect?: Enumerable<InvitationWhereUniqueInput>
    delete?: Enumerable<InvitationWhereUniqueInput>
    connect?: Enumerable<InvitationWhereUniqueInput>
    update?: Enumerable<InvitationUpdateWithWhereUniqueWithoutClaimedByInput>
    updateMany?: Enumerable<InvitationUpdateManyWithWhereWithoutClaimedByInput>
    deleteMany?: Enumerable<InvitationScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutMemberAtInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutMemberAtInput>, Enumerable<MembershipUncheckedCreateWithoutMemberAtInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutMemberAtInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutMemberAtInput>
    createMany?: MembershipCreateManyMemberAtInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutMemberAtInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutMemberAtInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCreatedByInput>, Enumerable<MembershipUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: MembershipCreateManyCreatedByInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutCustomerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCustomerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutCustomerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCustomerProfileInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutCustomerProfileInput>
    createMany?: InvoiceCreateManyCustomerProfileInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutCustomerProfileInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutCustomerProfileInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutSellerProfileInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutSellerProfileInput>, Enumerable<InvoiceUncheckedCreateWithoutSellerProfileInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutSellerProfileInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutSellerProfileInput>
    createMany?: InvoiceCreateManySellerProfileInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutSellerProfileInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutSellerProfileInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutCancelledByInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutCancelledByInput>, Enumerable<InvoiceUncheckedCreateWithoutCancelledByInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutCancelledByInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutCancelledByInput>
    createMany?: InvoiceCreateManyCancelledByInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutCancelledByInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutCancelledByInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByInput>
    createMany?: VerifiedSafeCreateManyCreatedByInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutCreatedByOrganisationInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutCreatedByOrganisationInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByOrganisationInput>
    createMany?: VerifiedSafeCreateManyCreatedByOrganisationInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByOrganisationInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutCreatedByOrganisationInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput = {
    create?: XOR<Enumerable<VerifiedSafeCreateWithoutRevokedByInput>, Enumerable<VerifiedSafeUncheckedCreateWithoutRevokedByInput>>
    connectOrCreate?: Enumerable<VerifiedSafeCreateOrConnectWithoutRevokedByInput>
    upsert?: Enumerable<VerifiedSafeUpsertWithWhereUniqueWithoutRevokedByInput>
    createMany?: VerifiedSafeCreateManyRevokedByInputEnvelope
    set?: Enumerable<VerifiedSafeWhereUniqueInput>
    disconnect?: Enumerable<VerifiedSafeWhereUniqueInput>
    delete?: Enumerable<VerifiedSafeWhereUniqueInput>
    connect?: Enumerable<VerifiedSafeWhereUniqueInput>
    update?: Enumerable<VerifiedSafeUpdateWithWhereUniqueWithoutRevokedByInput>
    updateMany?: Enumerable<VerifiedSafeUpdateManyWithWhereWithoutRevokedByInput>
    deleteMany?: Enumerable<VerifiedSafeScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutCreatedMembershipsInput = {
    create?: XOR<ProfileCreateWithoutCreatedMembershipsInput, ProfileUncheckedCreateWithoutCreatedMembershipsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedMembershipsInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutMembersInput = {
    create?: XOR<ProfileCreateWithoutMembersInput, ProfileUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMembersInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutCreatedMembershipsInput = {
    create?: XOR<ProfileCreateWithoutCreatedMembershipsInput, ProfileUncheckedCreateWithoutCreatedMembershipsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedMembershipsInput
    upsert?: ProfileUpsertWithoutCreatedMembershipsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutCreatedMembershipsInput, ProfileUncheckedUpdateWithoutCreatedMembershipsInput>
  }

  export type ProfileUpdateOneRequiredWithoutMembersInput = {
    create?: XOR<ProfileCreateWithoutMembersInput, ProfileUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutMembersInput
    upsert?: ProfileUpsertWithoutMembersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutMembersInput, ProfileUncheckedUpdateWithoutMembersInput>
  }

  export type TagCreateNestedManyWithoutChatMessageInput = {
    create?: XOR<Enumerable<TagCreateWithoutChatMessageInput>, Enumerable<TagUncheckedCreateWithoutChatMessageInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutChatMessageInput>
    createMany?: TagCreateManyChatMessageInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutChatMessageInput = {
    create?: XOR<Enumerable<TagCreateWithoutChatMessageInput>, Enumerable<TagUncheckedCreateWithoutChatMessageInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutChatMessageInput>
    createMany?: TagCreateManyChatMessageInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type TagUpdateManyWithoutChatMessageInput = {
    create?: XOR<Enumerable<TagCreateWithoutChatMessageInput>, Enumerable<TagUncheckedCreateWithoutChatMessageInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutChatMessageInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutChatMessageInput>
    createMany?: TagCreateManyChatMessageInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutChatMessageInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutChatMessageInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type TagUncheckedUpdateManyWithoutChatMessageInput = {
    create?: XOR<Enumerable<TagCreateWithoutChatMessageInput>, Enumerable<TagUncheckedCreateWithoutChatMessageInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutChatMessageInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutChatMessageInput>
    createMany?: TagCreateManyChatMessageInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutChatMessageInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutChatMessageInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutOffersInput = {
    create?: XOR<ProfileCreateWithoutOffersInput, ProfileUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOffersInput
    connect?: ProfileWhereUniqueInput
  }

  export type PurchaseLineCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutProductInput>, Enumerable<PurchaseLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutProductInput>
    createMany?: PurchaseLineCreateManyProductInputEnvelope
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
  }

  export type InvoiceLineCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutProductInput>, Enumerable<InvoiceLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutProductInput>
    createMany?: InvoiceLineCreateManyProductInputEnvelope
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
  }

  export type TagCreateNestedManyWithoutOfferInput = {
    create?: XOR<Enumerable<TagCreateWithoutOfferInput>, Enumerable<TagUncheckedCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutOfferInput>
    createMany?: TagCreateManyOfferInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type PurchaseLineUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutProductInput>, Enumerable<PurchaseLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutProductInput>
    createMany?: PurchaseLineCreateManyProductInputEnvelope
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
  }

  export type InvoiceLineUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutProductInput>, Enumerable<InvoiceLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutProductInput>
    createMany?: InvoiceLineCreateManyProductInputEnvelope
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutOfferInput = {
    create?: XOR<Enumerable<TagCreateWithoutOfferInput>, Enumerable<TagUncheckedCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutOfferInput>
    createMany?: TagCreateManyOfferInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutOffersInput = {
    create?: XOR<ProfileCreateWithoutOffersInput, ProfileUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOffersInput
    upsert?: ProfileUpsertWithoutOffersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutOffersInput, ProfileUncheckedUpdateWithoutOffersInput>
  }

  export type PurchaseLineUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutProductInput>, Enumerable<PurchaseLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<PurchaseLineUpsertWithWhereUniqueWithoutProductInput>
    createMany?: PurchaseLineCreateManyProductInputEnvelope
    set?: Enumerable<PurchaseLineWhereUniqueInput>
    disconnect?: Enumerable<PurchaseLineWhereUniqueInput>
    delete?: Enumerable<PurchaseLineWhereUniqueInput>
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
    update?: Enumerable<PurchaseLineUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<PurchaseLineUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<PurchaseLineScalarWhereInput>
  }

  export type InvoiceLineUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutProductInput>, Enumerable<InvoiceLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<InvoiceLineUpsertWithWhereUniqueWithoutProductInput>
    createMany?: InvoiceLineCreateManyProductInputEnvelope
    set?: Enumerable<InvoiceLineWhereUniqueInput>
    disconnect?: Enumerable<InvoiceLineWhereUniqueInput>
    delete?: Enumerable<InvoiceLineWhereUniqueInput>
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
    update?: Enumerable<InvoiceLineUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<InvoiceLineUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<InvoiceLineScalarWhereInput>
  }

  export type TagUpdateManyWithoutOfferInput = {
    create?: XOR<Enumerable<TagCreateWithoutOfferInput>, Enumerable<TagUncheckedCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutOfferInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutOfferInput>
    createMany?: TagCreateManyOfferInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutOfferInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutOfferInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type PurchaseLineUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutProductInput>, Enumerable<PurchaseLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<PurchaseLineUpsertWithWhereUniqueWithoutProductInput>
    createMany?: PurchaseLineCreateManyProductInputEnvelope
    set?: Enumerable<PurchaseLineWhereUniqueInput>
    disconnect?: Enumerable<PurchaseLineWhereUniqueInput>
    delete?: Enumerable<PurchaseLineWhereUniqueInput>
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
    update?: Enumerable<PurchaseLineUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<PurchaseLineUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<PurchaseLineScalarWhereInput>
  }

  export type InvoiceLineUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutProductInput>, Enumerable<InvoiceLineUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<InvoiceLineUpsertWithWhereUniqueWithoutProductInput>
    createMany?: InvoiceLineCreateManyProductInputEnvelope
    set?: Enumerable<InvoiceLineWhereUniqueInput>
    disconnect?: Enumerable<InvoiceLineWhereUniqueInput>
    delete?: Enumerable<InvoiceLineWhereUniqueInput>
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
    update?: Enumerable<InvoiceLineUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<InvoiceLineUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<InvoiceLineScalarWhereInput>
  }

  export type TagUncheckedUpdateManyWithoutOfferInput = {
    create?: XOR<Enumerable<TagCreateWithoutOfferInput>, Enumerable<TagUncheckedCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutOfferInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutOfferInput>
    createMany?: TagCreateManyOfferInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutOfferInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutOfferInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutPurchasesInput = {
    create?: XOR<ProfileCreateWithoutPurchasesInput, ProfileUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPurchasesInput
    connect?: ProfileWhereUniqueInput
  }

  export type PurchaseLineCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutPurchaseInput>, Enumerable<PurchaseLineUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutPurchaseInput>
    createMany?: PurchaseLineCreateManyPurchaseInputEnvelope
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
  }

  export type InvoiceCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutPurchaseInput>, Enumerable<InvoiceUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutPurchaseInput>
    createMany?: InvoiceCreateManyPurchaseInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type PurchaseLineUncheckedCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutPurchaseInput>, Enumerable<PurchaseLineUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutPurchaseInput>
    createMany?: PurchaseLineCreateManyPurchaseInputEnvelope
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutPurchaseInput>, Enumerable<InvoiceUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutPurchaseInput>
    createMany?: InvoiceCreateManyPurchaseInputEnvelope
    connect?: Enumerable<InvoiceWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutPurchasesInput = {
    create?: XOR<ProfileCreateWithoutPurchasesInput, ProfileUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPurchasesInput
    upsert?: ProfileUpsertWithoutPurchasesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutPurchasesInput, ProfileUncheckedUpdateWithoutPurchasesInput>
  }

  export type PurchaseLineUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutPurchaseInput>, Enumerable<PurchaseLineUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<PurchaseLineUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: PurchaseLineCreateManyPurchaseInputEnvelope
    set?: Enumerable<PurchaseLineWhereUniqueInput>
    disconnect?: Enumerable<PurchaseLineWhereUniqueInput>
    delete?: Enumerable<PurchaseLineWhereUniqueInput>
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
    update?: Enumerable<PurchaseLineUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<PurchaseLineUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<PurchaseLineScalarWhereInput>
  }

  export type InvoiceUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutPurchaseInput>, Enumerable<InvoiceUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: InvoiceCreateManyPurchaseInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type PurchaseLineUncheckedUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<PurchaseLineCreateWithoutPurchaseInput>, Enumerable<PurchaseLineUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<PurchaseLineCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<PurchaseLineUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: PurchaseLineCreateManyPurchaseInputEnvelope
    set?: Enumerable<PurchaseLineWhereUniqueInput>
    disconnect?: Enumerable<PurchaseLineWhereUniqueInput>
    delete?: Enumerable<PurchaseLineWhereUniqueInput>
    connect?: Enumerable<PurchaseLineWhereUniqueInput>
    update?: Enumerable<PurchaseLineUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<PurchaseLineUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<PurchaseLineScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<InvoiceCreateWithoutPurchaseInput>, Enumerable<InvoiceUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<InvoiceCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<InvoiceUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: InvoiceCreateManyPurchaseInputEnvelope
    set?: Enumerable<InvoiceWhereUniqueInput>
    disconnect?: Enumerable<InvoiceWhereUniqueInput>
    delete?: Enumerable<InvoiceWhereUniqueInput>
    connect?: Enumerable<InvoiceWhereUniqueInput>
    update?: Enumerable<InvoiceUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<InvoiceUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<InvoiceScalarWhereInput>
  }

  export type PurchaseCreateNestedOneWithoutLinesInput = {
    create?: XOR<PurchaseCreateWithoutLinesInput, PurchaseUncheckedCreateWithoutLinesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutLinesInput
    connect?: PurchaseWhereUniqueInput
  }

  export type OfferCreateNestedOneWithoutPurchaseLinesInput = {
    create?: XOR<OfferCreateWithoutPurchaseLinesInput, OfferUncheckedCreateWithoutPurchaseLinesInput>
    connectOrCreate?: OfferCreateOrConnectWithoutPurchaseLinesInput
    connect?: OfferWhereUniqueInput
  }

  export type PurchaseUpdateOneRequiredWithoutLinesInput = {
    create?: XOR<PurchaseCreateWithoutLinesInput, PurchaseUncheckedCreateWithoutLinesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutLinesInput
    upsert?: PurchaseUpsertWithoutLinesInput
    connect?: PurchaseWhereUniqueInput
    update?: XOR<PurchaseUpdateWithoutLinesInput, PurchaseUncheckedUpdateWithoutLinesInput>
  }

  export type OfferUpdateOneRequiredWithoutPurchaseLinesInput = {
    create?: XOR<OfferCreateWithoutPurchaseLinesInput, OfferUncheckedCreateWithoutPurchaseLinesInput>
    connectOrCreate?: OfferCreateOrConnectWithoutPurchaseLinesInput
    upsert?: OfferUpsertWithoutPurchaseLinesInput
    connect?: OfferWhereUniqueInput
    update?: XOR<OfferUpdateWithoutPurchaseLinesInput, OfferUncheckedUpdateWithoutPurchaseLinesInput>
  }

  export type ProfileCreateNestedOneWithoutPayableInvoicesInput = {
    create?: XOR<ProfileCreateWithoutPayableInvoicesInput, ProfileUncheckedCreateWithoutPayableInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPayableInvoicesInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutReceivableInvoicesInput = {
    create?: XOR<ProfileCreateWithoutReceivableInvoicesInput, ProfileUncheckedCreateWithoutReceivableInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReceivableInvoicesInput
    connect?: ProfileWhereUniqueInput
  }

  export type PurchaseCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<PurchaseCreateWithoutInvoicesInput, PurchaseUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutInvoicesInput
    connect?: PurchaseWhereUniqueInput
  }

  export type InvoiceLineCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutInvoiceInput>, Enumerable<InvoiceLineUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutInvoiceInput>
    createMany?: InvoiceLineCreateManyInvoiceInputEnvelope
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
  }

  export type TransactionCreateNestedOneWithoutPayedInvoiceInput = {
    create?: XOR<TransactionCreateWithoutPayedInvoiceInput, TransactionUncheckedCreateWithoutPayedInvoiceInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutPayedInvoiceInput
    connect?: TransactionWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutCancelledInvoicesInput = {
    create?: XOR<ProfileCreateWithoutCancelledInvoicesInput, ProfileUncheckedCreateWithoutCancelledInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCancelledInvoicesInput
    connect?: ProfileWhereUniqueInput
  }

  export type InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutInvoiceInput>, Enumerable<InvoiceLineUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutInvoiceInput>
    createMany?: InvoiceLineCreateManyInvoiceInputEnvelope
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutPayableInvoicesInput = {
    create?: XOR<ProfileCreateWithoutPayableInvoicesInput, ProfileUncheckedCreateWithoutPayableInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPayableInvoicesInput
    upsert?: ProfileUpsertWithoutPayableInvoicesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutPayableInvoicesInput, ProfileUncheckedUpdateWithoutPayableInvoicesInput>
  }

  export type ProfileUpdateOneRequiredWithoutReceivableInvoicesInput = {
    create?: XOR<ProfileCreateWithoutReceivableInvoicesInput, ProfileUncheckedCreateWithoutReceivableInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReceivableInvoicesInput
    upsert?: ProfileUpsertWithoutReceivableInvoicesInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutReceivableInvoicesInput, ProfileUncheckedUpdateWithoutReceivableInvoicesInput>
  }

  export type PurchaseUpdateOneRequiredWithoutInvoicesInput = {
    create?: XOR<PurchaseCreateWithoutInvoicesInput, PurchaseUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutInvoicesInput
    upsert?: PurchaseUpsertWithoutInvoicesInput
    connect?: PurchaseWhereUniqueInput
    update?: XOR<PurchaseUpdateWithoutInvoicesInput, PurchaseUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceLineUpdateManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutInvoiceInput>, Enumerable<InvoiceLineUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutInvoiceInput>
    upsert?: Enumerable<InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput>
    createMany?: InvoiceLineCreateManyInvoiceInputEnvelope
    set?: Enumerable<InvoiceLineWhereUniqueInput>
    disconnect?: Enumerable<InvoiceLineWhereUniqueInput>
    delete?: Enumerable<InvoiceLineWhereUniqueInput>
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
    update?: Enumerable<InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput>
    updateMany?: Enumerable<InvoiceLineUpdateManyWithWhereWithoutInvoiceInput>
    deleteMany?: Enumerable<InvoiceLineScalarWhereInput>
  }

  export type TransactionUpdateOneWithoutPayedInvoiceInput = {
    create?: XOR<TransactionCreateWithoutPayedInvoiceInput, TransactionUncheckedCreateWithoutPayedInvoiceInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutPayedInvoiceInput
    upsert?: TransactionUpsertWithoutPayedInvoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<TransactionUpdateWithoutPayedInvoiceInput, TransactionUncheckedUpdateWithoutPayedInvoiceInput>
  }

  export type ProfileUpdateOneWithoutCancelledInvoicesInput = {
    create?: XOR<ProfileCreateWithoutCancelledInvoicesInput, ProfileUncheckedCreateWithoutCancelledInvoicesInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutCancelledInvoicesInput
    upsert?: ProfileUpsertWithoutCancelledInvoicesInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutCancelledInvoicesInput, ProfileUncheckedUpdateWithoutCancelledInvoicesInput>
  }

  export type InvoiceLineUncheckedUpdateManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceLineCreateWithoutInvoiceInput>, Enumerable<InvoiceLineUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceLineCreateOrConnectWithoutInvoiceInput>
    upsert?: Enumerable<InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput>
    createMany?: InvoiceLineCreateManyInvoiceInputEnvelope
    set?: Enumerable<InvoiceLineWhereUniqueInput>
    disconnect?: Enumerable<InvoiceLineWhereUniqueInput>
    delete?: Enumerable<InvoiceLineWhereUniqueInput>
    connect?: Enumerable<InvoiceLineWhereUniqueInput>
    update?: Enumerable<InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput>
    updateMany?: Enumerable<InvoiceLineUpdateManyWithWhereWithoutInvoiceInput>
    deleteMany?: Enumerable<InvoiceLineScalarWhereInput>
  }

  export type InvoiceCreateNestedOneWithoutLinesInput = {
    create?: XOR<InvoiceCreateWithoutLinesInput, InvoiceUncheckedCreateWithoutLinesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutLinesInput
    connect?: InvoiceWhereUniqueInput
  }

  export type OfferCreateNestedOneWithoutInvoiceLinesInput = {
    create?: XOR<OfferCreateWithoutInvoiceLinesInput, OfferUncheckedCreateWithoutInvoiceLinesInput>
    connectOrCreate?: OfferCreateOrConnectWithoutInvoiceLinesInput
    connect?: OfferWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutLinesInput = {
    create?: XOR<InvoiceCreateWithoutLinesInput, InvoiceUncheckedCreateWithoutLinesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutLinesInput
    upsert?: InvoiceUpsertWithoutLinesInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutLinesInput, InvoiceUncheckedUpdateWithoutLinesInput>
  }

  export type OfferUpdateOneRequiredWithoutInvoiceLinesInput = {
    create?: XOR<OfferCreateWithoutInvoiceLinesInput, OfferUncheckedCreateWithoutInvoiceLinesInput>
    connectOrCreate?: OfferCreateOrConnectWithoutInvoiceLinesInput
    upsert?: OfferUpsertWithoutInvoiceLinesInput
    connect?: OfferWhereUniqueInput
    update?: XOR<OfferUpdateWithoutInvoiceLinesInput, OfferUncheckedUpdateWithoutInvoiceLinesInput>
  }

  export type TagCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<TagCreateWithoutTypeInput>, Enumerable<TagUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTypeInput>
    createMany?: TagCreateManyTypeInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<Enumerable<TagCreateWithoutTypeInput>, Enumerable<TagUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTypeInput>
    createMany?: TagCreateManyTypeInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type TagUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<TagCreateWithoutTypeInput>, Enumerable<TagUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: TagCreateManyTypeInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type TagUncheckedUpdateManyWithoutTypeInput = {
    create?: XOR<Enumerable<TagCreateWithoutTypeInput>, Enumerable<TagUncheckedCreateWithoutTypeInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTypeInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutTypeInput>
    createMany?: TagCreateManyTypeInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutTypeInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutTypeInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type TagCreateNestedManyWithoutTransactionInput = {
    create?: XOR<Enumerable<TagCreateWithoutTransactionInput>, Enumerable<TagUncheckedCreateWithoutTransactionInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTransactionInput>
    createMany?: TagCreateManyTransactionInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type InvoiceCreateNestedOneWithoutPaymentTransactionInput = {
    create?: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentTransactionInput
    connect?: InvoiceWhereUniqueInput
  }

  export type VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviteeRewardTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviterRewardTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutSwapFundingTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type TagUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<Enumerable<TagCreateWithoutTransactionInput>, Enumerable<TagUncheckedCreateWithoutTransactionInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTransactionInput>
    createMany?: TagCreateManyTransactionInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput = {
    create?: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentTransactionInput
    connect?: InvoiceWhereUniqueInput
  }

  export type VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviteeRewardTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviterRewardTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutSwapFundingTransactionInput
    connect?: VerifiedSafeWhereUniqueInput
  }

  export type TagUpdateManyWithoutTransactionInput = {
    create?: XOR<Enumerable<TagCreateWithoutTransactionInput>, Enumerable<TagUncheckedCreateWithoutTransactionInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTransactionInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutTransactionInput>
    createMany?: TagCreateManyTransactionInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutTransactionInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutTransactionInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type InvoiceUpdateOneWithoutPaymentTransactionInput = {
    create?: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentTransactionInput
    upsert?: InvoiceUpsertWithoutPaymentTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutPaymentTransactionInput, InvoiceUncheckedUpdateWithoutPaymentTransactionInput>
  }

  export type VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviteeRewardTransactionInput
    upsert?: VerifiedSafeUpsertWithoutInviteeRewardTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviteeRewardTransactionInput>
  }

  export type VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviterRewardTransactionInput
    upsert?: VerifiedSafeUpsertWithoutInviterRewardTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviterRewardTransactionInput>
  }

  export type VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutSwapFundingTransactionInput
    upsert?: VerifiedSafeUpsertWithoutSwapFundingTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedUpdateWithoutSwapFundingTransactionInput>
  }

  export type TagUncheckedUpdateManyWithoutTransactionInput = {
    create?: XOR<Enumerable<TagCreateWithoutTransactionInput>, Enumerable<TagUncheckedCreateWithoutTransactionInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutTransactionInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutTransactionInput>
    createMany?: TagCreateManyTransactionInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutTransactionInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutTransactionInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput = {
    create?: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutPaymentTransactionInput
    upsert?: InvoiceUpsertWithoutPaymentTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutPaymentTransactionInput, InvoiceUncheckedUpdateWithoutPaymentTransactionInput>
  }

  export type VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviteeRewardTransactionInput
    upsert?: VerifiedSafeUpsertWithoutInviteeRewardTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviteeRewardTransactionInput>
  }

  export type VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutInviterRewardTransactionInput
    upsert?: VerifiedSafeUpsertWithoutInviterRewardTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviterRewardTransactionInput>
  }

  export type VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput = {
    create?: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
    connectOrCreate?: VerifiedSafeCreateOrConnectWithoutSwapFundingTransactionInput
    upsert?: VerifiedSafeUpsertWithoutSwapFundingTransactionInput
    disconnect?: boolean
    delete?: boolean
    connect?: VerifiedSafeWhereUniqueInput
    update?: XOR<VerifiedSafeUpdateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedUpdateWithoutSwapFundingTransactionInput>
  }

  export type ProfileCreateNestedOneWithoutTagsInput = {
    create?: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagsInput
    connect?: ProfileWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutTagsInput = {
    create?: XOR<TransactionCreateWithoutTagsInput, TransactionUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutTagsInput
    connect?: TransactionWhereUniqueInput
  }

  export type TagTypeCreateNestedOneWithoutTagsInput = {
    create?: XOR<TagTypeCreateWithoutTagsInput, TagTypeUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TagTypeCreateOrConnectWithoutTagsInput
    connect?: TagTypeWhereUniqueInput
  }

  export type ChatMessageCreateNestedOneWithoutTagsInput = {
    create?: XOR<ChatMessageCreateWithoutTagsInput, ChatMessageUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutTagsInput
    connect?: ChatMessageWhereUniqueInput
  }

  export type OfferCreateNestedOneWithoutTagsInput = {
    create?: XOR<OfferCreateWithoutTagsInput, OfferUncheckedCreateWithoutTagsInput>
    connectOrCreate?: OfferCreateOrConnectWithoutTagsInput
    connect?: OfferWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutTagsInput = {
    create?: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutTagsInput
    upsert?: ProfileUpsertWithoutTagsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutTagsInput, ProfileUncheckedUpdateWithoutTagsInput>
  }

  export type TransactionUpdateOneWithoutTagsInput = {
    create?: XOR<TransactionCreateWithoutTagsInput, TransactionUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutTagsInput
    upsert?: TransactionUpsertWithoutTagsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<TransactionUpdateWithoutTagsInput, TransactionUncheckedUpdateWithoutTagsInput>
  }

  export type TagTypeUpdateOneRequiredWithoutTagsInput = {
    create?: XOR<TagTypeCreateWithoutTagsInput, TagTypeUncheckedCreateWithoutTagsInput>
    connectOrCreate?: TagTypeCreateOrConnectWithoutTagsInput
    upsert?: TagTypeUpsertWithoutTagsInput
    connect?: TagTypeWhereUniqueInput
    update?: XOR<TagTypeUpdateWithoutTagsInput, TagTypeUncheckedUpdateWithoutTagsInput>
  }

  export type ChatMessageUpdateOneWithoutTagsInput = {
    create?: XOR<ChatMessageCreateWithoutTagsInput, ChatMessageUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutTagsInput
    upsert?: ChatMessageUpsertWithoutTagsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ChatMessageWhereUniqueInput
    update?: XOR<ChatMessageUpdateWithoutTagsInput, ChatMessageUncheckedUpdateWithoutTagsInput>
  }

  export type OfferUpdateOneWithoutTagsInput = {
    create?: XOR<OfferCreateWithoutTagsInput, OfferUncheckedCreateWithoutTagsInput>
    connectOrCreate?: OfferCreateOrConnectWithoutTagsInput
    upsert?: OfferUpsertWithoutTagsInput
    disconnect?: boolean
    delete?: boolean
    connect?: OfferWhereUniqueInput
    update?: XOR<OfferUpdateWithoutTagsInput, OfferUncheckedUpdateWithoutTagsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedEnumProfileTypeNullableFilter = {
    equals?: ProfileType | null
    in?: Enumerable<ProfileType> | null
    notIn?: Enumerable<ProfileType> | null
    not?: NestedEnumProfileTypeNullableFilter | ProfileType | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedEnumProfileTypeNullableWithAggregatesFilter = {
    equals?: ProfileType | null
    in?: Enumerable<ProfileType> | null
    notIn?: Enumerable<ProfileType> | null
    not?: NestedEnumProfileTypeNullableWithAggregatesFilter | ProfileType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumProfileTypeNullableFilter
    _max?: NestedEnumProfileTypeNullableFilter
  }

  export type ProfileCreateWithoutSessionsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutSessionsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutSessionsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutSessionsInput, ProfileUncheckedCreateWithoutSessionsInput>
  }

  export type ProfileUpsertWithoutSessionsInput = {
    update: XOR<ProfileUpdateWithoutSessionsInput, ProfileUncheckedUpdateWithoutSessionsInput>
    create: XOR<ProfileCreateWithoutSessionsInput, ProfileUncheckedCreateWithoutSessionsInput>
  }

  export type ProfileUpdateWithoutSessionsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileCreateWithoutInvitationsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutInvitationsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutInvitationsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutInvitationsInput, ProfileUncheckedCreateWithoutInvitationsInput>
  }

  export type ProfileCreateWithoutClaimedInvitationsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutClaimedInvitationsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutClaimedInvitationsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutClaimedInvitationsInput, ProfileUncheckedCreateWithoutClaimedInvitationsInput>
  }

  export type ProfileCreateWithoutRedeemedInvitationsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutRedeemedInvitationsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutRedeemedInvitationsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutRedeemedInvitationsInput, ProfileUncheckedCreateWithoutRedeemedInvitationsInput>
  }

  export type ProfileUpsertWithoutInvitationsInput = {
    update: XOR<ProfileUpdateWithoutInvitationsInput, ProfileUncheckedUpdateWithoutInvitationsInput>
    create: XOR<ProfileCreateWithoutInvitationsInput, ProfileUncheckedCreateWithoutInvitationsInput>
  }

  export type ProfileUpdateWithoutInvitationsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutClaimedInvitationsInput = {
    update: XOR<ProfileUpdateWithoutClaimedInvitationsInput, ProfileUncheckedUpdateWithoutClaimedInvitationsInput>
    create: XOR<ProfileCreateWithoutClaimedInvitationsInput, ProfileUncheckedCreateWithoutClaimedInvitationsInput>
  }

  export type ProfileUpdateWithoutClaimedInvitationsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutClaimedInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutRedeemedInvitationsInput = {
    update: XOR<ProfileUpdateWithoutRedeemedInvitationsInput, ProfileUncheckedUpdateWithoutRedeemedInvitationsInput>
    create: XOR<ProfileCreateWithoutRedeemedInvitationsInput, ProfileUncheckedCreateWithoutRedeemedInvitationsInput>
  }

  export type ProfileUpdateWithoutRedeemedInvitationsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutRedeemedInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileCreateWithoutInvitationFundsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutInvitationFundsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutInvitationFundsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutInvitationFundsInput, ProfileUncheckedCreateWithoutInvitationFundsInput>
  }

  export type ProfileUpsertWithoutInvitationFundsInput = {
    update: XOR<ProfileUpdateWithoutInvitationFundsInput, ProfileUncheckedUpdateWithoutInvitationFundsInput>
    create: XOR<ProfileCreateWithoutInvitationFundsInput, ProfileUncheckedCreateWithoutInvitationFundsInput>
  }

  export type ProfileUpdateWithoutInvitationFundsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutInvitationFundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileCreateWithoutSafesVerifiedByPersonInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutSafesVerifiedByPersonInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutSafesVerifiedByPersonInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutSafesVerifiedByPersonInput, ProfileUncheckedCreateWithoutSafesVerifiedByPersonInput>
  }

  export type ProfileCreateWithoutSafesVerifiedByOrganisationInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutSafesVerifiedByOrganisationInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutSafesVerifiedByOrganisationInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedCreateWithoutSafesVerifiedByOrganisationInput>
  }

  export type ProfileCreateWithoutSafesRevokedByPersonInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
  }

  export type ProfileUncheckedCreateWithoutSafesRevokedByPersonInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
  }

  export type ProfileCreateOrConnectWithoutSafesRevokedByPersonInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutSafesRevokedByPersonInput, ProfileUncheckedCreateWithoutSafesRevokedByPersonInput>
  }

  export type TransactionCreateWithoutInviteeReward_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceCreateNestedOneWithoutPaymentTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedCreateWithoutInviteeReward_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagUncheckedCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionCreateOrConnectWithoutInviteeReward_VerifiedSafeInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviteeReward_VerifiedSafeInput>
  }

  export type TransactionCreateWithoutInviterReward_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedCreateWithoutInviterReward_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagUncheckedCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionCreateOrConnectWithoutInviterReward_VerifiedSafeInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviterReward_VerifiedSafeInput>
  }

  export type TransactionCreateWithoutSwapFunding_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput
  }

  export type TransactionUncheckedCreateWithoutSwapFunding_VerifiedSafeInput = {
    transactionHash: string
    tags?: TagUncheckedCreateNestedManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput
  }

  export type TransactionCreateOrConnectWithoutSwapFunding_VerifiedSafeInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedCreateWithoutSwapFunding_VerifiedSafeInput>
  }

  export type ProfileUpsertWithoutSafesVerifiedByPersonInput = {
    update: XOR<ProfileUpdateWithoutSafesVerifiedByPersonInput, ProfileUncheckedUpdateWithoutSafesVerifiedByPersonInput>
    create: XOR<ProfileCreateWithoutSafesVerifiedByPersonInput, ProfileUncheckedCreateWithoutSafesVerifiedByPersonInput>
  }

  export type ProfileUpdateWithoutSafesVerifiedByPersonInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutSafesVerifiedByPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutSafesVerifiedByOrganisationInput = {
    update: XOR<ProfileUpdateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedUpdateWithoutSafesVerifiedByOrganisationInput>
    create: XOR<ProfileCreateWithoutSafesVerifiedByOrganisationInput, ProfileUncheckedCreateWithoutSafesVerifiedByOrganisationInput>
  }

  export type ProfileUpdateWithoutSafesVerifiedByOrganisationInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutSafesVerifiedByOrganisationInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutSafesRevokedByPersonInput = {
    update: XOR<ProfileUpdateWithoutSafesRevokedByPersonInput, ProfileUncheckedUpdateWithoutSafesRevokedByPersonInput>
    create: XOR<ProfileCreateWithoutSafesRevokedByPersonInput, ProfileUncheckedCreateWithoutSafesRevokedByPersonInput>
  }

  export type ProfileUpdateWithoutSafesRevokedByPersonInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
  }

  export type ProfileUncheckedUpdateWithoutSafesRevokedByPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
  }

  export type TransactionUpsertWithoutInviteeReward_VerifiedSafeInput = {
    update: XOR<TransactionUpdateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedUpdateWithoutInviteeReward_VerifiedSafeInput>
    create: XOR<TransactionCreateWithoutInviteeReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviteeReward_VerifiedSafeInput>
  }

  export type TransactionUpdateWithoutInviteeReward_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUpdateOneWithoutPaymentTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedUpdateWithoutInviteeReward_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUpsertWithoutInviterReward_VerifiedSafeInput = {
    update: XOR<TransactionUpdateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedUpdateWithoutInviterReward_VerifiedSafeInput>
    create: XOR<TransactionCreateWithoutInviterReward_VerifiedSafeInput, TransactionUncheckedCreateWithoutInviterReward_VerifiedSafeInput>
  }

  export type TransactionUpdateWithoutInviterReward_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedUpdateWithoutInviterReward_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUpsertWithoutSwapFunding_VerifiedSafeInput = {
    update: XOR<TransactionUpdateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedUpdateWithoutSwapFunding_VerifiedSafeInput>
    create: XOR<TransactionCreateWithoutSwapFunding_VerifiedSafeInput, TransactionUncheckedCreateWithoutSwapFunding_VerifiedSafeInput>
  }

  export type TransactionUpdateWithoutSwapFunding_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput
  }

  export type TransactionUncheckedUpdateWithoutSwapFunding_VerifiedSafeInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTransactionInput
    payedInvoice?: InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput
  }

  export type SessionCreateWithoutProfileInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type SessionUncheckedCreateWithoutProfileInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type SessionCreateOrConnectWithoutProfileInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutProfileInput, SessionUncheckedCreateWithoutProfileInput>
  }

  export type SessionCreateManyProfileInputEnvelope = {
    data: Enumerable<SessionCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutCreatedByInput = {
    createdAt: Date | string
    isPrivate: boolean
    transaction?: TransactionCreateNestedOneWithoutTagsInput
    type: TagTypeCreateNestedOneWithoutTagsInput
    chatMessage?: ChatMessageCreateNestedOneWithoutTagsInput
    offer?: OfferCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateWithoutCreatedByInput = {
    id?: number
    createdAt: Date | string
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagCreateOrConnectWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput>
  }

  export type TagCreateManyCreatedByInputEnvelope = {
    data: Enumerable<TagCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type OfferCreateWithoutCreatedByInput = {
    id?: number
    version: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineCreateNestedManyWithoutProductInput
    tags?: TagCreateNestedManyWithoutOfferInput
  }

  export type OfferUncheckedCreateWithoutCreatedByInput = {
    id?: number
    version: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineUncheckedCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedCreateNestedManyWithoutProductInput
    tags?: TagUncheckedCreateNestedManyWithoutOfferInput
  }

  export type OfferCreateOrConnectWithoutCreatedByInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferCreateWithoutCreatedByInput, OfferUncheckedCreateWithoutCreatedByInput>
  }

  export type OfferCreateManyCreatedByInputEnvelope = {
    data: Enumerable<OfferCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type PurchaseCreateWithoutCreatedByInput = {
    createdAt: Date | string
    lines?: PurchaseLineCreateNestedManyWithoutPurchaseInput
    invoices?: InvoiceCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutCreatedByInput = {
    id?: number
    createdAt: Date | string
    lines?: PurchaseLineUncheckedCreateNestedManyWithoutPurchaseInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutCreatedByInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutCreatedByInput, PurchaseUncheckedCreateWithoutCreatedByInput>
  }

  export type PurchaseCreateManyCreatedByInputEnvelope = {
    data: Enumerable<PurchaseCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutCreatedByInput = {
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedBy?: ProfileCreateNestedOneWithoutClaimedInvitationsInput
    claimedAt?: Date | string | null
    redeemedBy?: ProfileCreateNestedOneWithoutRedeemedInvitationsInput
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUncheckedCreateWithoutCreatedByInput = {
    id?: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationCreateOrConnectWithoutCreatedByInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutCreatedByInput, InvitationUncheckedCreateWithoutCreatedByInput>
  }

  export type InvitationCreateManyCreatedByInputEnvelope = {
    data: Enumerable<InvitationCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type InvitationFundsEOACreateWithoutProfileInput = {
    address: string
    privateKey: string
  }

  export type InvitationFundsEOAUncheckedCreateWithoutProfileInput = {
    id?: number
    address: string
    privateKey: string
  }

  export type InvitationFundsEOACreateOrConnectWithoutProfileInput = {
    where: InvitationFundsEOAWhereUniqueInput
    create: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
  }

  export type InvitationCreateWithoutRedeemedByInput = {
    createdBy: ProfileCreateNestedOneWithoutInvitationsInput
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedBy?: ProfileCreateNestedOneWithoutClaimedInvitationsInput
    claimedAt?: Date | string | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUncheckedCreateWithoutRedeemedByInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationCreateOrConnectWithoutRedeemedByInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutRedeemedByInput, InvitationUncheckedCreateWithoutRedeemedByInput>
  }

  export type InvitationCreateManyRedeemedByInputEnvelope = {
    data: Enumerable<InvitationCreateManyRedeemedByInput>
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutClaimedByInput = {
    createdBy: ProfileCreateNestedOneWithoutInvitationsInput
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedAt?: Date | string | null
    redeemedBy?: ProfileCreateNestedOneWithoutRedeemedInvitationsInput
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationUncheckedCreateWithoutClaimedByInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationCreateOrConnectWithoutClaimedByInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutClaimedByInput, InvitationUncheckedCreateWithoutClaimedByInput>
  }

  export type InvitationCreateManyClaimedByInputEnvelope = {
    data: Enumerable<InvitationCreateManyClaimedByInput>
    skipDuplicates?: boolean
  }

  export type MembershipCreateWithoutMemberAtInput = {
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutCreatedMembershipsInput
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
  }

  export type MembershipUncheckedCreateWithoutMemberAtInput = {
    id?: number
    createdAt?: Date | string
    createdByProfileId: number
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
  }

  export type MembershipCreateOrConnectWithoutMemberAtInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutMemberAtInput, MembershipUncheckedCreateWithoutMemberAtInput>
  }

  export type MembershipCreateManyMemberAtInputEnvelope = {
    data: Enumerable<MembershipCreateManyMemberAtInput>
    skipDuplicates?: boolean
  }

  export type MembershipCreateWithoutCreatedByInput = {
    createdAt?: Date | string
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAt: ProfileCreateNestedOneWithoutMembersInput
  }

  export type MembershipUncheckedCreateWithoutCreatedByInput = {
    id?: number
    createdAt?: Date | string
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAtId: number
  }

  export type MembershipCreateOrConnectWithoutCreatedByInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutCreatedByInput, MembershipUncheckedCreateWithoutCreatedByInput>
  }

  export type MembershipCreateManyCreatedByInputEnvelope = {
    data: Enumerable<MembershipCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutCustomerProfileInput = {
    createdAt: Date | string
    invoiceNo: string
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutCustomerProfileInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    sellerProfileId: number
    purchaseId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutCustomerProfileInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCustomerProfileInput, InvoiceUncheckedCreateWithoutCustomerProfileInput>
  }

  export type InvoiceCreateManyCustomerProfileInputEnvelope = {
    data: Enumerable<InvoiceCreateManyCustomerProfileInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutSellerProfileInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutSellerProfileInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    purchaseId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutSellerProfileInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSellerProfileInput, InvoiceUncheckedCreateWithoutSellerProfileInput>
  }

  export type InvoiceCreateManySellerProfileInputEnvelope = {
    data: Enumerable<InvoiceCreateManySellerProfileInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutCancelledByInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutCancelledByInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutCancelledByInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCancelledByInput, InvoiceUncheckedCreateWithoutCancelledByInput>
  }

  export type InvoiceCreateManyCancelledByInputEnvelope = {
    data: Enumerable<InvoiceCreateManyCancelledByInput>
    skipDuplicates?: boolean
  }

  export type VerifiedSafeCreateWithoutCreatedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutCreatedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutCreatedByInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutCreatedByInput, VerifiedSafeUncheckedCreateWithoutCreatedByInput>
  }

  export type VerifiedSafeCreateManyCreatedByInputEnvelope = {
    data: Enumerable<VerifiedSafeCreateManyCreatedByInput>
    skipDuplicates?: boolean
  }

  export type VerifiedSafeCreateWithoutCreatedByOrganisationInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutCreatedByOrganisationInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutCreatedByOrganisationInput, VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>
  }

  export type VerifiedSafeCreateManyCreatedByOrganisationInputEnvelope = {
    data: Enumerable<VerifiedSafeCreateManyCreatedByOrganisationInput>
    skipDuplicates?: boolean
  }

  export type VerifiedSafeCreateWithoutRevokedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutRevokedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutRevokedByInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutRevokedByInput, VerifiedSafeUncheckedCreateWithoutRevokedByInput>
  }

  export type VerifiedSafeCreateManyRevokedByInputEnvelope = {
    data: Enumerable<VerifiedSafeCreateManyRevokedByInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutProfileInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutProfileInput, SessionUncheckedUpdateWithoutProfileInput>
    create: XOR<SessionCreateWithoutProfileInput, SessionUncheckedCreateWithoutProfileInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutProfileInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutProfileInput, SessionUncheckedUpdateWithoutProfileInput>
  }

  export type SessionUpdateManyWithWhereWithoutProfileInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    emailAddress?: StringNullableFilter | string | null
    ethAddress?: StringNullableFilter | string | null
    challengeHash?: StringNullableFilter | string | null
    signature?: StringNullableFilter | string | null
    profileId?: IntNullableFilter | number | null
    issuedBy?: StringFilter | string
    jti?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    validFrom?: DateTimeNullableFilter | Date | string | null
    endedAt?: DateTimeNullableFilter | Date | string | null
    endReason?: StringNullableFilter | string | null
    maxLifetime?: IntFilter | number
  }

  export type TagUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutCreatedByInput, TagUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TagCreateWithoutCreatedByInput, TagUncheckedCreateWithoutCreatedByInput>
  }

  export type TagUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutCreatedByInput, TagUncheckedUpdateWithoutCreatedByInput>
  }

  export type TagUpdateManyWithWhereWithoutCreatedByInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type TagScalarWhereInput = {
    AND?: Enumerable<TagScalarWhereInput>
    OR?: Enumerable<TagScalarWhereInput>
    NOT?: Enumerable<TagScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    createdByProfileId?: IntFilter | number
    isPrivate?: BoolFilter | boolean
    transactionHash?: StringNullableFilter | string | null
    typeId?: StringFilter | string
    chatMessageId?: IntNullableFilter | number | null
    offerId?: IntNullableFilter | number | null
    offerVersion?: IntNullableFilter | number | null
    value?: StringNullableFilter | string | null
  }

  export type OfferUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: OfferWhereUniqueInput
    update: XOR<OfferUpdateWithoutCreatedByInput, OfferUncheckedUpdateWithoutCreatedByInput>
    create: XOR<OfferCreateWithoutCreatedByInput, OfferUncheckedCreateWithoutCreatedByInput>
  }

  export type OfferUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: OfferWhereUniqueInput
    data: XOR<OfferUpdateWithoutCreatedByInput, OfferUncheckedUpdateWithoutCreatedByInput>
  }

  export type OfferUpdateManyWithWhereWithoutCreatedByInput = {
    where: OfferScalarWhereInput
    data: XOR<OfferUpdateManyMutationInput, OfferUncheckedUpdateManyWithoutOffersInput>
  }

  export type OfferScalarWhereInput = {
    AND?: Enumerable<OfferScalarWhereInput>
    OR?: Enumerable<OfferScalarWhereInput>
    NOT?: Enumerable<OfferScalarWhereInput>
    id?: IntFilter | number
    version?: IntFilter | number
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    pictureUrl?: StringNullableFilter | string | null
    pictureMimeType?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    pricePerUnit?: StringFilter | string
    timeCirclesPriceShare?: IntFilter | number
  }

  export type PurchaseUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutCreatedByInput, PurchaseUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PurchaseCreateWithoutCreatedByInput, PurchaseUncheckedCreateWithoutCreatedByInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutCreatedByInput, PurchaseUncheckedUpdateWithoutCreatedByInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutCreatedByInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutPurchasesInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: Enumerable<PurchaseScalarWhereInput>
    OR?: Enumerable<PurchaseScalarWhereInput>
    NOT?: Enumerable<PurchaseScalarWhereInput>
    id?: IntFilter | number
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type InvitationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutCreatedByInput, InvitationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<InvitationCreateWithoutCreatedByInput, InvitationUncheckedCreateWithoutCreatedByInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutCreatedByInput, InvitationUncheckedUpdateWithoutCreatedByInput>
  }

  export type InvitationUpdateManyWithWhereWithoutCreatedByInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutInvitationsInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: Enumerable<InvitationScalarWhereInput>
    OR?: Enumerable<InvitationScalarWhereInput>
    NOT?: Enumerable<InvitationScalarWhereInput>
    id?: IntFilter | number
    createdByProfileId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    fundedAt?: DateTimeNullableFilter | Date | string | null
    name?: StringFilter | string
    code?: StringFilter | string
    claimedByProfileId?: IntNullableFilter | number | null
    claimedAt?: DateTimeNullableFilter | Date | string | null
    redeemedByProfileId?: IntNullableFilter | number | null
    redeemedAt?: DateTimeNullableFilter | Date | string | null
    redeemTxHash?: StringNullableFilter | string | null
    forSafeAddress?: StringNullableFilter | string | null
    address?: StringFilter | string
    key?: StringFilter | string
  }

  export type InvitationFundsEOAUpsertWithoutProfileInput = {
    update: XOR<InvitationFundsEOAUpdateWithoutProfileInput, InvitationFundsEOAUncheckedUpdateWithoutProfileInput>
    create: XOR<InvitationFundsEOACreateWithoutProfileInput, InvitationFundsEOAUncheckedCreateWithoutProfileInput>
  }

  export type InvitationFundsEOAUpdateWithoutProfileInput = {
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationFundsEOAUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    privateKey?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUpsertWithWhereUniqueWithoutRedeemedByInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutRedeemedByInput, InvitationUncheckedUpdateWithoutRedeemedByInput>
    create: XOR<InvitationCreateWithoutRedeemedByInput, InvitationUncheckedCreateWithoutRedeemedByInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutRedeemedByInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutRedeemedByInput, InvitationUncheckedUpdateWithoutRedeemedByInput>
  }

  export type InvitationUpdateManyWithWhereWithoutRedeemedByInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutRedeemedInvitationsInput>
  }

  export type InvitationUpsertWithWhereUniqueWithoutClaimedByInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutClaimedByInput, InvitationUncheckedUpdateWithoutClaimedByInput>
    create: XOR<InvitationCreateWithoutClaimedByInput, InvitationUncheckedCreateWithoutClaimedByInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutClaimedByInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutClaimedByInput, InvitationUncheckedUpdateWithoutClaimedByInput>
  }

  export type InvitationUpdateManyWithWhereWithoutClaimedByInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutClaimedInvitationsInput>
  }

  export type MembershipUpsertWithWhereUniqueWithoutMemberAtInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutMemberAtInput, MembershipUncheckedUpdateWithoutMemberAtInput>
    create: XOR<MembershipCreateWithoutMemberAtInput, MembershipUncheckedCreateWithoutMemberAtInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutMemberAtInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutMemberAtInput, MembershipUncheckedUpdateWithoutMemberAtInput>
  }

  export type MembershipUpdateManyWithWhereWithoutMemberAtInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutMembersInput>
  }

  export type MembershipScalarWhereInput = {
    AND?: Enumerable<MembershipScalarWhereInput>
    OR?: Enumerable<MembershipScalarWhereInput>
    NOT?: Enumerable<MembershipScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    createdByProfileId?: IntFilter | number
    acceptedAt?: DateTimeNullableFilter | Date | string | null
    rejectedAt?: DateTimeNullableFilter | Date | string | null
    validTo?: DateTimeNullableFilter | Date | string | null
    isAdmin?: BoolNullableFilter | boolean | null
    memberAddress?: StringFilter | string
    memberAtId?: IntFilter | number
  }

  export type MembershipUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutCreatedByInput, MembershipUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MembershipCreateWithoutCreatedByInput, MembershipUncheckedCreateWithoutCreatedByInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutCreatedByInput, MembershipUncheckedUpdateWithoutCreatedByInput>
  }

  export type MembershipUpdateManyWithWhereWithoutCreatedByInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutCreatedMembershipsInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCustomerProfileInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCustomerProfileInput, InvoiceUncheckedUpdateWithoutCustomerProfileInput>
    create: XOR<InvoiceCreateWithoutCustomerProfileInput, InvoiceUncheckedCreateWithoutCustomerProfileInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCustomerProfileInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCustomerProfileInput, InvoiceUncheckedUpdateWithoutCustomerProfileInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCustomerProfileInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutPayableInvoicesInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: Enumerable<InvoiceScalarWhereInput>
    OR?: Enumerable<InvoiceScalarWhereInput>
    NOT?: Enumerable<InvoiceScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    invoiceNo?: StringFilter | string
    customerProfileId?: IntFilter | number
    sellerProfileId?: IntFilter | number
    purchaseId?: IntFilter | number
    pendingPaymentTransactionHash?: StringNullableFilter | string | null
    paymentTransactionHash?: StringNullableFilter | string | null
    pickupCode?: StringNullableFilter | string | null
    buyerSignature?: BoolNullableFilter | boolean | null
    buyerSignedDate?: DateTimeNullableFilter | Date | string | null
    sellerSignature?: BoolNullableFilter | boolean | null
    sellerSignedDate?: DateTimeNullableFilter | Date | string | null
    cancelledAt?: DateTimeNullableFilter | Date | string | null
    cancelledByProfileId?: IntNullableFilter | number | null
    cancelReason?: StringNullableFilter | string | null
  }

  export type InvoiceUpsertWithWhereUniqueWithoutSellerProfileInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutSellerProfileInput, InvoiceUncheckedUpdateWithoutSellerProfileInput>
    create: XOR<InvoiceCreateWithoutSellerProfileInput, InvoiceUncheckedCreateWithoutSellerProfileInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutSellerProfileInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutSellerProfileInput, InvoiceUncheckedUpdateWithoutSellerProfileInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutSellerProfileInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutReceivableInvoicesInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCancelledByInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCancelledByInput, InvoiceUncheckedUpdateWithoutCancelledByInput>
    create: XOR<InvoiceCreateWithoutCancelledByInput, InvoiceUncheckedCreateWithoutCancelledByInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCancelledByInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCancelledByInput, InvoiceUncheckedUpdateWithoutCancelledByInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCancelledByInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutCancelledInvoicesInput>
  }

  export type VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: VerifiedSafeWhereUniqueInput
    update: XOR<VerifiedSafeUpdateWithoutCreatedByInput, VerifiedSafeUncheckedUpdateWithoutCreatedByInput>
    create: XOR<VerifiedSafeCreateWithoutCreatedByInput, VerifiedSafeUncheckedCreateWithoutCreatedByInput>
  }

  export type VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: VerifiedSafeWhereUniqueInput
    data: XOR<VerifiedSafeUpdateWithoutCreatedByInput, VerifiedSafeUncheckedUpdateWithoutCreatedByInput>
  }

  export type VerifiedSafeUpdateManyWithWhereWithoutCreatedByInput = {
    where: VerifiedSafeScalarWhereInput
    data: XOR<VerifiedSafeUpdateManyMutationInput, VerifiedSafeUncheckedUpdateManyWithoutSafesVerifiedByPersonInput>
  }

  export type VerifiedSafeScalarWhereInput = {
    AND?: Enumerable<VerifiedSafeScalarWhereInput>
    OR?: Enumerable<VerifiedSafeScalarWhereInput>
    NOT?: Enumerable<VerifiedSafeScalarWhereInput>
    safeAddress?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    createdByProfileId?: IntFilter | number
    createdByOrganisationId?: IntFilter | number
    revokedAt?: DateTimeNullableFilter | Date | string | null
    revokedByProfileId?: IntNullableFilter | number | null
    swapEoaAddress?: StringFilter | string
    swapEoaKey?: StringFilter | string
    rewardProcessingStartedAt?: DateTimeNullableFilter | Date | string | null
    rewardProcessingWorker?: StringNullableFilter | string | null
    inviteeRewardTransactionHash?: StringNullableFilter | string | null
    inviterRewardTransactionHash?: StringNullableFilter | string | null
    swapFundingTransactionHash?: StringNullableFilter | string | null
    inviteCount?: IntFilter | number
  }

  export type VerifiedSafeUpsertWithWhereUniqueWithoutCreatedByOrganisationInput = {
    where: VerifiedSafeWhereUniqueInput
    update: XOR<VerifiedSafeUpdateWithoutCreatedByOrganisationInput, VerifiedSafeUncheckedUpdateWithoutCreatedByOrganisationInput>
    create: XOR<VerifiedSafeCreateWithoutCreatedByOrganisationInput, VerifiedSafeUncheckedCreateWithoutCreatedByOrganisationInput>
  }

  export type VerifiedSafeUpdateWithWhereUniqueWithoutCreatedByOrganisationInput = {
    where: VerifiedSafeWhereUniqueInput
    data: XOR<VerifiedSafeUpdateWithoutCreatedByOrganisationInput, VerifiedSafeUncheckedUpdateWithoutCreatedByOrganisationInput>
  }

  export type VerifiedSafeUpdateManyWithWhereWithoutCreatedByOrganisationInput = {
    where: VerifiedSafeScalarWhereInput
    data: XOR<VerifiedSafeUpdateManyMutationInput, VerifiedSafeUncheckedUpdateManyWithoutSafesVerifiedByOrganisationInput>
  }

  export type VerifiedSafeUpsertWithWhereUniqueWithoutRevokedByInput = {
    where: VerifiedSafeWhereUniqueInput
    update: XOR<VerifiedSafeUpdateWithoutRevokedByInput, VerifiedSafeUncheckedUpdateWithoutRevokedByInput>
    create: XOR<VerifiedSafeCreateWithoutRevokedByInput, VerifiedSafeUncheckedCreateWithoutRevokedByInput>
  }

  export type VerifiedSafeUpdateWithWhereUniqueWithoutRevokedByInput = {
    where: VerifiedSafeWhereUniqueInput
    data: XOR<VerifiedSafeUpdateWithoutRevokedByInput, VerifiedSafeUncheckedUpdateWithoutRevokedByInput>
  }

  export type VerifiedSafeUpdateManyWithWhereWithoutRevokedByInput = {
    where: VerifiedSafeScalarWhereInput
    data: XOR<VerifiedSafeUpdateManyMutationInput, VerifiedSafeUncheckedUpdateManyWithoutSafesRevokedByPersonInput>
  }

  export type ProfileCreateWithoutCreatedMembershipsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutCreatedMembershipsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutCreatedMembershipsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCreatedMembershipsInput, ProfileUncheckedCreateWithoutCreatedMembershipsInput>
  }

  export type ProfileCreateWithoutMembersInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutMembersInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutMembersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutMembersInput, ProfileUncheckedCreateWithoutMembersInput>
  }

  export type ProfileUpsertWithoutCreatedMembershipsInput = {
    update: XOR<ProfileUpdateWithoutCreatedMembershipsInput, ProfileUncheckedUpdateWithoutCreatedMembershipsInput>
    create: XOR<ProfileCreateWithoutCreatedMembershipsInput, ProfileUncheckedCreateWithoutCreatedMembershipsInput>
  }

  export type ProfileUpdateWithoutCreatedMembershipsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutCreatedMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutMembersInput = {
    update: XOR<ProfileUpdateWithoutMembersInput, ProfileUncheckedUpdateWithoutMembersInput>
    create: XOR<ProfileCreateWithoutMembersInput, ProfileUncheckedCreateWithoutMembersInput>
  }

  export type ProfileUpdateWithoutMembersInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type TagCreateWithoutChatMessageInput = {
    createdAt: Date | string
    createdBy: ProfileCreateNestedOneWithoutTagsInput
    isPrivate: boolean
    transaction?: TransactionCreateNestedOneWithoutTagsInput
    type: TagTypeCreateNestedOneWithoutTagsInput
    offer?: OfferCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateWithoutChatMessageInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagCreateOrConnectWithoutChatMessageInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutChatMessageInput, TagUncheckedCreateWithoutChatMessageInput>
  }

  export type TagCreateManyChatMessageInputEnvelope = {
    data: Enumerable<TagCreateManyChatMessageInput>
    skipDuplicates?: boolean
  }

  export type TagUpsertWithWhereUniqueWithoutChatMessageInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutChatMessageInput, TagUncheckedUpdateWithoutChatMessageInput>
    create: XOR<TagCreateWithoutChatMessageInput, TagUncheckedCreateWithoutChatMessageInput>
  }

  export type TagUpdateWithWhereUniqueWithoutChatMessageInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutChatMessageInput, TagUncheckedUpdateWithoutChatMessageInput>
  }

  export type TagUpdateManyWithWhereWithoutChatMessageInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type ProfileCreateWithoutOffersInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutOffersInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutOffersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutOffersInput, ProfileUncheckedCreateWithoutOffersInput>
  }

  export type PurchaseLineCreateWithoutProductInput = {
    purchase: PurchaseCreateNestedOneWithoutLinesInput
    amount: number
  }

  export type PurchaseLineUncheckedCreateWithoutProductInput = {
    id?: number
    purchaseId: number
    amount: number
  }

  export type PurchaseLineCreateOrConnectWithoutProductInput = {
    where: PurchaseLineWhereUniqueInput
    create: XOR<PurchaseLineCreateWithoutProductInput, PurchaseLineUncheckedCreateWithoutProductInput>
  }

  export type PurchaseLineCreateManyProductInputEnvelope = {
    data: Enumerable<PurchaseLineCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type InvoiceLineCreateWithoutProductInput = {
    invoice: InvoiceCreateNestedOneWithoutLinesInput
    amount: number
  }

  export type InvoiceLineUncheckedCreateWithoutProductInput = {
    id?: number
    invoiceId: number
    amount: number
  }

  export type InvoiceLineCreateOrConnectWithoutProductInput = {
    where: InvoiceLineWhereUniqueInput
    create: XOR<InvoiceLineCreateWithoutProductInput, InvoiceLineUncheckedCreateWithoutProductInput>
  }

  export type InvoiceLineCreateManyProductInputEnvelope = {
    data: Enumerable<InvoiceLineCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutOfferInput = {
    createdAt: Date | string
    createdBy: ProfileCreateNestedOneWithoutTagsInput
    isPrivate: boolean
    transaction?: TransactionCreateNestedOneWithoutTagsInput
    type: TagTypeCreateNestedOneWithoutTagsInput
    chatMessage?: ChatMessageCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateWithoutOfferInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    value?: string | null
  }

  export type TagCreateOrConnectWithoutOfferInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutOfferInput, TagUncheckedCreateWithoutOfferInput>
  }

  export type TagCreateManyOfferInputEnvelope = {
    data: Enumerable<TagCreateManyOfferInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutOffersInput = {
    update: XOR<ProfileUpdateWithoutOffersInput, ProfileUncheckedUpdateWithoutOffersInput>
    create: XOR<ProfileCreateWithoutOffersInput, ProfileUncheckedCreateWithoutOffersInput>
  }

  export type ProfileUpdateWithoutOffersInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutOffersInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type PurchaseLineUpsertWithWhereUniqueWithoutProductInput = {
    where: PurchaseLineWhereUniqueInput
    update: XOR<PurchaseLineUpdateWithoutProductInput, PurchaseLineUncheckedUpdateWithoutProductInput>
    create: XOR<PurchaseLineCreateWithoutProductInput, PurchaseLineUncheckedCreateWithoutProductInput>
  }

  export type PurchaseLineUpdateWithWhereUniqueWithoutProductInput = {
    where: PurchaseLineWhereUniqueInput
    data: XOR<PurchaseLineUpdateWithoutProductInput, PurchaseLineUncheckedUpdateWithoutProductInput>
  }

  export type PurchaseLineUpdateManyWithWhereWithoutProductInput = {
    where: PurchaseLineScalarWhereInput
    data: XOR<PurchaseLineUpdateManyMutationInput, PurchaseLineUncheckedUpdateManyWithoutPurchaseLinesInput>
  }

  export type PurchaseLineScalarWhereInput = {
    AND?: Enumerable<PurchaseLineScalarWhereInput>
    OR?: Enumerable<PurchaseLineScalarWhereInput>
    NOT?: Enumerable<PurchaseLineScalarWhereInput>
    id?: IntFilter | number
    purchaseId?: IntFilter | number
    amount?: IntFilter | number
    productId?: IntFilter | number
    productVersion?: IntFilter | number
  }

  export type InvoiceLineUpsertWithWhereUniqueWithoutProductInput = {
    where: InvoiceLineWhereUniqueInput
    update: XOR<InvoiceLineUpdateWithoutProductInput, InvoiceLineUncheckedUpdateWithoutProductInput>
    create: XOR<InvoiceLineCreateWithoutProductInput, InvoiceLineUncheckedCreateWithoutProductInput>
  }

  export type InvoiceLineUpdateWithWhereUniqueWithoutProductInput = {
    where: InvoiceLineWhereUniqueInput
    data: XOR<InvoiceLineUpdateWithoutProductInput, InvoiceLineUncheckedUpdateWithoutProductInput>
  }

  export type InvoiceLineUpdateManyWithWhereWithoutProductInput = {
    where: InvoiceLineScalarWhereInput
    data: XOR<InvoiceLineUpdateManyMutationInput, InvoiceLineUncheckedUpdateManyWithoutInvoiceLinesInput>
  }

  export type InvoiceLineScalarWhereInput = {
    AND?: Enumerable<InvoiceLineScalarWhereInput>
    OR?: Enumerable<InvoiceLineScalarWhereInput>
    NOT?: Enumerable<InvoiceLineScalarWhereInput>
    id?: IntFilter | number
    invoiceId?: IntFilter | number
    amount?: IntFilter | number
    productId?: IntFilter | number
    productVersion?: IntFilter | number
  }

  export type TagUpsertWithWhereUniqueWithoutOfferInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutOfferInput, TagUncheckedUpdateWithoutOfferInput>
    create: XOR<TagCreateWithoutOfferInput, TagUncheckedCreateWithoutOfferInput>
  }

  export type TagUpdateWithWhereUniqueWithoutOfferInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutOfferInput, TagUncheckedUpdateWithoutOfferInput>
  }

  export type TagUpdateManyWithWhereWithoutOfferInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type ProfileCreateWithoutPurchasesInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutPurchasesInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutPurchasesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPurchasesInput, ProfileUncheckedCreateWithoutPurchasesInput>
  }

  export type PurchaseLineCreateWithoutPurchaseInput = {
    amount: number
    product: OfferCreateNestedOneWithoutPurchaseLinesInput
  }

  export type PurchaseLineUncheckedCreateWithoutPurchaseInput = {
    id?: number
    amount: number
    productId: number
    productVersion: number
  }

  export type PurchaseLineCreateOrConnectWithoutPurchaseInput = {
    where: PurchaseLineWhereUniqueInput
    create: XOR<PurchaseLineCreateWithoutPurchaseInput, PurchaseLineUncheckedCreateWithoutPurchaseInput>
  }

  export type PurchaseLineCreateManyPurchaseInputEnvelope = {
    data: Enumerable<PurchaseLineCreateManyPurchaseInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutPurchaseInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutPurchaseInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutPurchaseInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutPurchaseInput, InvoiceUncheckedCreateWithoutPurchaseInput>
  }

  export type InvoiceCreateManyPurchaseInputEnvelope = {
    data: Enumerable<InvoiceCreateManyPurchaseInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutPurchasesInput = {
    update: XOR<ProfileUpdateWithoutPurchasesInput, ProfileUncheckedUpdateWithoutPurchasesInput>
    create: XOR<ProfileCreateWithoutPurchasesInput, ProfileUncheckedCreateWithoutPurchasesInput>
  }

  export type ProfileUpdateWithoutPurchasesInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutPurchasesInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type PurchaseLineUpsertWithWhereUniqueWithoutPurchaseInput = {
    where: PurchaseLineWhereUniqueInput
    update: XOR<PurchaseLineUpdateWithoutPurchaseInput, PurchaseLineUncheckedUpdateWithoutPurchaseInput>
    create: XOR<PurchaseLineCreateWithoutPurchaseInput, PurchaseLineUncheckedCreateWithoutPurchaseInput>
  }

  export type PurchaseLineUpdateWithWhereUniqueWithoutPurchaseInput = {
    where: PurchaseLineWhereUniqueInput
    data: XOR<PurchaseLineUpdateWithoutPurchaseInput, PurchaseLineUncheckedUpdateWithoutPurchaseInput>
  }

  export type PurchaseLineUpdateManyWithWhereWithoutPurchaseInput = {
    where: PurchaseLineScalarWhereInput
    data: XOR<PurchaseLineUpdateManyMutationInput, PurchaseLineUncheckedUpdateManyWithoutLinesInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutPurchaseInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutPurchaseInput, InvoiceUncheckedUpdateWithoutPurchaseInput>
    create: XOR<InvoiceCreateWithoutPurchaseInput, InvoiceUncheckedCreateWithoutPurchaseInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutPurchaseInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutPurchaseInput, InvoiceUncheckedUpdateWithoutPurchaseInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutPurchaseInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutInvoicesInput>
  }

  export type PurchaseCreateWithoutLinesInput = {
    createdBy: ProfileCreateNestedOneWithoutPurchasesInput
    createdAt: Date | string
    invoices?: InvoiceCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutLinesInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    invoices?: InvoiceUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutLinesInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutLinesInput, PurchaseUncheckedCreateWithoutLinesInput>
  }

  export type OfferCreateWithoutPurchaseLinesInput = {
    id?: number
    version: number
    createdBy: ProfileCreateNestedOneWithoutOffersInput
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    invoiceLines?: InvoiceLineCreateNestedManyWithoutProductInput
    tags?: TagCreateNestedManyWithoutOfferInput
  }

  export type OfferUncheckedCreateWithoutPurchaseLinesInput = {
    id?: number
    version: number
    createdByProfileId: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    invoiceLines?: InvoiceLineUncheckedCreateNestedManyWithoutProductInput
    tags?: TagUncheckedCreateNestedManyWithoutOfferInput
  }

  export type OfferCreateOrConnectWithoutPurchaseLinesInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferCreateWithoutPurchaseLinesInput, OfferUncheckedCreateWithoutPurchaseLinesInput>
  }

  export type PurchaseUpsertWithoutLinesInput = {
    update: XOR<PurchaseUpdateWithoutLinesInput, PurchaseUncheckedUpdateWithoutLinesInput>
    create: XOR<PurchaseCreateWithoutLinesInput, PurchaseUncheckedCreateWithoutLinesInput>
  }

  export type PurchaseUpdateWithoutLinesInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutPurchasesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUncheckedUpdateManyWithoutPurchaseInput
  }

  export type OfferUpsertWithoutPurchaseLinesInput = {
    update: XOR<OfferUpdateWithoutPurchaseLinesInput, OfferUncheckedUpdateWithoutPurchaseLinesInput>
    create: XOR<OfferCreateWithoutPurchaseLinesInput, OfferUncheckedCreateWithoutPurchaseLinesInput>
  }

  export type OfferUpdateWithoutPurchaseLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdBy?: ProfileUpdateOneRequiredWithoutOffersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    invoiceLines?: InvoiceLineUpdateManyWithoutProductInput
    tags?: TagUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateWithoutPurchaseLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    invoiceLines?: InvoiceLineUncheckedUpdateManyWithoutProductInput
    tags?: TagUncheckedUpdateManyWithoutOfferInput
  }

  export type ProfileCreateWithoutPayableInvoicesInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutPayableInvoicesInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutPayableInvoicesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPayableInvoicesInput, ProfileUncheckedCreateWithoutPayableInvoicesInput>
  }

  export type ProfileCreateWithoutReceivableInvoicesInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutReceivableInvoicesInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutReceivableInvoicesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutReceivableInvoicesInput, ProfileUncheckedCreateWithoutReceivableInvoicesInput>
  }

  export type PurchaseCreateWithoutInvoicesInput = {
    createdBy: ProfileCreateNestedOneWithoutPurchasesInput
    createdAt: Date | string
    lines?: PurchaseLineCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutInvoicesInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    lines?: PurchaseLineUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutInvoicesInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutInvoicesInput, PurchaseUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceLineCreateWithoutInvoiceInput = {
    amount: number
    product: OfferCreateNestedOneWithoutInvoiceLinesInput
  }

  export type InvoiceLineUncheckedCreateWithoutInvoiceInput = {
    id?: number
    amount: number
    productId: number
    productVersion: number
  }

  export type InvoiceLineCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceLineWhereUniqueInput
    create: XOR<InvoiceLineCreateWithoutInvoiceInput, InvoiceLineUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceLineCreateManyInvoiceInputEnvelope = {
    data: Enumerable<InvoiceLineCreateManyInvoiceInput>
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutPayedInvoiceInput = {
    transactionHash: string
    tags?: TagCreateNestedManyWithoutTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedCreateWithoutPayedInvoiceInput = {
    transactionHash: string
    tags?: TagUncheckedCreateNestedManyWithoutTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionCreateOrConnectWithoutPayedInvoiceInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutPayedInvoiceInput, TransactionUncheckedCreateWithoutPayedInvoiceInput>
  }

  export type ProfileCreateWithoutCancelledInvoicesInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    tags?: TagCreateNestedManyWithoutCreatedByInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutCancelledInvoicesInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    tags?: TagUncheckedCreateNestedManyWithoutCreatedByInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutCancelledInvoicesInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCancelledInvoicesInput, ProfileUncheckedCreateWithoutCancelledInvoicesInput>
  }

  export type ProfileUpsertWithoutPayableInvoicesInput = {
    update: XOR<ProfileUpdateWithoutPayableInvoicesInput, ProfileUncheckedUpdateWithoutPayableInvoicesInput>
    create: XOR<ProfileCreateWithoutPayableInvoicesInput, ProfileUncheckedCreateWithoutPayableInvoicesInput>
  }

  export type ProfileUpdateWithoutPayableInvoicesInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutPayableInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type ProfileUpsertWithoutReceivableInvoicesInput = {
    update: XOR<ProfileUpdateWithoutReceivableInvoicesInput, ProfileUncheckedUpdateWithoutReceivableInvoicesInput>
    create: XOR<ProfileCreateWithoutReceivableInvoicesInput, ProfileUncheckedCreateWithoutReceivableInvoicesInput>
  }

  export type ProfileUpdateWithoutReceivableInvoicesInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutReceivableInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type PurchaseUpsertWithoutInvoicesInput = {
    update: XOR<PurchaseUpdateWithoutInvoicesInput, PurchaseUncheckedUpdateWithoutInvoicesInput>
    create: XOR<PurchaseCreateWithoutInvoicesInput, PurchaseUncheckedCreateWithoutInvoicesInput>
  }

  export type PurchaseUpdateWithoutInvoicesInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutPurchasesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUncheckedUpdateManyWithoutPurchaseInput
  }

  export type InvoiceLineUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceLineWhereUniqueInput
    update: XOR<InvoiceLineUpdateWithoutInvoiceInput, InvoiceLineUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceLineCreateWithoutInvoiceInput, InvoiceLineUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceLineUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceLineWhereUniqueInput
    data: XOR<InvoiceLineUpdateWithoutInvoiceInput, InvoiceLineUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceLineUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceLineScalarWhereInput
    data: XOR<InvoiceLineUpdateManyMutationInput, InvoiceLineUncheckedUpdateManyWithoutLinesInput>
  }

  export type TransactionUpsertWithoutPayedInvoiceInput = {
    update: XOR<TransactionUpdateWithoutPayedInvoiceInput, TransactionUncheckedUpdateWithoutPayedInvoiceInput>
    create: XOR<TransactionCreateWithoutPayedInvoiceInput, TransactionUncheckedCreateWithoutPayedInvoiceInput>
  }

  export type TransactionUpdateWithoutPayedInvoiceInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUpdateManyWithoutTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedUpdateWithoutPayedInvoiceInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    tags?: TagUncheckedUpdateManyWithoutTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput
  }

  export type ProfileUpsertWithoutCancelledInvoicesInput = {
    update: XOR<ProfileUpdateWithoutCancelledInvoicesInput, ProfileUncheckedUpdateWithoutCancelledInvoicesInput>
    create: XOR<ProfileCreateWithoutCancelledInvoicesInput, ProfileUncheckedCreateWithoutCancelledInvoicesInput>
  }

  export type ProfileUpdateWithoutCancelledInvoicesInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    tags?: TagUpdateManyWithoutCreatedByInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutCancelledInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    tags?: TagUncheckedUpdateManyWithoutCreatedByInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type InvoiceCreateWithoutLinesInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    pendingPaymentTransactionHash?: string | null
    paymentTransaction?: TransactionCreateNestedOneWithoutPayedInvoiceInput
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutLinesInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutLinesInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutLinesInput, InvoiceUncheckedCreateWithoutLinesInput>
  }

  export type OfferCreateWithoutInvoiceLinesInput = {
    id?: number
    version: number
    createdBy: ProfileCreateNestedOneWithoutOffersInput
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineCreateNestedManyWithoutProductInput
    tags?: TagCreateNestedManyWithoutOfferInput
  }

  export type OfferUncheckedCreateWithoutInvoiceLinesInput = {
    id?: number
    version: number
    createdByProfileId: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineUncheckedCreateNestedManyWithoutProductInput
    tags?: TagUncheckedCreateNestedManyWithoutOfferInput
  }

  export type OfferCreateOrConnectWithoutInvoiceLinesInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferCreateWithoutInvoiceLinesInput, OfferUncheckedCreateWithoutInvoiceLinesInput>
  }

  export type InvoiceUpsertWithoutLinesInput = {
    update: XOR<InvoiceUpdateWithoutLinesInput, InvoiceUncheckedUpdateWithoutLinesInput>
    create: XOR<InvoiceCreateWithoutLinesInput, InvoiceUncheckedCreateWithoutLinesInput>
  }

  export type InvoiceUpdateWithoutLinesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OfferUpsertWithoutInvoiceLinesInput = {
    update: XOR<OfferUpdateWithoutInvoiceLinesInput, OfferUncheckedUpdateWithoutInvoiceLinesInput>
    create: XOR<OfferCreateWithoutInvoiceLinesInput, OfferUncheckedCreateWithoutInvoiceLinesInput>
  }

  export type OfferUpdateWithoutInvoiceLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdBy?: ProfileUpdateOneRequiredWithoutOffersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUpdateManyWithoutProductInput
    tags?: TagUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateWithoutInvoiceLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUncheckedUpdateManyWithoutProductInput
    tags?: TagUncheckedUpdateManyWithoutOfferInput
  }

  export type TagCreateWithoutTypeInput = {
    createdAt: Date | string
    createdBy: ProfileCreateNestedOneWithoutTagsInput
    isPrivate: boolean
    transaction?: TransactionCreateNestedOneWithoutTagsInput
    chatMessage?: ChatMessageCreateNestedOneWithoutTagsInput
    offer?: OfferCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateWithoutTypeInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagCreateOrConnectWithoutTypeInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTypeInput, TagUncheckedCreateWithoutTypeInput>
  }

  export type TagCreateManyTypeInputEnvelope = {
    data: Enumerable<TagCreateManyTypeInput>
    skipDuplicates?: boolean
  }

  export type TagUpsertWithWhereUniqueWithoutTypeInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutTypeInput, TagUncheckedUpdateWithoutTypeInput>
    create: XOR<TagCreateWithoutTypeInput, TagUncheckedCreateWithoutTypeInput>
  }

  export type TagUpdateWithWhereUniqueWithoutTypeInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutTypeInput, TagUncheckedUpdateWithoutTypeInput>
  }

  export type TagUpdateManyWithWhereWithoutTypeInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type TagCreateWithoutTransactionInput = {
    createdAt: Date | string
    createdBy: ProfileCreateNestedOneWithoutTagsInput
    isPrivate: boolean
    type: TagTypeCreateNestedOneWithoutTagsInput
    chatMessage?: ChatMessageCreateNestedOneWithoutTagsInput
    offer?: OfferCreateNestedOneWithoutTagsInput
    value?: string | null
  }

  export type TagUncheckedCreateWithoutTransactionInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagCreateOrConnectWithoutTransactionInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutTransactionInput, TagUncheckedCreateWithoutTransactionInput>
  }

  export type TagCreateManyTransactionInputEnvelope = {
    data: Enumerable<TagCreateManyTransactionInput>
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutPaymentTransactionInput = {
    createdAt: Date | string
    invoiceNo: string
    customerProfile: ProfileCreateNestedOneWithoutPayableInvoicesInput
    sellerProfile: ProfileCreateNestedOneWithoutReceivableInvoicesInput
    purchase: PurchaseCreateNestedOneWithoutInvoicesInput
    lines?: InvoiceLineCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledBy?: ProfileCreateNestedOneWithoutCancelledInvoicesInput
    cancelReason?: string | null
  }

  export type InvoiceUncheckedCreateWithoutPaymentTransactionInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    lines?: InvoiceLineUncheckedCreateNestedManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateOrConnectWithoutPaymentTransactionInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
  }

  export type VerifiedSafeCreateWithoutInviteeRewardTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutInviteeRewardTransactionInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
  }

  export type VerifiedSafeCreateWithoutInviterRewardTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionCreateNestedOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutInviterRewardTransactionInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
  }

  export type VerifiedSafeCreateWithoutSwapFundingTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdBy: ProfileCreateNestedOneWithoutSafesVerifiedByPersonInput
    createdByOrganisation: ProfileCreateNestedOneWithoutSafesVerifiedByOrganisationInput
    revokedAt?: Date | string | null
    revokedBy?: ProfileCreateNestedOneWithoutSafesRevokedByPersonInput
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransaction?: TransactionCreateNestedOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionCreateNestedOneWithoutInviterReward_VerifiedSafeInput
    inviteCount?: number
  }

  export type VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateOrConnectWithoutSwapFundingTransactionInput = {
    where: VerifiedSafeWhereUniqueInput
    create: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
  }

  export type TagUpsertWithWhereUniqueWithoutTransactionInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutTransactionInput, TagUncheckedUpdateWithoutTransactionInput>
    create: XOR<TagCreateWithoutTransactionInput, TagUncheckedCreateWithoutTransactionInput>
  }

  export type TagUpdateWithWhereUniqueWithoutTransactionInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutTransactionInput, TagUncheckedUpdateWithoutTransactionInput>
  }

  export type TagUpdateManyWithWhereWithoutTransactionInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type InvoiceUpsertWithoutPaymentTransactionInput = {
    update: XOR<InvoiceUpdateWithoutPaymentTransactionInput, InvoiceUncheckedUpdateWithoutPaymentTransactionInput>
    create: XOR<InvoiceCreateWithoutPaymentTransactionInput, InvoiceUncheckedCreateWithoutPaymentTransactionInput>
  }

  export type InvoiceUpdateWithoutPaymentTransactionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutPaymentTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerifiedSafeUpsertWithoutInviteeRewardTransactionInput = {
    update: XOR<VerifiedSafeUpdateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviteeRewardTransactionInput>
    create: XOR<VerifiedSafeCreateWithoutInviteeRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviteeRewardTransactionInput>
  }

  export type VerifiedSafeUpdateWithoutInviteeRewardTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutInviteeRewardTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUpsertWithoutInviterRewardTransactionInput = {
    update: XOR<VerifiedSafeUpdateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedUpdateWithoutInviterRewardTransactionInput>
    create: XOR<VerifiedSafeCreateWithoutInviterRewardTransactionInput, VerifiedSafeUncheckedCreateWithoutInviterRewardTransactionInput>
  }

  export type VerifiedSafeUpdateWithoutInviterRewardTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutInviterRewardTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUpsertWithoutSwapFundingTransactionInput = {
    update: XOR<VerifiedSafeUpdateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedUpdateWithoutSwapFundingTransactionInput>
    create: XOR<VerifiedSafeCreateWithoutSwapFundingTransactionInput, VerifiedSafeUncheckedCreateWithoutSwapFundingTransactionInput>
  }

  export type VerifiedSafeUpdateWithoutSwapFundingTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutSwapFundingTransactionInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateWithoutTagsInput = {
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionCreateNestedManyWithoutProfileInput
    offers?: OfferCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOACreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationCreateNestedManyWithoutClaimedByInput
    members?: MembershipCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileUncheckedCreateWithoutTagsInput = {
    id?: number
    lastUpdateAt?: Date | string
    emailAddress?: string | null
    askedForEmailAddress?: boolean
    emailAddressVerified?: boolean | null
    verifyEmailChallenge?: string | null
    createdAt?: Date | string
    status?: string | null
    type?: ProfileType | null
    successorOfCirclesAddress?: string | null
    circlesAddress?: string | null
    circlesSafeOwner?: string | null
    circlesTokenAddress?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    avatarCid?: string | null
    avatarMimeType?: string | null
    dream?: string | null
    country?: string | null
    newsletter?: boolean | null
    displayTimeCircles?: boolean | null
    cityGeonameid?: number | null
    lastAcknowledged?: Date | string | null
    verifySafeChallenge?: string | null
    newSafeAddress?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutProfileInput
    offers?: OfferUncheckedCreateNestedManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedCreateNestedManyWithoutCreatedByInput
    invitations?: InvitationUncheckedCreateNestedManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedCreateNestedOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedCreateNestedManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedCreateNestedManyWithoutClaimedByInput
    members?: MembershipUncheckedCreateNestedManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedCreateNestedManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedCreateNestedManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedCreateNestedManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedCreateNestedManyWithoutCancelledByInput
    invoiceNoPrefix?: string | null
    lastInvoiceNo?: number | null
    refundNoPrefix?: string | null
    lastRefundNo?: number | null
    displayCurrency?: string
    safesVerifiedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedCreateNestedManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedCreateNestedManyWithoutRevokedByInput
  }

  export type ProfileCreateOrConnectWithoutTagsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
  }

  export type TransactionCreateWithoutTagsInput = {
    transactionHash: string
    payedInvoice?: InvoiceCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedCreateWithoutTagsInput = {
    transactionHash: string
    payedInvoice?: InvoiceUncheckedCreateNestedOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedCreateNestedOneWithoutSwapFundingTransactionInput
  }

  export type TransactionCreateOrConnectWithoutTagsInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutTagsInput, TransactionUncheckedCreateWithoutTagsInput>
  }

  export type TagTypeCreateWithoutTagsInput = {
    id: string
  }

  export type TagTypeUncheckedCreateWithoutTagsInput = {
    id: string
  }

  export type TagTypeCreateOrConnectWithoutTagsInput = {
    where: TagTypeWhereUniqueInput
    create: XOR<TagTypeCreateWithoutTagsInput, TagTypeUncheckedCreateWithoutTagsInput>
  }

  export type ChatMessageCreateWithoutTagsInput = {
    createdAt: Date | string
    openedAt?: Date | string | null
    from: string
    to: string
    text: string
  }

  export type ChatMessageUncheckedCreateWithoutTagsInput = {
    id?: number
    createdAt: Date | string
    openedAt?: Date | string | null
    from: string
    to: string
    text: string
  }

  export type ChatMessageCreateOrConnectWithoutTagsInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutTagsInput, ChatMessageUncheckedCreateWithoutTagsInput>
  }

  export type OfferCreateWithoutTagsInput = {
    id?: number
    version: number
    createdBy: ProfileCreateNestedOneWithoutOffersInput
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineCreateNestedManyWithoutProductInput
  }

  export type OfferUncheckedCreateWithoutTagsInput = {
    id?: number
    version: number
    createdByProfileId: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
    purchaseLines?: PurchaseLineUncheckedCreateNestedManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedCreateNestedManyWithoutProductInput
  }

  export type OfferCreateOrConnectWithoutTagsInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferCreateWithoutTagsInput, OfferUncheckedCreateWithoutTagsInput>
  }

  export type ProfileUpsertWithoutTagsInput = {
    update: XOR<ProfileUpdateWithoutTagsInput, ProfileUncheckedUpdateWithoutTagsInput>
    create: XOR<ProfileCreateWithoutTagsInput, ProfileUncheckedCreateWithoutTagsInput>
  }

  export type ProfileUpdateWithoutTagsInput = {
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutProfileInput
    offers?: OfferUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUpdateManyWithoutCreatedByInput
    invitations?: InvitationUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUpdateManyWithoutClaimedByInput
    members?: MembershipUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUpdateManyWithoutRevokedByInput
  }

  export type ProfileUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastUpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    askedForEmailAddress?: BoolFieldUpdateOperationsInput | boolean
    emailAddressVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    verifyEmailChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumProfileTypeFieldUpdateOperationsInput | ProfileType | null
    successorOfCirclesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesAddress?: NullableStringFieldUpdateOperationsInput | string | null
    circlesSafeOwner?: NullableStringFieldUpdateOperationsInput | string | null
    circlesTokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarCid?: NullableStringFieldUpdateOperationsInput | string | null
    avatarMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    dream?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    newsletter?: NullableBoolFieldUpdateOperationsInput | boolean | null
    displayTimeCircles?: NullableBoolFieldUpdateOperationsInput | boolean | null
    cityGeonameid?: NullableIntFieldUpdateOperationsInput | number | null
    lastAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verifySafeChallenge?: NullableStringFieldUpdateOperationsInput | string | null
    newSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutProfileInput
    offers?: OfferUncheckedUpdateManyWithoutCreatedByInput
    purchases?: PurchaseUncheckedUpdateManyWithoutCreatedByInput
    invitations?: InvitationUncheckedUpdateManyWithoutCreatedByInput
    invitationFunds?: InvitationFundsEOAUncheckedUpdateOneWithoutProfileInput
    redeemedInvitations?: InvitationUncheckedUpdateManyWithoutRedeemedByInput
    claimedInvitations?: InvitationUncheckedUpdateManyWithoutClaimedByInput
    members?: MembershipUncheckedUpdateManyWithoutMemberAtInput
    createdMemberships?: MembershipUncheckedUpdateManyWithoutCreatedByInput
    payableInvoices?: InvoiceUncheckedUpdateManyWithoutCustomerProfileInput
    receivableInvoices?: InvoiceUncheckedUpdateManyWithoutSellerProfileInput
    cancelledInvoices?: InvoiceUncheckedUpdateManyWithoutCancelledByInput
    invoiceNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastInvoiceNo?: NullableIntFieldUpdateOperationsInput | number | null
    refundNoPrefix?: NullableStringFieldUpdateOperationsInput | string | null
    lastRefundNo?: NullableIntFieldUpdateOperationsInput | number | null
    displayCurrency?: StringFieldUpdateOperationsInput | string
    safesVerifiedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByInput
    safesVerifiedByOrganisation?: VerifiedSafeUncheckedUpdateManyWithoutCreatedByOrganisationInput
    safesRevokedByPerson?: VerifiedSafeUncheckedUpdateManyWithoutRevokedByInput
  }

  export type TransactionUpsertWithoutTagsInput = {
    update: XOR<TransactionUpdateWithoutTagsInput, TransactionUncheckedUpdateWithoutTagsInput>
    create: XOR<TransactionCreateWithoutTagsInput, TransactionUncheckedCreateWithoutTagsInput>
  }

  export type TransactionUpdateWithoutTagsInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    payedInvoice?: InvoiceUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TransactionUncheckedUpdateWithoutTagsInput = {
    transactionHash?: StringFieldUpdateOperationsInput | string
    payedInvoice?: InvoiceUncheckedUpdateOneWithoutPaymentTransactionInput
    InviteeReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviteeRewardTransactionInput
    InviterReward_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutInviterRewardTransactionInput
    SwapFunding_VerifiedSafe?: VerifiedSafeUncheckedUpdateOneWithoutSwapFundingTransactionInput
  }

  export type TagTypeUpsertWithoutTagsInput = {
    update: XOR<TagTypeUpdateWithoutTagsInput, TagTypeUncheckedUpdateWithoutTagsInput>
    create: XOR<TagTypeCreateWithoutTagsInput, TagTypeUncheckedCreateWithoutTagsInput>
  }

  export type TagTypeUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TagTypeUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUpsertWithoutTagsInput = {
    update: XOR<ChatMessageUpdateWithoutTagsInput, ChatMessageUncheckedUpdateWithoutTagsInput>
    create: XOR<ChatMessageCreateWithoutTagsInput, ChatMessageUncheckedCreateWithoutTagsInput>
  }

  export type ChatMessageUpdateWithoutTagsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type ChatMessageUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type OfferUpsertWithoutTagsInput = {
    update: XOR<OfferUpdateWithoutTagsInput, OfferUncheckedUpdateWithoutTagsInput>
    create: XOR<OfferCreateWithoutTagsInput, OfferUncheckedCreateWithoutTagsInput>
  }

  export type OfferUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdBy?: ProfileUpdateOneRequiredWithoutOffersInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUpdateManyWithoutProductInput
  }

  export type OfferUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUncheckedUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedUpdateManyWithoutProductInput
  }

  export type SessionCreateManyProfileInput = {
    id: string
    sessionToken: string
    emailAddress?: string | null
    ethAddress?: string | null
    challengeHash?: string | null
    signature?: string | null
    issuedBy: string
    jti?: string | null
    createdAt: Date | string
    validFrom?: Date | string | null
    endedAt?: Date | string | null
    endReason?: string | null
    maxLifetime: number
  }

  export type TagCreateManyCreatedByInput = {
    id?: number
    createdAt: Date | string
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type OfferCreateManyCreatedByInput = {
    id?: number
    version: number
    createdAt: Date | string
    title: string
    pictureUrl?: string | null
    pictureMimeType?: string | null
    description?: string | null
    pricePerUnit: string
    timeCirclesPriceShare: number
  }

  export type PurchaseCreateManyCreatedByInput = {
    id?: number
    createdAt: Date | string
  }

  export type InvitationCreateManyCreatedByInput = {
    id?: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationCreateManyRedeemedByInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedByProfileId?: number | null
    claimedAt?: Date | string | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type InvitationCreateManyClaimedByInput = {
    id?: number
    createdByProfileId: number
    createdAt: Date | string
    fundedAt?: Date | string | null
    name: string
    code: string
    claimedAt?: Date | string | null
    redeemedByProfileId?: number | null
    redeemedAt?: Date | string | null
    redeemTxHash?: string | null
    forSafeAddress?: string | null
    address: string
    key: string
  }

  export type MembershipCreateManyMemberAtInput = {
    id?: number
    createdAt?: Date | string
    createdByProfileId: number
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
  }

  export type MembershipCreateManyCreatedByInput = {
    id?: number
    createdAt?: Date | string
    acceptedAt?: Date | string | null
    rejectedAt?: Date | string | null
    validTo?: Date | string | null
    isAdmin?: boolean | null
    memberAddress: string
    memberAtId: number
  }

  export type InvoiceCreateManyCustomerProfileInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateManySellerProfileInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type InvoiceCreateManyCancelledByInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    purchaseId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelReason?: string | null
  }

  export type VerifiedSafeCreateManyCreatedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateManyCreatedByOrganisationInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    revokedAt?: Date | string | null
    revokedByProfileId?: number | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type VerifiedSafeCreateManyRevokedByInput = {
    safeAddress: string
    createdAt?: Date | string
    createdByProfileId: number
    createdByOrganisationId: number
    revokedAt?: Date | string | null
    swapEoaAddress: string
    swapEoaKey: string
    rewardProcessingStartedAt?: Date | string | null
    rewardProcessingWorker?: string | null
    inviteeRewardTransactionHash?: string | null
    inviterRewardTransactionHash?: string | null
    swapFundingTransactionHash?: string | null
    inviteCount?: number
  }

  export type SessionUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    emailAddress?: NullableStringFieldUpdateOperationsInput | string | null
    ethAddress?: NullableStringFieldUpdateOperationsInput | string | null
    challengeHash?: NullableStringFieldUpdateOperationsInput | string | null
    signature?: NullableStringFieldUpdateOperationsInput | string | null
    issuedBy?: StringFieldUpdateOperationsInput | string
    jti?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endReason?: NullableStringFieldUpdateOperationsInput | string | null
    maxLifetime?: IntFieldUpdateOperationsInput | number
  }

  export type TagUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transaction?: TransactionUpdateOneWithoutTagsInput
    type?: TagTypeUpdateOneRequiredWithoutTagsInput
    chatMessage?: ChatMessageUpdateOneWithoutTagsInput
    offer?: OfferUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OfferUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUpdateManyWithoutProductInput
    tags?: TagUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
    purchaseLines?: PurchaseLineUncheckedUpdateManyWithoutProductInput
    invoiceLines?: InvoiceLineUncheckedUpdateManyWithoutProductInput
    tags?: TagUncheckedUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateManyWithoutOffersInput = {
    id?: IntFieldUpdateOperationsInput | number
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    pictureMimeType?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pricePerUnit?: StringFieldUpdateOperationsInput | string
    timeCirclesPriceShare?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUpdateManyWithoutPurchaseInput
    invoices?: InvoiceUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lines?: PurchaseLineUncheckedUpdateManyWithoutPurchaseInput
    invoices?: InvoiceUncheckedUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateManyWithoutPurchasesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedBy?: ProfileUpdateOneWithoutClaimedInvitationsInput
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedBy?: ProfileUpdateOneWithoutRedeemedInvitationsInput
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyWithoutInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUpdateWithoutRedeemedByInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutInvitationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedBy?: ProfileUpdateOneWithoutClaimedInvitationsInput
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateWithoutRedeemedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyWithoutRedeemedInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUpdateWithoutClaimedByInput = {
    createdBy?: ProfileUpdateOneRequiredWithoutInvitationsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedBy?: ProfileUpdateOneWithoutRedeemedInvitationsInput
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateWithoutClaimedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type InvitationUncheckedUpdateManyWithoutClaimedInvitationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fundedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    redeemedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    redeemTxHash?: NullableStringFieldUpdateOperationsInput | string | null
    forSafeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipUpdateWithoutMemberAtInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutCreatedMembershipsInput
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipUncheckedUpdateWithoutMemberAtInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipUncheckedUpdateManyWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
  }

  export type MembershipUpdateWithoutCreatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAt?: ProfileUpdateOneRequiredWithoutMembersInput
  }

  export type MembershipUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAtId?: IntFieldUpdateOperationsInput | number
  }

  export type MembershipUncheckedUpdateManyWithoutCreatedMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isAdmin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    memberAddress?: StringFieldUpdateOperationsInput | string
    memberAtId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceUpdateWithoutCustomerProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutCustomerProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutPayableInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUpdateWithoutSellerProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutSellerProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutReceivableInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUpdateWithoutCancelledByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    purchase?: PurchaseUpdateOneRequiredWithoutInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutCancelledByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutCancelledInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerifiedSafeUpdateWithoutCreatedByInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutCreatedByInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutSafesVerifiedByPersonInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUpdateWithoutCreatedByOrganisationInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedBy?: ProfileUpdateOneWithoutSafesRevokedByPersonInput
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutCreatedByOrganisationInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutSafesVerifiedByOrganisationInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUpdateWithoutRevokedByInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutSafesVerifiedByPersonInput
    createdByOrganisation?: ProfileUpdateOneRequiredWithoutSafesVerifiedByOrganisationInput
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransaction?: TransactionUpdateOneWithoutInviteeReward_VerifiedSafeInput
    inviterRewardTransaction?: TransactionUpdateOneWithoutInviterReward_VerifiedSafeInput
    swapFundingTransaction?: TransactionUpdateOneWithoutSwapFunding_VerifiedSafeInput
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateWithoutRevokedByInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type VerifiedSafeUncheckedUpdateManyWithoutSafesRevokedByPersonInput = {
    safeAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    createdByOrganisationId?: IntFieldUpdateOperationsInput | number
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    swapEoaAddress?: StringFieldUpdateOperationsInput | string
    swapEoaKey?: StringFieldUpdateOperationsInput | string
    rewardProcessingStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rewardProcessingWorker?: NullableStringFieldUpdateOperationsInput | string | null
    inviteeRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviterRewardTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    swapFundingTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    inviteCount?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateManyChatMessageInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagUpdateWithoutChatMessageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutTagsInput
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transaction?: TransactionUpdateOneWithoutTagsInput
    type?: TagTypeUpdateOneRequiredWithoutTagsInput
    offer?: OfferUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutChatMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchaseLineCreateManyProductInput = {
    id?: number
    purchaseId: number
    amount: number
  }

  export type InvoiceLineCreateManyProductInput = {
    id?: number
    invoiceId: number
    amount: number
  }

  export type TagCreateManyOfferInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    typeId: string
    chatMessageId?: number | null
    value?: string | null
  }

  export type PurchaseLineUpdateWithoutProductInput = {
    purchase?: PurchaseUpdateOneRequiredWithoutLinesInput
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseLineUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseLineUncheckedUpdateManyWithoutPurchaseLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineUpdateWithoutProductInput = {
    invoice?: InvoiceUpdateOneRequiredWithoutLinesInput
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineUncheckedUpdateManyWithoutInvoiceLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    invoiceId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type TagUpdateWithoutOfferInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutTagsInput
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transaction?: TransactionUpdateOneWithoutTagsInput
    type?: TagTypeUpdateOneRequiredWithoutTagsInput
    chatMessage?: ChatMessageUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutOfferInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchaseLineCreateManyPurchaseInput = {
    id?: number
    amount: number
    productId: number
    productVersion: number
  }

  export type InvoiceCreateManyPurchaseInput = {
    id?: number
    createdAt: Date | string
    invoiceNo: string
    customerProfileId: number
    sellerProfileId: number
    pendingPaymentTransactionHash?: string | null
    paymentTransactionHash?: string | null
    pickupCode?: string | null
    buyerSignature?: boolean | null
    buyerSignedDate?: Date | string | null
    sellerSignature?: boolean | null
    sellerSignedDate?: Date | string | null
    cancelledAt?: Date | string | null
    cancelledByProfileId?: number | null
    cancelReason?: string | null
  }

  export type PurchaseLineUpdateWithoutPurchaseInput = {
    amount?: IntFieldUpdateOperationsInput | number
    product?: OfferUpdateOneRequiredWithoutPurchaseLinesInput
  }

  export type PurchaseLineUncheckedUpdateWithoutPurchaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseLineUncheckedUpdateManyWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceUpdateWithoutPurchaseInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfile?: ProfileUpdateOneRequiredWithoutPayableInvoicesInput
    sellerProfile?: ProfileUpdateOneRequiredWithoutReceivableInvoicesInput
    lines?: InvoiceLineUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransaction?: TransactionUpdateOneWithoutPayedInvoiceInput
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledBy?: ProfileUpdateOneWithoutCancelledInvoicesInput
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateWithoutPurchaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    lines?: InvoiceLineUncheckedUpdateManyWithoutInvoiceInput
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invoiceNo?: StringFieldUpdateOperationsInput | string
    customerProfileId?: IntFieldUpdateOperationsInput | number
    sellerProfileId?: IntFieldUpdateOperationsInput | number
    pendingPaymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    pickupCode?: NullableStringFieldUpdateOperationsInput | string | null
    buyerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sellerSignature?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sellerSignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledByProfileId?: NullableIntFieldUpdateOperationsInput | number | null
    cancelReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceLineCreateManyInvoiceInput = {
    id?: number
    amount: number
    productId: number
    productVersion: number
  }

  export type InvoiceLineUpdateWithoutInvoiceInput = {
    amount?: IntFieldUpdateOperationsInput | number
    product?: OfferUpdateOneRequiredWithoutInvoiceLinesInput
  }

  export type InvoiceLineUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceLineUncheckedUpdateManyWithoutLinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    productVersion?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateManyTypeInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    transactionHash?: string | null
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagUpdateWithoutTypeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutTagsInput
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transaction?: TransactionUpdateOneWithoutTagsInput
    chatMessage?: ChatMessageUpdateOneWithoutTagsInput
    offer?: OfferUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateManyTransactionInput = {
    id?: number
    createdAt: Date | string
    createdByProfileId: number
    isPrivate: boolean
    typeId: string
    chatMessageId?: number | null
    offerId?: number | null
    offerVersion?: number | null
    value?: string | null
  }

  export type TagUpdateWithoutTransactionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: ProfileUpdateOneRequiredWithoutTagsInput
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    type?: TagTypeUpdateOneRequiredWithoutTagsInput
    chatMessage?: ChatMessageUpdateOneWithoutTagsInput
    offer?: OfferUpdateOneWithoutTagsInput
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUncheckedUpdateWithoutTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByProfileId?: IntFieldUpdateOperationsInput | number
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    typeId?: StringFieldUpdateOperationsInput | string
    chatMessageId?: NullableIntFieldUpdateOperationsInput | number | null
    offerId?: NullableIntFieldUpdateOperationsInput | number | null
    offerVersion?: NullableIntFieldUpdateOperationsInput | number | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}